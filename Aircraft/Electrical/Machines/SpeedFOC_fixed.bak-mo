within CHEETA.Aircraft.Electrical.Machines;
model SpeedFOC_fixed
  "Linear speed commanded AIM drive, field-oriented control, continuous inverter"
  import ElectrifiedPowertrains;

  // Interface
  extends
    ElectrifiedPowertrains.ElectricDrives.Interfaces.ElectroMechanicSpeedCommanded;

  // Parameter
  extends
    ElectrifiedPowertrains.ElectricDrives.Interfaces.Parameters.Interfaces;

  // Icon
  extends ElectrifiedPowertrains.Common.Icons.ElectricMachines.Drive;
  extends
    ElectrifiedPowertrains.Common.Icons.ElectricMachines.SubIcons.RotorSquirrel;
  extends
    ElectrifiedPowertrains.Common.Icons.Control.SubIcons.SpeedCommanded_RightCorner;

  replaceable ElectrifiedPowertrains.ElectricMachines.AIM.Controllers.Interfaces.SpeedInVoltageOut  controller constrainedby
    ElectrifiedPowertrains.ElectricMachines.AIM.Controllers.Interfaces.SpeedInVoltageOut
                                                                                                              annotation (
    choicesAllMatching,
    Dialog(group="Model Selection"),
    Placement(transformation(extent={{-80,-10},{-60,10}})));
  replaceable ElectrifiedPowertrains.PowerElectronics.Inverters.PWM.Interfaces.Averaged modulationMethod
    annotation (choicesAllMatching, Dialog(group="Model Selection"), Placement(transformation(extent={{-40,-10},{-20,10}})));
  replaceable ElectrifiedPowertrains.PowerElectronics.Inverters.Averaged.Electrical.Interfaces.ThermalBase inverter(
    final useThermalPort=useThermalPort)
    annotation (choicesAllMatching, Dialog(group="Model Selection"), Placement(transformation(extent={{0,-10},{20,10}})));
  replaceable ElectrifiedPowertrains.ElectricMachines.AIM.ElectroMechanical.Interfaces.ThreePhase machine(
    final useThermalPort=useThermalPort,
    final useSupport=useSupport)
    annotation (
    choicesAllMatching,
    Dialog(group="Model Selection"),
    Placement(transformation(extent={{60,-10},{80,10}})));

  Modelica.Electrical.Machines.Interfaces.InductionMachines.ThermalPortAIMC thermalPortMachine if useThermalPort
    annotation (Placement(transformation(extent={{50,90},{70,110}})));
  ElectrifiedPowertrains.PowerElectronics.Inverters.Interfaces.ThermalPortInverter thermalPortInverter if useThermalPort
    annotation (Placement(transformation(extent={{-70,90},{-50,110}})));
equation
  connect(machine.plug_p, inverter.plug)
    annotation (Line(
      points={{60,0},{20,0}},
      color={0,0,255},
      smooth=Smooth.None));
  connect(inverter.pin_p, pin_p)
    annotation (Line(
      points={{0,6},{-10,6},{-10,60},{-100,60}},
      color={0,0,255},
      smooth=Smooth.None));
  connect(inverter.pin_n, pin_n)
    annotation (Line(
      points={{0,-6},{-10,-6},{-10,-60},{-100,-60}},
      color={0,0,255},
      smooth=Smooth.None));
  connect(machine.flange, flange) annotation (Line(
      points={{80,0},{100,0}},
      color={0,0,0},
      smooth=Smooth.None));
  connect(modulationMethod.phaseVoltages, controller.actuatingVoltages)
    annotation (Line(
      points={{-42,0},{-59,0}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(modulationMethod.normalizedPhaseVoltages, inverter.normalizedPhaseVoltages)
    annotation (Line(
      points={{-19,0},{-2,0}},
      color={0,0,127},
      smooth=Smooth.None));
  connect(controller.electricDriveBus, machine.electricDriveBus) annotation (Line(
      points={{-70,-10},{-70,-20},{70,-20},{70,-10}},
      color={0,86,166},
      thickness=0.5,
      smooth=Smooth.None));
  connect(inverter.electricDriveBus, machine.electricDriveBus) annotation (Line(
      points={{10,-10},{10,-20},{70,-20},{70,-10}},
      color={0,86,166},
      thickness=0.5,
      smooth=Smooth.None));
  connect(modulationMethod.electricDriveBus, machine.electricDriveBus) annotation (Line(
      points={{-30,-10},{-30,-20},{70,-20},{70,-10}},
      color={0,86,166},
      thickness=0.5,
      smooth=Smooth.None));
  connect(modulationMethod.electricDriveBus, electricDriveBus) annotation (Line(
      points={{-30,-10},{-30,-20},{0,-20},{0,-100}},
      color={0,86,166},
      thickness=0.5,
      smooth=Smooth.None));
  connect(machine.support, support) annotation (Line(points={{80,-10},{80,-100},{100,-100}}, color={0,0,0}));
  connect(thermalPortMachine, machine.thermalPort)
    annotation (Line(points={{60,100},{60,80},{76,80},{76,10}},         color={199,0,0}));
  connect(inverter.thermalPortInverter, thermalPortInverter)
    annotation (Line(points={{10,10},{10,10},{10,60},{10,80},{-60,80},{-60,100}}, color={199,0,0}));
  connect(controller.desiredSpeed, desiredSpeed)
    annotation (Line(points={{-82,0},{-90,0},{-90,40},{0,40},{0,120}}, color={0,0,127}));
  annotation (
    defaultComponentName="speedFOC_AIM",
    Diagram(coordinateSystem(preserveAspectRatio=false, extent={{-100,-100},{100,100}}),
                               graphics={Rectangle(extent={{34,6},{46,-6}},
            lineColor={175,175,175})}),   Icon(coordinateSystem(
          preserveAspectRatio=false, extent={{-100,-100},{100,100}}), graphics),
    Documentation(info="<html>
<p>Speed controlled (field oriented) physical machine model for a flexible combination of sub-components. It is intended for averaged physical simulations with different levels of detail corresponding to the selected models. The inverter models are always averaged, due to the internal connections in the model. Check the documentation of the selected models as documentation.</p>
</html>"));
end SpeedFOC_fixed;

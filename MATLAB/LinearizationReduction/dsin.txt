#1
char Aclass(3,24)
Adymosim
1.4
Modelica experiment file


#    Experiment parameters
double experiment(7,1)
       0                   # StartTime    Time at which integration starts
                           #              (and linearization and trimming time)
       0                   # StopTime     Time at which integration stops
       0                   # Increment    Communication step size, if > 0
     100                   # nInterval    Number of communication intervals, if > 0
  1.0000000000000000E-04   # Tolerance    Relative precision of signals for
                           #              simulation, linearization and trimming
       0                   # MaxFixedStep Maximum step size of fixed step size
                           #              integrators, if > 0.0
       4                   # Algorithm    Integration algorithm as integer (1...28)
                           #
                           #             | model|       |        | dense | state |
                           # Algorithm   | typ  | stiff | order  | output| event |
                           # ------------+------+-------+--------+-------+-------+
                           #  1 | deabm  |  ode |   no  |  1-12  |  yes  |   no  |
                           #  2 | lsode1 |  ode |   no  |  1-12  |  yes  |   no  |
                           #  3 | lsode2 |  ode |  yes  |  1-5   |  yes  |   no  |
                           #  4 | lsodar |  ode |  both |1-12,1-5|  yes  |  yes  |
                           #  5 | dopri5 |  ode |   no  |   5    |   no  |   no  |
                           #  6 | dopri8 |  ode |   no  |   8    |   no  |   no  |
                           #  7 | grk4t  |  ode |  yes  |   4    |   no  |   no  |
                           #  8 | dassl  |  dae |  yes  |  1-5   |  yes  |  yes  |
                           #  9 | odassl | hdae |  yes  |  1-5   |  yes  |  yes  |
                           # 10 | mexx   | hdae |   no  |  2-24  |   no  |   no  |
                           # 11 | euler  |  ode |   no  |   1    |   no  |  yes  |
                           # 12 | rkfix2 |  ode |   no  |   2    |   no  |  yes  |
                           # 13 | rkfix3 |  ode |   no  |   3    |   no  |  yes  |
                           # 14 | rkfix4 |  ode |   no  |   4    |   no  |  yes  |
                           #>=14| others |  ode |yes/no |  2-5   |   yes |  yes  |
                           # ---+--------+------+-------+--------+-------+-------+
                           # euler and rkfix have fixed stepsize.


#    Method tuning parameters
double method(27,1)
       1                   # grid     type of communication time grid, defined by
                           #          = 1: equidistant points ("Increment/nInterval")
                           #          = 2: vector of grid points ("tgrid")
                           #          = 3: variable step integrator (automatically)
                           #          = 4: model (call of "increment" in Dymola, e.g.
                           #                      incr=Time > 2 then 0 else 0.1
                           #                      dummy=increment(incr))
                           #          grid = 1,3 is stopped by "StopTime"
                           #          grid = 2   is stopped by "tgrid(last)"
                           #          grid = 4   runs forever (stopped by model)
       1                   # nt       Use every NT time instant, if grid = 3
       3                   # dense    1/2/3 restart/step/interpolate GRID points
       1                   # evgrid   0/1 do not/save event points in comm. time grid
       1                   # evu      0/1 U-discontinuity does not/trigger events
       0                   # evuord       U-discontinuity order to consider (0,1,...)
       0                   # error    0/1/2 One message/warning/error messages
       0                   # jac      0/1 Compute jacobian numerically/by BLOCKJ
       0                   # xd0c     0/1 Compute/set XD0
       0                   # f3       0/1 Ignore/use F3 of HDAE (= index 1)
       0                   # f4       0/1 Ignore/use F4 of HDAE (= index 2)
       0                   # f5       0/1 Ignore/use F5 of HDAE (= invar.)
       0                   # debug    flags for debug information (1<<0 uses pdebug) 
     100                   # pdebug       priority of debug information (1...100)
       0                   # fmax     Maximum number of evaluations of BLOCKF, if > 0
       0                   # ordmax   Maximum allowed integration order, if > 0
       0                   # hmax     Maximum absolute stepsize, if > 0
       0                   # hmin     Minimum absolute stepsize, if > 0 (use with care!)
       0                   # h0       Stepsize to be attempted on first step, if > 0
  9.9999999999999998E-13   # teps     Bound to check, if 2 equal time instants
  1.0000000000000000E-10   # eveps    Hysteresis epsilon at event points
      20                   # eviter   Maximum number of event iterations
       0                   # delaym   Minimum time increment in delay buffers
       1                   # fexcep   0/1 floating exception crashes/stops dymosim
       1                   # tscale   clock-time = tscale*simulation-time, if grid = 5
                           #          > 1: simulation too slow
                           #          = 1: simulation-time = real-time
                           #          < 1: simulation too fast
       1                   # shared   (not used)
    2473                   # memkey   (not used)


#    Output parameters
int settings(13,1)
 0                         # lprec    0/1 do not/store result data in double
 1                         # lx       0/1 do not/store x  (state variables)
 1                         # lxd      0/1 do not/store xd (derivative of states)
 1                         # lu       0/1 do not/store u  (input     signals)
 1                         # ly       0/1 do not/store y  (output    signals)
 0                         # lz       0/1 do not/store z  (indicator signals)
 1                         # lw       0/1 do not/store w  (auxiliary signals)
 1                         # la       0/1 do not/store a  (alias     signals)
 0                         # lperf    0/1 do not/store performance indicators
 0                         # levent   0/1 do not/store event point
 1                         # lres     0/1 do not/store results on result file
 0                         # lshare   0/1 do not/store info data for shared memory on dsshare.txt
 1                         # lform    0/1 ASCII/Matlab-binary storage format of results
                           #              (for simulation/linearization; not for trimming)


#    Names of initial variables
char initialName(4842,110)
N
nbrSubStacks
n_cell[1]
n_cell[2]
A_cell
Cp_cell
kc_cell
M_stack
A_top
h_top
dp_top
h_conv_top
e_top
A_bottom
h_bottom
dp_bottom
A_side
h_conv_side
e_side
k_insul
dl_topInsul
dl_bottomInsul
dl_sideInsul
n
initOpt_anode
p_start_in_anode
p_start_out_anode
p_start_anode[1]
p_start_anode[2]
initFromEnthalpy_anode
h_start_in_anode
h_start_out_anode
h_start_anode[1]
h_start_anode[2]
T_start_in_anode
T_start_out_anode
T_start_anode[1]
T_start_anode[2]
X_start_anode[1]
X_start_anode[2]
X_start_anode[3]
X_start_anode[4]
X_start_anode[5]
X_start_anode[6]
X_start_anode[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.R
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].R
m_flow_start_anode
initOpt_cathode
p_start_in_cathode
p_start_out_cathode
p_start_cathode[1]
p_start_cathode[2]
initFromEnthalpy_cathode
h_start_in_cathode
h_start_out_cathode
h_start_cathode[1]
h_start_cathode[2]
T_start_in_cathode
T_start_out_cathode
T_start_cathode[1]
T_start_cathode[2]
X_start_cathode[1]
X_start_cathode[2]
X_start_cathode[3]
X_start_cathode[4]
X_start_cathode[5]
m_flow_start_cathode
dp_smooth
mflow_smooth
from_dp_anode
positiveFlow_anode
generateEventForReversal_anode
from_dp_cathode
positiveFlow_cathode
generateEventForReversal_cathode
useHeatTransfer_anode
useHeatTransfer_cathode
dp_start_anode
dp_start_cathode
splitRatio_an[1]
splitRatio_an[2]
splitRatio_cath[1]
splitRatio_cath[2]
V_manifold_an
V_manifold_cath
height
thickness_cell
wallthickness
A_cell_tot
m_flow_nom_an
m_flow_nom_cath
heat[1].n
heat[1].Aheatloss
heat[1].kc
heat[1].infiniteHT
heat[1].variableKc
heat[1].Q_s[1]
subStack[1].N
subStack[1].nX_an
subStack[1].nX_cath
subStack[1].A_cell
subStack[1].kc
subStack[1].includeCellConduction
subStack[1].lambda_cell
subStack[1].A_crosssection_cell
subStack[1].length_cell
subStack[1].G_cell
subStack[1].n_cell
subStack[1].M_cell
subStack[1].Cp_cell
subStack[1].addProxToAnode
subStack[1].P_stack
subStack[1].anode_stoich
subStack[1].cathode_stoich
subStack[1].cell.N
subStack[1].cell.nX_an
subStack[1].cell.nX_cath
subStack[1].cell.A_cell
subStack[1].cell.n_cell
subStack[1].cell.MCp_cell
subStack[1].cell.kc
subStack[1].cell.pstart
subStack[1].cell.Tstart
subStack[1].cell.T_cell[1]
subStack[1].cell.der(T_cell[1])
subStack[1].cell.P_total
subStack[1].cell.Q_cell[1]
subStack[1].cell.j_External
subStack[1].cell.T_from_h
subStack[1].cell.wall_an[1].Q_flow
subStack[1].cell.wall_cath[1].Q_flow
subStack[1].cell.pin_p.i
subStack[1].cell.pin_n.i
subStack[1].cell.port_an[1].m_flow
subStack[1].cell.port_an[1].H_flow
subStack[1].cell.port_an[1].X[1]
subStack[1].cell.port_an[1].X[2]
subStack[1].cell.port_an[1].X[3]
subStack[1].cell.port_an[1].X[4]
subStack[1].cell.port_an[1].X[5]
subStack[1].cell.port_an[1].X[6]
subStack[1].cell.port_an[1].X[7]
subStack[1].cell.port_an[1].mX_flow[1]
subStack[1].cell.port_an[1].mX_flow[2]
subStack[1].cell.port_an[1].mX_flow[3]
subStack[1].cell.port_an[1].mX_flow[4]
subStack[1].cell.port_an[1].mX_flow[5]
subStack[1].cell.port_an[1].mX_flow[6]
subStack[1].cell.port_an[1].mX_flow[7]
subStack[1].cell.port_cath[1].m_flow
subStack[1].cell.port_cath[1].H_flow
subStack[1].cell.port_cath[1].mX_flow[1]
subStack[1].cell.port_cath[1].mX_flow[2]
subStack[1].cell.port_cath[1].mX_flow[3]
subStack[1].cell.port_cath[1].mX_flow[4]
subStack[1].cell.port_cath[1].mX_flow[5]
subStack[1].cell.T_an[1]
subStack[1].cell.state_an[1].p
subStack[1].cell.state_an[1].T
subStack[1].cell.state_cath[1].T
subStack[1].cell.anode[1].X[1]
subStack[1].cell.anode[1].X[2]
subStack[1].cell.anode[1].X[3]
subStack[1].cell.anode[1].X[4]
subStack[1].cell.anode[1].X[5]
subStack[1].cell.anode[1].X[6]
subStack[1].cell.anode[1].X[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].R
subStack[1].cell.anode[1].Xi[1]
subStack[1].cell.anode[1].Xi[2]
subStack[1].cell.anode[1].Xi[3]
subStack[1].cell.anode[1].Xi[4]
subStack[1].cell.anode[1].Xi[5]
subStack[1].cell.anode[1].Xi[6]
subStack[1].cell.anode[1].Xi[7]
subStack[1].cell.anode[1].d
subStack[1].cell.anode[1].h
subStack[1].cell.anode[1].u
subStack[1].cell.anode[1].Rg
subStack[1].cell.anode[1].MM
subStack[1].cell.anode[1].assertlevel
subStack[1].cell.anode[1].state.p
subStack[1].cell.anode[1].state.T
subStack[1].cell.anode[1].state.X[1]
subStack[1].cell.anode[1].state.X[2]
subStack[1].cell.anode[1].state.X[3]
subStack[1].cell.anode[1].state.X[4]
subStack[1].cell.anode[1].state.X[5]
subStack[1].cell.anode[1].state.X[6]
subStack[1].cell.anode[1].state.X[7]
subStack[1].cell.anode[1].preferredMediumStates
subStack[1].cell.anode[1].T_degC
subStack[1].cell.anode[1].p_bar
subStack[1].cell.anode[1].Z[1]
subStack[1].cell.anode[1].Z[2]
subStack[1].cell.anode[1].Z[3]
subStack[1].cell.anode[1].Z[4]
subStack[1].cell.anode[1].Z[5]
subStack[1].cell.anode[1].Z[6]
subStack[1].cell.anode[1].Z[7]
subStack[1].cell.anode[1].dUZT[1]
subStack[1].cell.anode[1].dUZT[2]
subStack[1].cell.anode[1].dUZT[3]
subStack[1].cell.anode[1].dUZT[4]
subStack[1].cell.anode[1].dUZT[5]
subStack[1].cell.anode[1].dUZT[6]
subStack[1].cell.anode[1].dUZT[7]
subStack[1].cell.anode[1].h_component[1]
subStack[1].cell.anode[1].h_component[2]
subStack[1].cell.anode[1].h_component[3]
subStack[1].cell.anode[1].h_component[4]
subStack[1].cell.anode[1].h_component[5]
subStack[1].cell.anode[1].h_component[6]
subStack[1].cell.anode[1].h_component[7]
subStack[1].cell.anode[1].s_component[1]
subStack[1].cell.anode[1].s_component[2]
subStack[1].cell.anode[1].s_component[3]
subStack[1].cell.anode[1].s_component[4]
subStack[1].cell.anode[1].s_component[5]
subStack[1].cell.anode[1].s_component[6]
subStack[1].cell.anode[1].s_component[7]
subStack[1].cell.anode[1].u_comp[1]
subStack[1].cell.anode[1].u_comp[2]
subStack[1].cell.anode[1].u_comp[3]
subStack[1].cell.anode[1].u_comp[4]
subStack[1].cell.anode[1].u_comp[5]
subStack[1].cell.anode[1].u_comp[6]
subStack[1].cell.anode[1].u_comp[7]
subStack[1].cell.anode[1].cp
subStack[1].cell.anode[1].g_formation[1]
subStack[1].cell.anode[1].g_formation[2]
subStack[1].cell.anode[1].g_formation[3]
subStack[1].cell.anode[1].g_formation[4]
subStack[1].cell.anode[1].g_formation[5]
subStack[1].cell.anode[1].g_formation[6]
subStack[1].cell.anode[1].g_formation[7]
subStack[1].cell.anode[1].ddTp
subStack[1].cell.anode[1].ddpT
subStack[1].cell.anode[1].dupT
subStack[1].cell.anode[1].duTp
subStack[1].cell.anode[1].ddx[1]
subStack[1].cell.anode[1].ddx[2]
subStack[1].cell.anode[1].ddx[3]
subStack[1].cell.anode[1].ddx[4]
subStack[1].cell.anode[1].ddx[5]
subStack[1].cell.anode[1].ddx[6]
subStack[1].cell.anode[1].ddx[7]
subStack[1].cell.cathode[1].X[1]
subStack[1].cell.cathode[1].X[2]
subStack[1].cell.cathode[1].X[3]
subStack[1].cell.cathode[1].X[4]
subStack[1].cell.cathode[1].X[5]
subStack[1].cell.cathode[1].d
subStack[1].cell.cathode[1].h
subStack[1].cell.cathode[1].u
subStack[1].cell.cathode[1].Rg
subStack[1].cell.cathode[1].MM
subStack[1].cell.cathode[1].assertlevel
subStack[1].cell.cathode[1].state.p
subStack[1].cell.cathode[1].state.T
subStack[1].cell.cathode[1].state.X[1]
subStack[1].cell.cathode[1].state.X[2]
subStack[1].cell.cathode[1].state.X[3]
subStack[1].cell.cathode[1].state.X[4]
subStack[1].cell.cathode[1].state.X[5]
subStack[1].cell.cathode[1].preferredMediumStates
subStack[1].cell.cathode[1].T_degC
subStack[1].cell.cathode[1].p_bar
subStack[1].cell.cathode[1].Z[1]
subStack[1].cell.cathode[1].Z[2]
subStack[1].cell.cathode[1].Z[3]
subStack[1].cell.cathode[1].Z[4]
subStack[1].cell.cathode[1].Z[5]
subStack[1].cell.cathode[1].dUZT[1]
subStack[1].cell.cathode[1].dUZT[2]
subStack[1].cell.cathode[1].dUZT[3]
subStack[1].cell.cathode[1].dUZT[4]
subStack[1].cell.cathode[1].dUZT[5]
subStack[1].cell.cathode[1].h_component[1]
subStack[1].cell.cathode[1].h_component[2]
subStack[1].cell.cathode[1].h_component[3]
subStack[1].cell.cathode[1].h_component[4]
subStack[1].cell.cathode[1].h_component[5]
subStack[1].cell.cathode[1].s_component[1]
subStack[1].cell.cathode[1].s_component[2]
subStack[1].cell.cathode[1].s_component[3]
subStack[1].cell.cathode[1].s_component[4]
subStack[1].cell.cathode[1].s_component[5]
subStack[1].cell.cathode[1].u_comp[1]
subStack[1].cell.cathode[1].u_comp[2]
subStack[1].cell.cathode[1].u_comp[3]
subStack[1].cell.cathode[1].u_comp[4]
subStack[1].cell.cathode[1].u_comp[5]
subStack[1].cell.cathode[1].cp
subStack[1].cell.cathode[1].g_formation[1]
subStack[1].cell.cathode[1].g_formation[2]
subStack[1].cell.cathode[1].g_formation[3]
subStack[1].cell.cathode[1].g_formation[4]
subStack[1].cell.cathode[1].g_formation[5]
subStack[1].cell.cathode[1].ddTp
subStack[1].cell.cathode[1].ddpT
subStack[1].cell.cathode[1].dupT
subStack[1].cell.cathode[1].duTp
subStack[1].cell.cathode[1].ddx[1]
subStack[1].cell.cathode[1].ddx[2]
subStack[1].cell.cathode[1].ddx[3]
subStack[1].cell.cathode[1].ddx[4]
subStack[1].cell.cathode[1].ddx[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.MM
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Hf
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.H0
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Tlimit
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[3]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[4]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[5]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[6]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[7]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[1]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[2]
_GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].R
subStack[1].cell.der_T_cell[1]
subStack[1].cell.sum_Q_cell
subStack[1].cell.P_cell[1]
subStack[1].cell.j_Ionic[1]
subStack[1].cell.T_degC
subStack[1].cell.m_flowO2[1]
subStack[1].cell.m_flowH2[1]
subStack[1].cell.m_flowH2O[1]
subStack[1].cell.mXi_flow_an[1, 1]
subStack[1].cell.mXi_flow_an[1, 2]
subStack[1].cell.mXi_flow_an[1, 3]
subStack[1].cell.mXi_flow_an[1, 4]
subStack[1].cell.mXi_flow_an[1, 5]
subStack[1].cell.mXi_flow_an[1, 6]
subStack[1].cell.mXi_flow_an[1, 7]
subStack[1].cell.S_ionic[1]
subStack[1].cell.S_ionic[2]
subStack[1].cell.S_ionic[3]
subStack[1].cell.S_ionic[4]
subStack[1].cell.S_ionic[5]
subStack[1].cell.S_ionic[6]
subStack[1].cell.S_ionic[7]
subStack[1].cell.ASR0
subStack[1].cell.Ea
subStack[1].cell.T0
subStack[1].cell.V_nernst[1]
subStack[1].cell.r_Int[1]
subStack[1].cell.ASR[1]
subStack[1].cell.g_reaction[1]
subStack[1].cell.pH2[1]
subStack[1].cell.pH2O[1]
subStack[1].cell.pO2[1]
subStack[1].cell.internalRes[1].T_ref
subStack[1].cell.internalRes[1].alpha
subStack[1].cell.internalRes[1].v
subStack[1].cell.internalRes[1].i
subStack[1].cell.internalRes[1].p.i
subStack[1].cell.internalRes[1].n.i
subStack[1].cell.internalRes[1].useHeatPort
subStack[1].cell.internalRes[1].T
subStack[1].cell.internalRes[1].LossPower
subStack[1].cell.internalRes[1].R_actual
subStack[1].cell.sourceV[1].p.i
subStack[1].cell.sourceV[1].n.i
subStack[1].cell.sourceV[1].i
subStack[1].cell.ref[1]
subStack[1].cell.ref[2]
subStack[1].cell.air[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX[5]
subStack[1].pin_p.i
subStack[1].pin_n.i
subStack[1].feed_anode.h_outflow
subStack[1].feed_cathode.h_outflow
subStack[1].wall[1].Q_flow
subStack[1].pi
subStack[1].n_channels_anode
subStack[1].L_anode
subStack[1].D_anode
subStack[1].Dhyd_anode
subStack[1].C_anode
subStack[1].A_anode
subStack[1].V_anode
subStack[1].A_heat_anode
subStack[1].n_channels_cathode
subStack[1].L_cathode
subStack[1].D_cathode
subStack[1].Dhyd_cathode
subStack[1].C_cathode
subStack[1].A_cathode
subStack[1].V_cathode
subStack[1].A_heat_cathode
subStack[1].n
subStack[1].initOpt_anode
subStack[1].p_start_in_anode
subStack[1].p_start_out_anode
subStack[1].p_start_anode[1]
subStack[1].p_start_anode[2]
subStack[1].initFromEnthalpy_anode
subStack[1].h_start_in_anode
subStack[1].h_start_out_anode
subStack[1].h_start_anode[1]
subStack[1].h_start_anode[2]
subStack[1].T_start_in_anode
subStack[1].T_start_out_anode
subStack[1].T_start_anode[1]
subStack[1].T_start_anode[2]
subStack[1].X_start_anode[1]
subStack[1].X_start_anode[2]
subStack[1].X_start_anode[3]
subStack[1].X_start_anode[4]
subStack[1].X_start_anode[5]
subStack[1].X_start_anode[6]
subStack[1].X_start_anode[7]
subStack[1].m_flow_start_anode
subStack[1].initOpt_cathode
subStack[1].p_start_in_cathode
subStack[1].p_start_out_cathode
subStack[1].p_start_cathode[1]
subStack[1].p_start_cathode[2]
subStack[1].initFromEnthalpy_cathode
subStack[1].h_start_in_cathode
subStack[1].h_start_out_cathode
subStack[1].h_start_cathode[1]
subStack[1].h_start_cathode[2]
subStack[1].T_start_in_cathode
subStack[1].T_start_out_cathode
subStack[1].T_start_cathode[1]
subStack[1].T_start_cathode[2]
subStack[1].X_start_cathode[1]
subStack[1].X_start_cathode[2]
subStack[1].X_start_cathode[3]
subStack[1].X_start_cathode[4]
subStack[1].X_start_cathode[5]
subStack[1].m_flow_start_cathode
subStack[1].dp_smooth
subStack[1].mflow_smooth
subStack[1].from_dp_anode
subStack[1].positiveFlow_anode
subStack[1].generateEventForReversal_anode
subStack[1].from_dp_cathode
subStack[1].positiveFlow_cathode
subStack[1].generateEventForReversal_cathode
subStack[1].useHeatTransfer_anode
subStack[1].useHeatTransfer_cathode
subStack[1].CF_AnodeSidePressureLoss
subStack[1].CF_AnodeSideHeatTransfer
subStack[1].CF_CathodePressureLoss
subStack[1].CF_CathodeSideHeatTransfer
subStack[1].d0_prox
subStack[1].dp0_prox
subStack[1].m_flow_nom_prox
subStack[1].anode_stoich_num
subStack[1].anode_stoich_den
subStack[1].cathode_stoich_num
subStack[1].cathode_stoich_den
subStack[1].summary.N
subStack[1].summary.n_cell
subStack[1].summary.P_stack
subStack[1].summary.j_external
subStack[1].summary.V_cell
subStack[1].summary.Q_stack
subStack[1].summary.dp_anode
subStack[1].summary.dp_cathode
subStack[1].anode_channel.summary.dp
subStack[1].anode_channel.summary.m_flow
subStack[1].anode_channel.summary.M
subStack[1].anode_channel.summary.der(M)
subStack[1].anode_channel.summary.T_in
subStack[1].anode_channel.summary.d_in
subStack[1].anode_channel.n
subStack[1].anode_channel.pi
subStack[1].anode_channel.n_channels
subStack[1].anode_channel.L
subStack[1].anode_channel.D
subStack[1].anode_channel.Dhyd
subStack[1].anode_channel.A
subStack[1].anode_channel.C
subStack[1].anode_channel.V
subStack[1].anode_channel.A_heat
subStack[1].anode_channel.useHeatTransfer
subStack[1].anode_channel.ni
subStack[1].anode_channel.initOpt
subStack[1].anode_channel.p_start_in
subStack[1].anode_channel.p_start_out
subStack[1].anode_channel.p_start[1]
subStack[1].anode_channel.p_start[2]
subStack[1].anode_channel.initFromEnthalpy
subStack[1].anode_channel.h_start_in
subStack[1].anode_channel.h_start_out
subStack[1].anode_channel.h_start[1]
subStack[1].anode_channel.h_start[2]
subStack[1].anode_channel.T_start_in
subStack[1].anode_channel.T_start_out
subStack[1].anode_channel.T_start[1]
subStack[1].anode_channel.T_start[2]
subStack[1].anode_channel.X_start[1]
subStack[1].anode_channel.X_start[2]
subStack[1].anode_channel.X_start[3]
subStack[1].anode_channel.X_start[4]
subStack[1].anode_channel.X_start[5]
subStack[1].anode_channel.X_start[6]
subStack[1].anode_channel.X_start[7]
subStack[1].anode_channel.m_flow_start
subStack[1].anode_channel.positiveFlow
subStack[1].anode_channel.from_dp
subStack[1].anode_channel.dp_smooth
subStack[1].anode_channel.mflow_smooth
subStack[1].anode_channel.generateEventForReversal
subStack[1].anode_channel.CF_PressureLoss
subStack[1].anode_channel.CF_HeatTransfer
subStack[1].anode_channel.X_weight
subStack[1].anode_channel.y_sat
subStack[1].anode_channel.includeStaticHead
subStack[1].anode_channel.height
subStack[1].anode_channel.g
subStack[1].anode_channel.channel.n
subStack[1].anode_channel.channel.n_channels[1]
subStack[1].anode_channel.channel.L[1]
subStack[1].anode_channel.channel.Dhyd[1]
subStack[1].anode_channel.channel.A[1]
subStack[1].anode_channel.channel.L_total
subStack[1].anode_channel.channel.V[1]
subStack[1].anode_channel.channel.V_tot
subStack[1].anode_channel.channel.A_mean
subStack[1].anode_channel.channel.A_heat[1]
subStack[1].anode_channel.channel.ni
subStack[1].anode_channel.channel.initOpt
subStack[1].anode_channel.channel.p_start_in
subStack[1].anode_channel.channel.p_start_out
subStack[1].anode_channel.channel.p_start[1]
subStack[1].anode_channel.channel.p_start[2]
subStack[1].anode_channel.channel.initFromEnthalpy
subStack[1].anode_channel.channel.h_start_in
subStack[1].anode_channel.channel.h_start_out
subStack[1].anode_channel.channel.h_start[1]
subStack[1].anode_channel.channel.h_start[2]
subStack[1].anode_channel.channel.T_start_in
subStack[1].anode_channel.channel.T_start_out
subStack[1].anode_channel.channel.T_start[1]
subStack[1].anode_channel.channel.T_start[2]
subStack[1].anode_channel.channel.X_start[1]
subStack[1].anode_channel.channel.X_start[2]
subStack[1].anode_channel.channel.X_start[3]
subStack[1].anode_channel.channel.X_start[4]
subStack[1].anode_channel.channel.X_start[5]
subStack[1].anode_channel.channel.X_start[6]
subStack[1].anode_channel.channel.X_start[7]
subStack[1].anode_channel.channel.m_flow_start
subStack[1].anode_channel.channel.positiveFlow
subStack[1].anode_channel.channel.from_dp
subStack[1].anode_channel.channel.dp_smooth
subStack[1].anode_channel.channel.mflow_smooth
subStack[1].anode_channel.channel.generateEventForReversal
subStack[1].anode_channel.channel.NA
subStack[1].anode_channel.channel.NB
subStack[1].anode_channel.channel.T[1]
subStack[1].anode_channel.channel.der(T[1])
subStack[1].anode_channel.channel.dp_asState
subStack[1].anode_channel.channel.frictionDistribution
subStack[1].anode_channel.channel.n_fric
subStack[1].anode_channel.channel.CF_PressureLoss
subStack[1].anode_channel.channel.CF_HeatTransfer
subStack[1].anode_channel.channel.includeStaticHead
subStack[1].anode_channel.channel.levels[1]
subStack[1].anode_channel.channel.g
subStack[1].anode_channel.channel.friction[1].A
subStack[1].anode_channel.channel.friction[1].Dhyd
subStack[1].anode_channel.channel.friction[1].n_channels
subStack[1].anode_channel.channel.friction[1].lengthFraction
subStack[1].anode_channel.channel.friction[1].flowFraction0
subStack[1].anode_channel.channel.friction[1].dpFraction0
subStack[1].anode_channel.channel.friction[1].from_dp
subStack[1].anode_channel.channel.friction[1].positiveFlow
subStack[1].anode_channel.channel.friction[1].dp_smooth
subStack[1].anode_channel.channel.friction[1].mflow_smooth
subStack[1].anode_channel.channel.friction[1].useFixedDensity
subStack[1].anode_channel.channel.friction[1].reference_d
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[1]
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[2]
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[3]
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[4]
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[5]
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[6]
subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[7]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[1]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[2]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[3]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[4]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[5]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[6]
subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[7]
subStack[1].anode_channel.channel.friction[1].dp_from_isothermal
subStack[1].anode_channel.channel.friction[1].m_flow
subStack[1].anode_channel.channel.friction[1].dA
subStack[1].anode_channel.channel.friction[1].dB
subStack[1].anode_channel.channel.friction[1].d0
subStack[1].anode_channel.channel.friction[1].dp0
subStack[1].anode_channel.channel.friction[1].m_flow0
subStack[1].anode_channel.channel.htcoeff[1].A
subStack[1].anode_channel.channel.htcoeff[1].L
subStack[1].anode_channel.channel.htcoeff[1].Dhyd
subStack[1].anode_channel.channel.htcoeff[1].m_flow
subStack[1].anode_channel.channel.htcoeff[1].ht_from_isothermal
subStack[1].anode_channel.channel.htcoeff[1].CF_length
subStack[1].anode_channel.channel.htcoeff[1].alpha
subStack[1].anode_channel.channel.reaction.N
subStack[1].anode_channel.channel.reaction.Cp_reac[1]
subStack[1].anode_channel.channel.reaction.Q[1]
subStack[1].anode_channel.channel.reaction.S_reac[1, 1]
subStack[1].anode_channel.channel.reaction.S_reac[1, 2]
subStack[1].anode_channel.channel.reaction.S_reac[1, 3]
subStack[1].anode_channel.channel.reaction.S_reac[1, 4]
subStack[1].anode_channel.channel.reaction.S_reac[1, 5]
subStack[1].anode_channel.channel.reaction.S_reac[1, 6]
subStack[1].anode_channel.channel.reaction.S_reac[1, 7]
subStack[1].anode_channel.channel.reaction.S_reac[2, 1]
subStack[1].anode_channel.channel.reaction.S_reac[2, 2]
subStack[1].anode_channel.channel.reaction.S_reac[2, 3]
subStack[1].anode_channel.channel.reaction.S_reac[2, 4]
subStack[1].anode_channel.channel.reaction.S_reac[2, 5]
subStack[1].anode_channel.channel.reaction.S_reac[2, 6]
subStack[1].anode_channel.channel.reaction.S_reac[2, 7]
subStack[1].anode_channel.channel.reaction.n_reac
subStack[1].anode_channel.channel.reaction.comp[1]
subStack[1].anode_channel.channel.reaction.comp[2]
subStack[1].anode_channel.channel.reaction.pstart
subStack[1].anode_channel.channel.reaction.Tstart
subStack[1].anode_channel.channel.reaction.Xstart[1]
subStack[1].anode_channel.channel.reaction.Xstart[2]
subStack[1].anode_channel.channel.reaction.Xstart[3]
subStack[1].anode_channel.channel.reaction.Xstart[4]
subStack[1].anode_channel.channel.reaction.Xstart[5]
subStack[1].anode_channel.channel.reaction.Xstart[6]
subStack[1].anode_channel.channel.reaction.Xstart[7]
subStack[1].anode_channel.channel.reaction.V
subStack[1].anode_channel.channel.reaction.scale
subStack[1].anode_channel.channel.reaction.MMX[1]
subStack[1].anode_channel.channel.reaction.MMX[2]
subStack[1].anode_channel.channel.reaction.MMX[3]
subStack[1].anode_channel.channel.reaction.MMX[4]
subStack[1].anode_channel.channel.reaction.MMX[5]
subStack[1].anode_channel.channel.reaction.MMX[6]
subStack[1].anode_channel.channel.reaction.MMX[7]
subStack[1].anode_channel.channel.reaction.MM[1]
subStack[1].anode_channel.channel.reaction.der(MM[1])
subStack[1].anode_channel.channel.reaction.y_start[1]
subStack[1].anode_channel.channel.reaction.y_start[2]
subStack[1].anode_channel.channel.reaction.y_start[3]
subStack[1].anode_channel.channel.reaction.y_start[4]
subStack[1].anode_channel.channel.reaction.y_start[5]
subStack[1].anode_channel.channel.reaction.y_start[6]
subStack[1].anode_channel.channel.reaction.y_start[7]
subStack[1].anode_channel.channel.reaction.log10_y_start[1]
subStack[1].anode_channel.channel.reaction.log10_y_start[2]
subStack[1].anode_channel.channel.reaction.log10_y_start[3]
subStack[1].anode_channel.channel.reaction.log10_y_start[4]
subStack[1].anode_channel.channel.reaction.log10_y_start[5]
subStack[1].anode_channel.channel.reaction.log10_y_start[6]
subStack[1].anode_channel.channel.reaction.log10_y_start[7]
subStack[1].anode_channel.channel.reaction.pref
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 1]
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 2]
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 3]
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 4]
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 5]
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 6]
subStack[1].anode_channel.channel.reaction.log10_y_out[1, 7]
subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 1]
subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 2]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 1]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 2]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 3]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 4]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 5]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 6]
subStack[1].anode_channel.channel.reaction.Sx_reac[1, 7]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 1]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 2]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 3]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 4]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 5]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 6]
subStack[1].anode_channel.channel.reaction.Sx_reac[2, 7]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[5]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[6]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[7]
subStack[1].anode_channel.channel.reaction.Ztot_start
subStack[1].anode_channel.channel.reaction.Zx_start[1]
subStack[1].anode_channel.channel.reaction.Zx_start[2]
subStack[1].anode_channel.channel.reaction.Zx_start[3]
subStack[1].anode_channel.channel.reaction.Zx_start[4]
subStack[1].anode_channel.channel.reaction.Zx_start[5]
subStack[1].anode_channel.channel.reaction.Zx_start[6]
subStack[1].anode_channel.channel.reaction.Zx_start[7]
subStack[1].anode_channel.channel.reaction.CF_conversion
subStack[1].anode_channel.channel.reaction.Tscale
subStack[1].anode_channel.channel.reaction.kEq_reac[1, 1]
subStack[1].anode_channel.channel.reaction.kEq_reac[1, 2]
subStack[1].anode_channel.channel.reaction.Zx[1, 1]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 1])
subStack[1].anode_channel.channel.reaction.Zx[1, 2]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 2])
subStack[1].anode_channel.channel.reaction.Zx[1, 3]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 3])
subStack[1].anode_channel.channel.reaction.Zx[1, 4]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 4])
subStack[1].anode_channel.channel.reaction.Zx[1, 5]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 5])
subStack[1].anode_channel.channel.reaction.Zx[1, 6]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 6])
subStack[1].anode_channel.channel.reaction.Zx[1, 7]
subStack[1].anode_channel.channel.reaction.der(Zx[1, 7])
subStack[1].anode_channel.channel.reaction.Ztot[1]
subStack[1].anode_channel.channel.reaction.der(Ztot[1])
subStack[1].anode_channel.channel.reaction.Zx_flow[1, 1]
subStack[1].anode_channel.channel.reaction.Zx_flow[1, 2]
subStack[1].anode_channel.channel.reaction.Zx_flow[1, 3]
subStack[1].anode_channel.channel.reaction.Zx_flow[1, 4]
subStack[1].anode_channel.channel.reaction.Zx_flow[1, 5]
subStack[1].anode_channel.channel.reaction.krate[1, 1]
subStack[1].anode_channel.channel.reaction.der(krate[1, 1])
subStack[1].anode_channel.channel.reaction.krate[1, 2]
subStack[1].anode_channel.channel.reaction.der(krate[1, 2])
subStack[1].anode_channel.channel.reaction.rZ[1, 1]
subStack[1].anode_channel.channel.reaction.rZ[1, 2]
subStack[1].anode_channel.channel.reaction.rZ[1, 3]
subStack[1].anode_channel.channel.reaction.rZ[1, 4]
subStack[1].anode_channel.channel.reaction.rZ[1, 5]
subStack[1].anode_channel.channel.reaction.rZ[1, 6]
subStack[1].anode_channel.channel.reaction.rZ[1, 7]
subStack[1].anode_channel.channel.reaction.g_formation[1, 1]
subStack[1].anode_channel.channel.reaction.g_formation[1, 2]
subStack[1].anode_channel.channel.reaction.g_formation[1, 3]
subStack[1].anode_channel.channel.reaction.g_formation[1, 4]
subStack[1].anode_channel.channel.reaction.g_formation[1, 5]
subStack[1].anode_channel.channel.reaction.g_formation[1, 6]
subStack[1].anode_channel.channel.reaction.g_formation[1, 7]
subStack[1].anode_channel.channel.reaction.Zx_nominal
subStack[1].anode_channel.channel.reaction.epsZ
subStack[1].anode_channel.channel.reaction.e[1, 1]
subStack[1].anode_channel.channel.reaction.e[1, 2]
subStack[1].anode_channel.channel.reaction.state[1].p
subStack[1].anode_channel.channel.reaction.state[1].T
subStack[1].anode_channel.channel.reaction.state[1].X[1]
subStack[1].anode_channel.channel.reaction.state[1].X[2]
subStack[1].anode_channel.channel.reaction.state[1].X[3]
subStack[1].anode_channel.channel.reaction.state[1].X[4]
subStack[1].anode_channel.channel.reaction.state[1].X[5]
subStack[1].anode_channel.channel.reaction.state[1].X[6]
subStack[1].anode_channel.channel.reaction.state[1].X[7]
subStack[1].anode_channel.channel.reaction.deplZ[1, 1]
subStack[1].anode_channel.channel.reaction.deplZ[1, 2]
subStack[1].anode_channel.channel.reaction.deplZ[1, 3]
subStack[1].anode_channel.channel.reaction.deplZ[1, 4]
subStack[1].anode_channel.channel.reaction.deplZ[1, 5]
subStack[1].anode_channel.channel.reaction.deplZ[1, 6]
subStack[1].anode_channel.channel.reaction.deplZ[1, 7]
subStack[1].anode_channel.channel.reaction.reactant[1, 1]
subStack[1].anode_channel.channel.reaction.reactant[1, 2]
subStack[1].anode_channel.channel.reaction.reactant[1, 3]
subStack[1].anode_channel.channel.reaction.reactant[1, 4]
subStack[1].anode_channel.channel.reaction.reactant[1, 5]
subStack[1].anode_channel.channel.reaction.reactant[1, 6]
subStack[1].anode_channel.channel.reaction.reactant[1, 7]
subStack[1].anode_channel.channel.reaction.reactant[2, 1]
subStack[1].anode_channel.channel.reaction.reactant[2, 2]
subStack[1].anode_channel.channel.reaction.reactant[2, 3]
subStack[1].anode_channel.channel.reaction.reactant[2, 4]
subStack[1].anode_channel.channel.reaction.reactant[2, 5]
subStack[1].anode_channel.channel.reaction.reactant[2, 6]
subStack[1].anode_channel.channel.reaction.reactant[2, 7]
subStack[1].anode_channel.channel.reaction.rate[1, 1]
subStack[1].anode_channel.channel.reaction.rate[1, 2]
subStack[1].anode_channel.channel.reaction.S_ref[1]
subStack[1].anode_channel.channel.reaction.S_ref[2]
subStack[1].anode_channel.channel.reaction.S_ref[3]
subStack[1].anode_channel.channel.reaction.S_ref[4]
subStack[1].anode_channel.channel.reaction.S_ref[5]
subStack[1].anode_channel.channel.reaction.S_ref[6]
subStack[1].anode_channel.channel.reaction.S_ref[7]
subStack[1].anode_channel.channel.reaction.S_wgs[1]
subStack[1].anode_channel.channel.reaction.S_wgs[2]
subStack[1].anode_channel.channel.reaction.S_wgs[3]
subStack[1].anode_channel.channel.reaction.S_wgs[4]
subStack[1].anode_channel.channel.reaction.S_wgs[5]
subStack[1].anode_channel.channel.reaction.S_wgs[6]
subStack[1].anode_channel.channel.reaction.S_wgs[7]
subStack[1].anode_channel.channel.reaction.index[1]
subStack[1].anode_channel.channel.reaction.index[2]
subStack[1].anode_channel.channel.reaction.T_sat_for_WGS
subStack[1].anode_channel.channel.reaction.g_rere[1]
subStack[1].anode_channel.channel.reaction.g_wgs[1]
subStack[1].anode_channel.channel.gas[1].X[1]
subStack[1].anode_channel.channel.gas[1].X[2]
subStack[1].anode_channel.channel.gas[1].X[3]
subStack[1].anode_channel.channel.gas[1].X[4]
subStack[1].anode_channel.channel.gas[1].X[5]
subStack[1].anode_channel.channel.gas[1].X[6]
subStack[1].anode_channel.channel.gas[1].X[7]
subStack[1].anode_channel.channel.gas[1].der(X[1])
subStack[1].anode_channel.channel.gas[1].der(X[2])
subStack[1].anode_channel.channel.gas[1].der(X[3])
subStack[1].anode_channel.channel.gas[1].der(X[4])
subStack[1].anode_channel.channel.gas[1].der(X[5])
subStack[1].anode_channel.channel.gas[1].der(X[6])
subStack[1].anode_channel.channel.gas[1].der(X[7])
subStack[1].anode_channel.channel.gas[1].Xi[1]
subStack[1].anode_channel.channel.gas[1].Xi[2]
subStack[1].anode_channel.channel.gas[1].Xi[3]
subStack[1].anode_channel.channel.gas[1].Xi[4]
subStack[1].anode_channel.channel.gas[1].Xi[5]
subStack[1].anode_channel.channel.gas[1].Xi[6]
subStack[1].anode_channel.channel.gas[1].Xi[7]
subStack[1].anode_channel.channel.gas[1].d
subStack[1].anode_channel.channel.gas[1].der(d)
subStack[1].anode_channel.channel.gas[1].u
subStack[1].anode_channel.channel.gas[1].Rg
subStack[1].anode_channel.channel.gas[1].der(Rg)
subStack[1].anode_channel.channel.gas[1].MM
subStack[1].anode_channel.channel.gas[1].assertlevel
subStack[1].anode_channel.channel.gas[1].state.p
subStack[1].anode_channel.channel.gas[1].state.T
subStack[1].anode_channel.channel.gas[1].state.X[1]
subStack[1].anode_channel.channel.gas[1].state.X[2]
subStack[1].anode_channel.channel.gas[1].state.X[3]
subStack[1].anode_channel.channel.gas[1].state.X[4]
subStack[1].anode_channel.channel.gas[1].state.X[5]
subStack[1].anode_channel.channel.gas[1].state.X[6]
subStack[1].anode_channel.channel.gas[1].state.X[7]
subStack[1].anode_channel.channel.gas[1].preferredMediumStates
subStack[1].anode_channel.channel.gas[1].p_bar
subStack[1].anode_channel.channel.gas[1].Z[1]
subStack[1].anode_channel.channel.gas[1].Z[2]
subStack[1].anode_channel.channel.gas[1].Z[3]
subStack[1].anode_channel.channel.gas[1].Z[4]
subStack[1].anode_channel.channel.gas[1].Z[5]
subStack[1].anode_channel.channel.gas[1].Z[6]
subStack[1].anode_channel.channel.gas[1].Z[7]
subStack[1].anode_channel.channel.gas[1].dUZT[1]
subStack[1].anode_channel.channel.gas[1].dUZT[2]
subStack[1].anode_channel.channel.gas[1].dUZT[3]
subStack[1].anode_channel.channel.gas[1].dUZT[4]
subStack[1].anode_channel.channel.gas[1].dUZT[5]
subStack[1].anode_channel.channel.gas[1].dUZT[6]
subStack[1].anode_channel.channel.gas[1].dUZT[7]
subStack[1].anode_channel.channel.gas[1].h_component[1]
subStack[1].anode_channel.channel.gas[1].h_component[2]
subStack[1].anode_channel.channel.gas[1].h_component[3]
subStack[1].anode_channel.channel.gas[1].h_component[4]
subStack[1].anode_channel.channel.gas[1].h_component[5]
subStack[1].anode_channel.channel.gas[1].h_component[6]
subStack[1].anode_channel.channel.gas[1].h_component[7]
subStack[1].anode_channel.channel.gas[1].s_component[1]
subStack[1].anode_channel.channel.gas[1].s_component[2]
subStack[1].anode_channel.channel.gas[1].s_component[3]
subStack[1].anode_channel.channel.gas[1].s_component[4]
subStack[1].anode_channel.channel.gas[1].s_component[5]
subStack[1].anode_channel.channel.gas[1].s_component[6]
subStack[1].anode_channel.channel.gas[1].s_component[7]
subStack[1].anode_channel.channel.gas[1].u_comp[1]
subStack[1].anode_channel.channel.gas[1].u_comp[2]
subStack[1].anode_channel.channel.gas[1].u_comp[3]
subStack[1].anode_channel.channel.gas[1].u_comp[4]
subStack[1].anode_channel.channel.gas[1].u_comp[5]
subStack[1].anode_channel.channel.gas[1].u_comp[6]
subStack[1].anode_channel.channel.gas[1].u_comp[7]
subStack[1].anode_channel.channel.gas[1].cp
subStack[1].anode_channel.channel.gas[1].g_formation[1]
subStack[1].anode_channel.channel.gas[1].g_formation[2]
subStack[1].anode_channel.channel.gas[1].g_formation[3]
subStack[1].anode_channel.channel.gas[1].g_formation[4]
subStack[1].anode_channel.channel.gas[1].g_formation[5]
subStack[1].anode_channel.channel.gas[1].g_formation[6]
subStack[1].anode_channel.channel.gas[1].g_formation[7]
subStack[1].anode_channel.channel.gas[1].ddTp
subStack[1].anode_channel.channel.gas[1].ddpT
subStack[1].anode_channel.channel.gas[1].dupT
subStack[1].anode_channel.channel.gas[1].duTp
subStack[1].anode_channel.channel.gas[1].ddx[1]
subStack[1].anode_channel.channel.gas[1].ddx[2]
subStack[1].anode_channel.channel.gas[1].ddx[3]
subStack[1].anode_channel.channel.gas[1].ddx[4]
subStack[1].anode_channel.channel.gas[1].ddx[5]
subStack[1].anode_channel.channel.gas[1].ddx[6]
subStack[1].anode_channel.channel.gas[1].ddx[7]
subStack[1].anode_channel.channel.p[1]
subStack[1].anode_channel.channel.der(p[1])
subStack[1].anode_channel.channel.E_seg[1]
subStack[1].anode_channel.channel.MXi[1, 1]
subStack[1].anode_channel.channel.MXi[1, 2]
subStack[1].anode_channel.channel.MXi[1, 3]
subStack[1].anode_channel.channel.MXi[1, 4]
subStack[1].anode_channel.channel.MXi[1, 5]
subStack[1].anode_channel.channel.MXi[1, 6]
subStack[1].anode_channel.channel.MXi[1, 7]
subStack[1].anode_channel.channel.dp[1]
subStack[1].anode_channel.channel.dp[2]
subStack[1].anode_channel.channel.sh[1]
subStack[1].anode_channel.channel.state[1].p
subStack[1].anode_channel.channel.state[1].T
subStack[1].anode_channel.channel.state[1].X[1]
subStack[1].anode_channel.channel.state[1].X[2]
subStack[1].anode_channel.channel.state[1].X[3]
subStack[1].anode_channel.channel.state[1].X[4]
subStack[1].anode_channel.channel.state[1].X[5]
subStack[1].anode_channel.channel.state[1].X[6]
subStack[1].anode_channel.channel.state[1].X[7]
subStack[1].anode_channel.channel.state[2].p
subStack[1].anode_channel.channel.state[2].T
subStack[1].anode_channel.channel.state[2].X[1]
subStack[1].anode_channel.channel.state[2].X[2]
subStack[1].anode_channel.channel.state[2].X[3]
subStack[1].anode_channel.channel.state[2].X[4]
subStack[1].anode_channel.channel.state[2].X[5]
subStack[1].anode_channel.channel.state[2].X[6]
subStack[1].anode_channel.channel.state[2].X[7]
subStack[1].anode_channel.channel.state[3].p
subStack[1].anode_channel.channel.state[3].T
subStack[1].anode_channel.channel.state[3].X[1]
subStack[1].anode_channel.channel.state[3].X[2]
subStack[1].anode_channel.channel.state[3].X[3]
subStack[1].anode_channel.channel.state[3].X[4]
subStack[1].anode_channel.channel.state[3].X[5]
subStack[1].anode_channel.channel.state[3].X[6]
subStack[1].anode_channel.channel.state[3].X[7]
subStack[1].anode_channel.channel.TB
subStack[1].anode_channel.channel.Q[1]
subStack[1].anode_channel.channel.alpha[1]
subStack[1].anode_channel.channel.rMX[1, 1]
subStack[1].anode_channel.channel.rMX[1, 2]
subStack[1].anode_channel.channel.rMX[1, 3]
subStack[1].anode_channel.channel.rMX[1, 4]
subStack[1].anode_channel.channel.rMX[1, 5]
subStack[1].anode_channel.channel.rMX[1, 6]
subStack[1].anode_channel.channel.rMX[1, 7]
subStack[1].anode_channel.channel.mflow_A_in
subStack[1].anode_channel.channel.mflow_B_in
subStack[1].anode_channel.channel.XA[1]
subStack[1].anode_channel.channel.XA[2]
subStack[1].anode_channel.channel.XA[3]
subStack[1].anode_channel.channel.XA[4]
subStack[1].anode_channel.channel.XA[5]
subStack[1].anode_channel.channel.XA[6]
subStack[1].anode_channel.channel.XA[7]
subStack[1].anode_channel.channel.XB[1]
subStack[1].anode_channel.channel.XB[2]
subStack[1].anode_channel.channel.XB[3]
subStack[1].anode_channel.channel.XB[4]
subStack[1].anode_channel.channel.XB[5]
subStack[1].anode_channel.channel.XB[6]
subStack[1].anode_channel.channel.XB[7]
subStack[1].anode_channel.channel.n_channels_fric[1]
subStack[1].anode_channel.channel.T_wall[1]
subStack[1].anode_channel.channel.nS
subStack[1].anode_channel.channel.mX_flow[1, 1]
subStack[1].anode_channel.channel.mX_flow[1, 2]
subStack[1].anode_channel.channel.mX_flow[1, 3]
subStack[1].anode_channel.channel.mX_flow[1, 4]
subStack[1].anode_channel.channel.mX_flow[1, 5]
subStack[1].anode_channel.channel.mX_flow[1, 6]
subStack[1].anode_channel.channel.mX_flow[1, 7]
subStack[1].anode_channel.channel.mX_flow[2, 1]
subStack[1].anode_channel.channel.mX_flow[2, 2]
subStack[1].anode_channel.channel.mX_flow[2, 3]
subStack[1].anode_channel.channel.mX_flow[2, 4]
subStack[1].anode_channel.channel.mX_flow[2, 5]
subStack[1].anode_channel.channel.mX_flow[2, 6]
subStack[1].anode_channel.channel.mX_flow[2, 7]
subStack[1].anode_channel.channel.H_flow[1]
subStack[1].anode_channel.channel.H_flow[2]
subStack[1].anode_channel.channel.dE[1]
subStack[1].anode_channel.channel.dMX[1, 1]
subStack[1].anode_channel.channel.dMX[1, 2]
subStack[1].anode_channel.channel.dMX[1, 3]
subStack[1].anode_channel.channel.dMX[1, 4]
subStack[1].anode_channel.channel.dMX[1, 5]
subStack[1].anode_channel.channel.dMX[1, 6]
subStack[1].anode_channel.channel.dMX[1, 7]
subStack[1].anode_channel.channel.dZ[1, 1]
subStack[1].anode_channel.channel.dZ[1, 2]
subStack[1].anode_channel.channel.dZ[1, 3]
subStack[1].anode_channel.channel.dZ[1, 4]
subStack[1].anode_channel.channel.dZ[1, 5]
subStack[1].anode_channel.channel.dUTZ[1]
subStack[1].anode_channel.channel.Z[1, 1]
subStack[1].anode_channel.channel.Z[1, 2]
subStack[1].anode_channel.channel.Z[1, 3]
subStack[1].anode_channel.channel.Z[1, 4]
subStack[1].anode_channel.channel.Z[1, 5]
subStack[1].anode_channel.channel.Z[1, 6]
subStack[1].anode_channel.channel.Z[1, 7]
subStack[1].anode_channel.channel.der(Z[1, 1])
subStack[1].anode_channel.channel.der(Z[1, 2])
subStack[1].anode_channel.channel.der(Z[1, 3])
subStack[1].anode_channel.channel.der(Z[1, 4])
subStack[1].anode_channel.channel.der(Z[1, 5])
subStack[1].anode_channel.channel.der(Z[1, 6])
subStack[1].anode_channel.channel.der(Z[1, 7])
subStack[1].anode_channel.port[1].m_flow
subStack[1].anode_channel.port[1].H_flow
subStack[1].anode_channel.port[1].mX_flow[1]
subStack[1].anode_channel.port[1].mX_flow[2]
subStack[1].anode_channel.port[1].mX_flow[3]
subStack[1].anode_channel.port[1].mX_flow[4]
subStack[1].anode_channel.port[1].mX_flow[5]
subStack[1].anode_channel.port[1].mX_flow[6]
subStack[1].anode_channel.port[1].mX_flow[7]
subStack[1].cathode_channel.summary.dp
subStack[1].cathode_channel.summary.m_flow
subStack[1].cathode_channel.summary.M
subStack[1].cathode_channel.summary.der(M)
subStack[1].cathode_channel.summary.d_in
subStack[1].cathode_channel.n
subStack[1].cathode_channel.pi
subStack[1].cathode_channel.n_channels
subStack[1].cathode_channel.L
subStack[1].cathode_channel.D
subStack[1].cathode_channel.Dhyd
subStack[1].cathode_channel.A
subStack[1].cathode_channel.C
subStack[1].cathode_channel.V
subStack[1].cathode_channel.A_heat
subStack[1].cathode_channel.useHeatTransfer
subStack[1].cathode_channel.ni
subStack[1].cathode_channel.initOpt
subStack[1].cathode_channel.p_start_in
subStack[1].cathode_channel.p_start_out
subStack[1].cathode_channel.p_start[1]
subStack[1].cathode_channel.p_start[2]
subStack[1].cathode_channel.initFromEnthalpy
subStack[1].cathode_channel.h_start_in
subStack[1].cathode_channel.h_start_out
subStack[1].cathode_channel.h_start[1]
subStack[1].cathode_channel.h_start[2]
subStack[1].cathode_channel.T_start_in
subStack[1].cathode_channel.T_start_out
subStack[1].cathode_channel.T_start[1]
subStack[1].cathode_channel.T_start[2]
subStack[1].cathode_channel.X_start[1]
subStack[1].cathode_channel.X_start[2]
subStack[1].cathode_channel.X_start[3]
subStack[1].cathode_channel.X_start[4]
subStack[1].cathode_channel.X_start[5]
subStack[1].cathode_channel.m_flow_start
subStack[1].cathode_channel.positiveFlow
subStack[1].cathode_channel.from_dp
subStack[1].cathode_channel.dp_smooth
subStack[1].cathode_channel.mflow_smooth
subStack[1].cathode_channel.generateEventForReversal
subStack[1].cathode_channel.CF_PressureLoss
subStack[1].cathode_channel.CF_HeatTransfer
subStack[1].cathode_channel.X_weight
subStack[1].cathode_channel.y_sat
subStack[1].cathode_channel.includeStaticHead
subStack[1].cathode_channel.height
subStack[1].cathode_channel.g
subStack[1].cathode_channel.channel.n
subStack[1].cathode_channel.channel.n_channels[1]
subStack[1].cathode_channel.channel.L[1]
subStack[1].cathode_channel.channel.Dhyd[1]
subStack[1].cathode_channel.channel.A[1]
subStack[1].cathode_channel.channel.L_total
subStack[1].cathode_channel.channel.V[1]
subStack[1].cathode_channel.channel.V_tot
subStack[1].cathode_channel.channel.A_mean
subStack[1].cathode_channel.channel.A_heat[1]
subStack[1].cathode_channel.channel.ni
subStack[1].cathode_channel.channel.initOpt
subStack[1].cathode_channel.channel.p_start_in
subStack[1].cathode_channel.channel.p_start_out
subStack[1].cathode_channel.channel.p_start[1]
subStack[1].cathode_channel.channel.p_start[2]
subStack[1].cathode_channel.channel.initFromEnthalpy
subStack[1].cathode_channel.channel.h_start_in
subStack[1].cathode_channel.channel.h_start_out
subStack[1].cathode_channel.channel.h_start[1]
subStack[1].cathode_channel.channel.h_start[2]
subStack[1].cathode_channel.channel.T_start_in
subStack[1].cathode_channel.channel.T_start_out
subStack[1].cathode_channel.channel.T_start[1]
subStack[1].cathode_channel.channel.T_start[2]
subStack[1].cathode_channel.channel.X_start[1]
subStack[1].cathode_channel.channel.X_start[2]
subStack[1].cathode_channel.channel.X_start[3]
subStack[1].cathode_channel.channel.X_start[4]
subStack[1].cathode_channel.channel.X_start[5]
subStack[1].cathode_channel.channel.m_flow_start
subStack[1].cathode_channel.channel.positiveFlow
subStack[1].cathode_channel.channel.from_dp
subStack[1].cathode_channel.channel.dp_smooth
subStack[1].cathode_channel.channel.mflow_smooth
subStack[1].cathode_channel.channel.generateEventForReversal
subStack[1].cathode_channel.channel.NA
subStack[1].cathode_channel.channel.NB
subStack[1].cathode_channel.channel.T[1]
subStack[1].cathode_channel.channel.der(T[1])
subStack[1].cathode_channel.channel.dp_asState
subStack[1].cathode_channel.channel.frictionDistribution
subStack[1].cathode_channel.channel.n_fric
subStack[1].cathode_channel.channel.CF_PressureLoss
subStack[1].cathode_channel.channel.CF_HeatTransfer
subStack[1].cathode_channel.channel.includeStaticHead
subStack[1].cathode_channel.channel.levels[1]
subStack[1].cathode_channel.channel.g
subStack[1].cathode_channel.channel.friction[1].A
subStack[1].cathode_channel.channel.friction[1].Dhyd
subStack[1].cathode_channel.channel.friction[1].n_channels
subStack[1].cathode_channel.channel.friction[1].lengthFraction
subStack[1].cathode_channel.channel.friction[1].flowFraction0
subStack[1].cathode_channel.channel.friction[1].dpFraction0
subStack[1].cathode_channel.channel.friction[1].from_dp
subStack[1].cathode_channel.channel.friction[1].positiveFlow
subStack[1].cathode_channel.channel.friction[1].dp_smooth
subStack[1].cathode_channel.channel.friction[1].mflow_smooth
subStack[1].cathode_channel.channel.friction[1].useFixedDensity
subStack[1].cathode_channel.channel.friction[1].reference_d
subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[1]
subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[2]
subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[3]
subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[4]
subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[5]
subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[1]
subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[2]
subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[3]
subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[4]
subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[5]
subStack[1].cathode_channel.channel.friction[1].dp_from_isothermal
subStack[1].cathode_channel.channel.friction[1].dA
subStack[1].cathode_channel.channel.friction[1].dB
subStack[1].cathode_channel.channel.friction[1].d0
subStack[1].cathode_channel.channel.friction[1].dp0
subStack[1].cathode_channel.channel.friction[1].m_flow0
subStack[1].cathode_channel.channel.htcoeff[1].A
subStack[1].cathode_channel.channel.htcoeff[1].L
subStack[1].cathode_channel.channel.htcoeff[1].Dhyd
subStack[1].cathode_channel.channel.htcoeff[1].ht_from_isothermal
subStack[1].cathode_channel.channel.htcoeff[1].CF_length
subStack[1].cathode_channel.channel.htcoeff[1].alpha
subStack[1].cathode_channel.channel.reaction.N
subStack[1].cathode_channel.channel.reaction.Cp_reac[1]
subStack[1].cathode_channel.channel.reaction.Q[1]
subStack[1].cathode_channel.channel.reaction.n_reac
subStack[1].cathode_channel.channel.reaction.pstart
subStack[1].cathode_channel.channel.reaction.Tstart
subStack[1].cathode_channel.channel.reaction.Xstart[1]
subStack[1].cathode_channel.channel.reaction.Xstart[2]
subStack[1].cathode_channel.channel.reaction.Xstart[3]
subStack[1].cathode_channel.channel.reaction.Xstart[4]
subStack[1].cathode_channel.channel.reaction.Xstart[5]
subStack[1].cathode_channel.channel.reaction.V
subStack[1].cathode_channel.channel.reaction.scale
subStack[1].cathode_channel.channel.reaction.MMX[1]
subStack[1].cathode_channel.channel.reaction.MMX[2]
subStack[1].cathode_channel.channel.reaction.MMX[3]
subStack[1].cathode_channel.channel.reaction.MMX[4]
subStack[1].cathode_channel.channel.reaction.MMX[5]
subStack[1].cathode_channel.channel.reaction.MM[1]
subStack[1].cathode_channel.channel.reaction.der(MM[1])
subStack[1].cathode_channel.channel.reaction.y_start[1]
subStack[1].cathode_channel.channel.reaction.y_start[2]
subStack[1].cathode_channel.channel.reaction.y_start[3]
subStack[1].cathode_channel.channel.reaction.y_start[4]
subStack[1].cathode_channel.channel.reaction.y_start[5]
subStack[1].cathode_channel.channel.reaction.log10_y_start[1]
subStack[1].cathode_channel.channel.reaction.log10_y_start[2]
subStack[1].cathode_channel.channel.reaction.log10_y_start[3]
subStack[1].cathode_channel.channel.reaction.log10_y_start[4]
subStack[1].cathode_channel.channel.reaction.log10_y_start[5]
subStack[1].cathode_channel.channel.reaction.pref
subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 1]
subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 2]
subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 3]
subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 4]
subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 5]
subStack[1].cathode_channel.channel.reaction.Ztot_start
subStack[1].cathode_channel.channel.reaction.Zx_start[1]
subStack[1].cathode_channel.channel.reaction.Zx_start[2]
subStack[1].cathode_channel.channel.reaction.Zx_start[3]
subStack[1].cathode_channel.channel.reaction.Zx_start[4]
subStack[1].cathode_channel.channel.reaction.Zx_start[5]
subStack[1].cathode_channel.channel.reaction.CF_conversion
subStack[1].cathode_channel.channel.reaction.Tscale
subStack[1].cathode_channel.channel.reaction.Zx[1, 1]
subStack[1].cathode_channel.channel.reaction.der(Zx[1, 1])
subStack[1].cathode_channel.channel.reaction.Zx[1, 2]
subStack[1].cathode_channel.channel.reaction.der(Zx[1, 2])
subStack[1].cathode_channel.channel.reaction.Zx[1, 3]
subStack[1].cathode_channel.channel.reaction.der(Zx[1, 3])
subStack[1].cathode_channel.channel.reaction.Zx[1, 4]
subStack[1].cathode_channel.channel.reaction.der(Zx[1, 4])
subStack[1].cathode_channel.channel.reaction.Zx[1, 5]
subStack[1].cathode_channel.channel.reaction.der(Zx[1, 5])
subStack[1].cathode_channel.channel.reaction.Ztot[1]
subStack[1].cathode_channel.channel.reaction.der(Ztot[1])
subStack[1].cathode_channel.channel.reaction.rZ[1, 1]
subStack[1].cathode_channel.channel.reaction.rZ[1, 2]
subStack[1].cathode_channel.channel.reaction.rZ[1, 3]
subStack[1].cathode_channel.channel.reaction.rZ[1, 4]
subStack[1].cathode_channel.channel.reaction.rZ[1, 5]
subStack[1].cathode_channel.channel.reaction.g_formation[1, 1]
subStack[1].cathode_channel.channel.reaction.g_formation[1, 2]
subStack[1].cathode_channel.channel.reaction.g_formation[1, 3]
subStack[1].cathode_channel.channel.reaction.g_formation[1, 4]
subStack[1].cathode_channel.channel.reaction.g_formation[1, 5]
subStack[1].cathode_channel.channel.reaction.Zx_nominal
subStack[1].cathode_channel.channel.reaction.epsZ
subStack[1].cathode_channel.channel.reaction.state[1].p
subStack[1].cathode_channel.channel.reaction.state[1].T
subStack[1].cathode_channel.channel.reaction.state[1].X[1]
subStack[1].cathode_channel.channel.reaction.state[1].X[2]
subStack[1].cathode_channel.channel.reaction.state[1].X[3]
subStack[1].cathode_channel.channel.reaction.state[1].X[4]
subStack[1].cathode_channel.channel.reaction.state[1].X[5]
subStack[1].cathode_channel.channel.reaction.deplZ[1, 1]
subStack[1].cathode_channel.channel.reaction.deplZ[1, 2]
subStack[1].cathode_channel.channel.reaction.deplZ[1, 3]
subStack[1].cathode_channel.channel.reaction.deplZ[1, 4]
subStack[1].cathode_channel.channel.reaction.deplZ[1, 5]
subStack[1].cathode_channel.channel.gas[1].X[1]
subStack[1].cathode_channel.channel.gas[1].X[2]
subStack[1].cathode_channel.channel.gas[1].X[3]
subStack[1].cathode_channel.channel.gas[1].X[4]
subStack[1].cathode_channel.channel.gas[1].X[5]
subStack[1].cathode_channel.channel.gas[1].der(X[1])
subStack[1].cathode_channel.channel.gas[1].der(X[2])
subStack[1].cathode_channel.channel.gas[1].der(X[3])
subStack[1].cathode_channel.channel.gas[1].der(X[4])
subStack[1].cathode_channel.channel.gas[1].der(X[5])
subStack[1].cathode_channel.channel.gas[1].d
subStack[1].cathode_channel.channel.gas[1].der(d)
subStack[1].cathode_channel.channel.gas[1].u
subStack[1].cathode_channel.channel.gas[1].Rg
subStack[1].cathode_channel.channel.gas[1].der(Rg)
subStack[1].cathode_channel.channel.gas[1].MM
subStack[1].cathode_channel.channel.gas[1].assertlevel
subStack[1].cathode_channel.channel.gas[1].state.p
subStack[1].cathode_channel.channel.gas[1].state.T
subStack[1].cathode_channel.channel.gas[1].state.X[1]
subStack[1].cathode_channel.channel.gas[1].state.X[2]
subStack[1].cathode_channel.channel.gas[1].state.X[3]
subStack[1].cathode_channel.channel.gas[1].state.X[4]
subStack[1].cathode_channel.channel.gas[1].state.X[5]
subStack[1].cathode_channel.channel.gas[1].preferredMediumStates
subStack[1].cathode_channel.channel.gas[1].p_bar
subStack[1].cathode_channel.channel.gas[1].Z[1]
subStack[1].cathode_channel.channel.gas[1].Z[2]
subStack[1].cathode_channel.channel.gas[1].Z[3]
subStack[1].cathode_channel.channel.gas[1].Z[4]
subStack[1].cathode_channel.channel.gas[1].Z[5]
subStack[1].cathode_channel.channel.gas[1].dUZT[1]
subStack[1].cathode_channel.channel.gas[1].dUZT[2]
subStack[1].cathode_channel.channel.gas[1].dUZT[3]
subStack[1].cathode_channel.channel.gas[1].dUZT[4]
subStack[1].cathode_channel.channel.gas[1].dUZT[5]
subStack[1].cathode_channel.channel.gas[1].h_component[1]
subStack[1].cathode_channel.channel.gas[1].h_component[2]
subStack[1].cathode_channel.channel.gas[1].h_component[3]
subStack[1].cathode_channel.channel.gas[1].h_component[4]
subStack[1].cathode_channel.channel.gas[1].h_component[5]
subStack[1].cathode_channel.channel.gas[1].s_component[1]
subStack[1].cathode_channel.channel.gas[1].s_component[2]
subStack[1].cathode_channel.channel.gas[1].s_component[3]
subStack[1].cathode_channel.channel.gas[1].s_component[4]
subStack[1].cathode_channel.channel.gas[1].s_component[5]
subStack[1].cathode_channel.channel.gas[1].u_comp[1]
subStack[1].cathode_channel.channel.gas[1].u_comp[2]
subStack[1].cathode_channel.channel.gas[1].u_comp[3]
subStack[1].cathode_channel.channel.gas[1].u_comp[4]
subStack[1].cathode_channel.channel.gas[1].u_comp[5]
subStack[1].cathode_channel.channel.gas[1].cp
subStack[1].cathode_channel.channel.gas[1].g_formation[1]
subStack[1].cathode_channel.channel.gas[1].g_formation[2]
subStack[1].cathode_channel.channel.gas[1].g_formation[3]
subStack[1].cathode_channel.channel.gas[1].g_formation[4]
subStack[1].cathode_channel.channel.gas[1].g_formation[5]
subStack[1].cathode_channel.channel.gas[1].ddTp
subStack[1].cathode_channel.channel.gas[1].ddpT
subStack[1].cathode_channel.channel.gas[1].dupT
subStack[1].cathode_channel.channel.gas[1].duTp
subStack[1].cathode_channel.channel.gas[1].ddx[1]
subStack[1].cathode_channel.channel.gas[1].ddx[2]
subStack[1].cathode_channel.channel.gas[1].ddx[3]
subStack[1].cathode_channel.channel.gas[1].ddx[4]
subStack[1].cathode_channel.channel.gas[1].ddx[5]
subStack[1].cathode_channel.channel.der(p[1])
subStack[1].cathode_channel.channel.E_seg[1]
subStack[1].cathode_channel.channel.MXi[1, 1]
subStack[1].cathode_channel.channel.MXi[1, 2]
subStack[1].cathode_channel.channel.MXi[1, 3]
subStack[1].cathode_channel.channel.MXi[1, 4]
subStack[1].cathode_channel.channel.MXi[1, 5]
subStack[1].cathode_channel.channel.dp[1]
subStack[1].cathode_channel.channel.dp[2]
subStack[1].cathode_channel.channel.sh[1]
subStack[1].cathode_channel.channel.state[1].p
subStack[1].cathode_channel.channel.state[1].T
subStack[1].cathode_channel.channel.state[1].X[1]
subStack[1].cathode_channel.channel.state[1].X[2]
subStack[1].cathode_channel.channel.state[1].X[3]
subStack[1].cathode_channel.channel.state[1].X[4]
subStack[1].cathode_channel.channel.state[1].X[5]
subStack[1].cathode_channel.channel.state[2].p
subStack[1].cathode_channel.channel.state[2].T
subStack[1].cathode_channel.channel.state[2].X[1]
subStack[1].cathode_channel.channel.state[2].X[2]
subStack[1].cathode_channel.channel.state[2].X[3]
subStack[1].cathode_channel.channel.state[2].X[4]
subStack[1].cathode_channel.channel.state[2].X[5]
subStack[1].cathode_channel.channel.state[3].p
subStack[1].cathode_channel.channel.state[3].T
subStack[1].cathode_channel.channel.state[3].X[1]
subStack[1].cathode_channel.channel.state[3].X[2]
subStack[1].cathode_channel.channel.state[3].X[3]
subStack[1].cathode_channel.channel.state[3].X[4]
subStack[1].cathode_channel.channel.state[3].X[5]
subStack[1].cathode_channel.channel.Q[1]
subStack[1].cathode_channel.channel.alpha[1]
subStack[1].cathode_channel.channel.rMX[1, 1]
subStack[1].cathode_channel.channel.rMX[1, 2]
subStack[1].cathode_channel.channel.rMX[1, 3]
subStack[1].cathode_channel.channel.rMX[1, 4]
subStack[1].cathode_channel.channel.rMX[1, 5]
subStack[1].cathode_channel.channel.mflow_A_in
subStack[1].cathode_channel.channel.mflow_B_in
subStack[1].cathode_channel.channel.XA[1]
subStack[1].cathode_channel.channel.XA[2]
subStack[1].cathode_channel.channel.XA[3]
subStack[1].cathode_channel.channel.XA[4]
subStack[1].cathode_channel.channel.XA[5]
subStack[1].cathode_channel.channel.XB[1]
subStack[1].cathode_channel.channel.XB[2]
subStack[1].cathode_channel.channel.XB[3]
subStack[1].cathode_channel.channel.XB[4]
subStack[1].cathode_channel.channel.XB[5]
subStack[1].cathode_channel.channel.n_channels_fric[1]
subStack[1].cathode_channel.channel.T_wall[1]
subStack[1].cathode_channel.channel.nS
subStack[1].cathode_channel.channel.mX_flow[1, 1]
subStack[1].cathode_channel.channel.mX_flow[1, 2]
subStack[1].cathode_channel.channel.mX_flow[1, 3]
subStack[1].cathode_channel.channel.mX_flow[1, 4]
subStack[1].cathode_channel.channel.mX_flow[1, 5]
subStack[1].cathode_channel.channel.mX_flow[2, 1]
subStack[1].cathode_channel.channel.mX_flow[2, 2]
subStack[1].cathode_channel.channel.mX_flow[2, 3]
subStack[1].cathode_channel.channel.mX_flow[2, 4]
subStack[1].cathode_channel.channel.mX_flow[2, 5]
subStack[1].cathode_channel.channel.H_flow[1]
subStack[1].cathode_channel.channel.H_flow[2]
subStack[1].cathode_channel.channel.dE[1]
subStack[1].cathode_channel.channel.dMX[1, 1]
subStack[1].cathode_channel.channel.dMX[1, 2]
subStack[1].cathode_channel.channel.dMX[1, 3]
subStack[1].cathode_channel.channel.dMX[1, 4]
subStack[1].cathode_channel.channel.dMX[1, 5]
subStack[1].cathode_channel.channel.dUTZ[1]
subStack[1].cathode_channel.channel.Z[1, 1]
subStack[1].cathode_channel.channel.Z[1, 2]
subStack[1].cathode_channel.channel.Z[1, 3]
subStack[1].cathode_channel.channel.Z[1, 4]
subStack[1].cathode_channel.channel.Z[1, 5]
subStack[1].cathode_channel.channel.der(Z[1, 1])
subStack[1].cathode_channel.channel.der(Z[1, 2])
subStack[1].cathode_channel.channel.der(Z[1, 3])
subStack[1].cathode_channel.channel.der(Z[1, 4])
subStack[1].cathode_channel.channel.der(Z[1, 5])
subStack[1].cathode_channel.port[1].m_flow
subStack[1].cathode_channel.port[1].H_flow
subStack[1].cathode_channel.port[1].mX_flow[1]
subStack[1].cathode_channel.port[1].mX_flow[2]
subStack[1].cathode_channel.port[1].mX_flow[3]
subStack[1].cathode_channel.port[1].mX_flow[4]
subStack[1].cathode_channel.port[1].mX_flow[5]
subStack[1].ref[1]
subStack[1].air[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[5]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[6]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[7]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[1]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[2]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[3]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[4]
_GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].R
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].MM
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].Hf
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].H0
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].Tlimit
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].blow[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].blow[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[3]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[4]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[5]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[6]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[7]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].bhigh[1]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].bhigh[2]
_GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].R
subStack[2].N
subStack[2].nX_an
subStack[2].nX_cath
subStack[2].A_cell
subStack[2].kc
subStack[2].includeCellConduction
subStack[2].lambda_cell
subStack[2].A_crosssection_cell
subStack[2].length_cell
subStack[2].G_cell
subStack[2].n_cell
subStack[2].M_cell
subStack[2].Cp_cell
subStack[2].addProxToAnode
subStack[2].P_stack
subStack[2].anode_stoich
subStack[2].cathode_stoich
subStack[2].cell.N
subStack[2].cell.nX_an
subStack[2].cell.nX_cath
subStack[2].cell.A_cell
subStack[2].cell.n_cell
subStack[2].cell.MCp_cell
subStack[2].cell.kc
subStack[2].cell.pstart
subStack[2].cell.Tstart
subStack[2].cell.T_cell[1]
subStack[2].cell.der(T_cell[1])
subStack[2].cell.P_total
subStack[2].cell.Q_cell[1]
subStack[2].cell.j_External
subStack[2].cell.T_from_h
subStack[2].cell.wall_an[1].Q_flow
subStack[2].cell.wall_cath[1].Q_flow
subStack[2].cell.pin_p.i
subStack[2].cell.pin_n.v
subStack[2].cell.pin_n.i
subStack[2].cell.port_an[1].m_flow
subStack[2].cell.port_an[1].H_flow
subStack[2].cell.port_an[1].X[1]
subStack[2].cell.port_an[1].X[2]
subStack[2].cell.port_an[1].X[3]
subStack[2].cell.port_an[1].X[4]
subStack[2].cell.port_an[1].X[5]
subStack[2].cell.port_an[1].X[6]
subStack[2].cell.port_an[1].X[7]
subStack[2].cell.port_an[1].mX_flow[1]
subStack[2].cell.port_an[1].mX_flow[2]
subStack[2].cell.port_an[1].mX_flow[3]
subStack[2].cell.port_an[1].mX_flow[4]
subStack[2].cell.port_an[1].mX_flow[5]
subStack[2].cell.port_an[1].mX_flow[6]
subStack[2].cell.port_an[1].mX_flow[7]
subStack[2].cell.port_cath[1].m_flow
subStack[2].cell.port_cath[1].H_flow
subStack[2].cell.port_cath[1].mX_flow[1]
subStack[2].cell.port_cath[1].mX_flow[2]
subStack[2].cell.port_cath[1].mX_flow[3]
subStack[2].cell.port_cath[1].mX_flow[4]
subStack[2].cell.port_cath[1].mX_flow[5]
subStack[2].cell.T_an[1]
subStack[2].cell.state_an[1].p
subStack[2].cell.state_an[1].T
subStack[2].cell.state_cath[1].T
subStack[2].cell.anode[1].X[1]
subStack[2].cell.anode[1].X[2]
subStack[2].cell.anode[1].X[3]
subStack[2].cell.anode[1].X[4]
subStack[2].cell.anode[1].X[5]
subStack[2].cell.anode[1].X[6]
subStack[2].cell.anode[1].X[7]
subStack[2].cell.anode[1].Xi[1]
subStack[2].cell.anode[1].Xi[2]
subStack[2].cell.anode[1].Xi[3]
subStack[2].cell.anode[1].Xi[4]
subStack[2].cell.anode[1].Xi[5]
subStack[2].cell.anode[1].Xi[6]
subStack[2].cell.anode[1].Xi[7]
subStack[2].cell.anode[1].d
subStack[2].cell.anode[1].h
subStack[2].cell.anode[1].u
subStack[2].cell.anode[1].Rg
subStack[2].cell.anode[1].MM
subStack[2].cell.anode[1].assertlevel
subStack[2].cell.anode[1].state.p
subStack[2].cell.anode[1].state.T
subStack[2].cell.anode[1].state.X[1]
subStack[2].cell.anode[1].state.X[2]
subStack[2].cell.anode[1].state.X[3]
subStack[2].cell.anode[1].state.X[4]
subStack[2].cell.anode[1].state.X[5]
subStack[2].cell.anode[1].state.X[6]
subStack[2].cell.anode[1].state.X[7]
subStack[2].cell.anode[1].preferredMediumStates
subStack[2].cell.anode[1].T_degC
subStack[2].cell.anode[1].p_bar
subStack[2].cell.anode[1].Z[1]
subStack[2].cell.anode[1].Z[2]
subStack[2].cell.anode[1].Z[3]
subStack[2].cell.anode[1].Z[4]
subStack[2].cell.anode[1].Z[5]
subStack[2].cell.anode[1].Z[6]
subStack[2].cell.anode[1].Z[7]
subStack[2].cell.anode[1].dUZT[1]
subStack[2].cell.anode[1].dUZT[2]
subStack[2].cell.anode[1].dUZT[3]
subStack[2].cell.anode[1].dUZT[4]
subStack[2].cell.anode[1].dUZT[5]
subStack[2].cell.anode[1].dUZT[6]
subStack[2].cell.anode[1].dUZT[7]
subStack[2].cell.anode[1].h_component[1]
subStack[2].cell.anode[1].h_component[2]
subStack[2].cell.anode[1].h_component[3]
subStack[2].cell.anode[1].h_component[4]
subStack[2].cell.anode[1].h_component[5]
subStack[2].cell.anode[1].h_component[6]
subStack[2].cell.anode[1].h_component[7]
subStack[2].cell.anode[1].s_component[1]
subStack[2].cell.anode[1].s_component[2]
subStack[2].cell.anode[1].s_component[3]
subStack[2].cell.anode[1].s_component[4]
subStack[2].cell.anode[1].s_component[5]
subStack[2].cell.anode[1].s_component[6]
subStack[2].cell.anode[1].s_component[7]
subStack[2].cell.anode[1].u_comp[1]
subStack[2].cell.anode[1].u_comp[2]
subStack[2].cell.anode[1].u_comp[3]
subStack[2].cell.anode[1].u_comp[4]
subStack[2].cell.anode[1].u_comp[5]
subStack[2].cell.anode[1].u_comp[6]
subStack[2].cell.anode[1].u_comp[7]
subStack[2].cell.anode[1].cp
subStack[2].cell.anode[1].g_formation[1]
subStack[2].cell.anode[1].g_formation[2]
subStack[2].cell.anode[1].g_formation[3]
subStack[2].cell.anode[1].g_formation[4]
subStack[2].cell.anode[1].g_formation[5]
subStack[2].cell.anode[1].g_formation[6]
subStack[2].cell.anode[1].g_formation[7]
subStack[2].cell.anode[1].ddTp
subStack[2].cell.anode[1].ddpT
subStack[2].cell.anode[1].dupT
subStack[2].cell.anode[1].duTp
subStack[2].cell.anode[1].ddx[1]
subStack[2].cell.anode[1].ddx[2]
subStack[2].cell.anode[1].ddx[3]
subStack[2].cell.anode[1].ddx[4]
subStack[2].cell.anode[1].ddx[5]
subStack[2].cell.anode[1].ddx[6]
subStack[2].cell.anode[1].ddx[7]
subStack[2].cell.cathode[1].X[1]
subStack[2].cell.cathode[1].X[2]
subStack[2].cell.cathode[1].X[3]
subStack[2].cell.cathode[1].X[4]
subStack[2].cell.cathode[1].X[5]
subStack[2].cell.cathode[1].d
subStack[2].cell.cathode[1].h
subStack[2].cell.cathode[1].u
subStack[2].cell.cathode[1].Rg
subStack[2].cell.cathode[1].MM
subStack[2].cell.cathode[1].assertlevel
subStack[2].cell.cathode[1].state.p
subStack[2].cell.cathode[1].state.T
subStack[2].cell.cathode[1].state.X[1]
subStack[2].cell.cathode[1].state.X[2]
subStack[2].cell.cathode[1].state.X[3]
subStack[2].cell.cathode[1].state.X[4]
subStack[2].cell.cathode[1].state.X[5]
subStack[2].cell.cathode[1].preferredMediumStates
subStack[2].cell.cathode[1].T_degC
subStack[2].cell.cathode[1].p_bar
subStack[2].cell.cathode[1].Z[1]
subStack[2].cell.cathode[1].Z[2]
subStack[2].cell.cathode[1].Z[3]
subStack[2].cell.cathode[1].Z[4]
subStack[2].cell.cathode[1].Z[5]
subStack[2].cell.cathode[1].dUZT[1]
subStack[2].cell.cathode[1].dUZT[2]
subStack[2].cell.cathode[1].dUZT[3]
subStack[2].cell.cathode[1].dUZT[4]
subStack[2].cell.cathode[1].dUZT[5]
subStack[2].cell.cathode[1].h_component[1]
subStack[2].cell.cathode[1].h_component[2]
subStack[2].cell.cathode[1].h_component[3]
subStack[2].cell.cathode[1].h_component[4]
subStack[2].cell.cathode[1].h_component[5]
subStack[2].cell.cathode[1].s_component[1]
subStack[2].cell.cathode[1].s_component[2]
subStack[2].cell.cathode[1].s_component[3]
subStack[2].cell.cathode[1].s_component[4]
subStack[2].cell.cathode[1].s_component[5]
subStack[2].cell.cathode[1].u_comp[1]
subStack[2].cell.cathode[1].u_comp[2]
subStack[2].cell.cathode[1].u_comp[3]
subStack[2].cell.cathode[1].u_comp[4]
subStack[2].cell.cathode[1].u_comp[5]
subStack[2].cell.cathode[1].cp
subStack[2].cell.cathode[1].g_formation[1]
subStack[2].cell.cathode[1].g_formation[2]
subStack[2].cell.cathode[1].g_formation[3]
subStack[2].cell.cathode[1].g_formation[4]
subStack[2].cell.cathode[1].g_formation[5]
subStack[2].cell.cathode[1].ddTp
subStack[2].cell.cathode[1].ddpT
subStack[2].cell.cathode[1].dupT
subStack[2].cell.cathode[1].duTp
subStack[2].cell.cathode[1].ddx[1]
subStack[2].cell.cathode[1].ddx[2]
subStack[2].cell.cathode[1].ddx[3]
subStack[2].cell.cathode[1].ddx[4]
subStack[2].cell.cathode[1].ddx[5]
subStack[2].cell.der_T_cell[1]
subStack[2].cell.sum_Q_cell
subStack[2].cell.P_cell[1]
subStack[2].cell.j_Ionic[1]
subStack[2].cell.T_degC
subStack[2].cell.m_flowO2[1]
subStack[2].cell.m_flowH2[1]
subStack[2].cell.m_flowH2O[1]
subStack[2].cell.mXi_flow_an[1, 1]
subStack[2].cell.mXi_flow_an[1, 2]
subStack[2].cell.mXi_flow_an[1, 3]
subStack[2].cell.mXi_flow_an[1, 4]
subStack[2].cell.mXi_flow_an[1, 5]
subStack[2].cell.mXi_flow_an[1, 6]
subStack[2].cell.mXi_flow_an[1, 7]
subStack[2].cell.S_ionic[1]
subStack[2].cell.S_ionic[2]
subStack[2].cell.S_ionic[3]
subStack[2].cell.S_ionic[4]
subStack[2].cell.S_ionic[5]
subStack[2].cell.S_ionic[6]
subStack[2].cell.S_ionic[7]
subStack[2].cell.ASR0
subStack[2].cell.Ea
subStack[2].cell.T0
subStack[2].cell.r_Int[1]
subStack[2].cell.ASR[1]
subStack[2].cell.g_reaction[1]
subStack[2].cell.pH2[1]
subStack[2].cell.pH2O[1]
subStack[2].cell.pO2[1]
subStack[2].cell.internalRes[1].T_ref
subStack[2].cell.internalRes[1].alpha
subStack[2].cell.internalRes[1].v
subStack[2].cell.internalRes[1].i
subStack[2].cell.internalRes[1].p.i
subStack[2].cell.internalRes[1].n.i
subStack[2].cell.internalRes[1].useHeatPort
subStack[2].cell.internalRes[1].T
subStack[2].cell.internalRes[1].LossPower
subStack[2].cell.internalRes[1].R_actual
subStack[2].cell.sourceV[1].p.i
subStack[2].cell.sourceV[1].n.v
subStack[2].cell.sourceV[1].n.i
subStack[2].cell.sourceV[1].i
subStack[2].cell.ref[1]
subStack[2].cell.ref[2]
subStack[2].cell.air[1]
subStack[2].pin_p.i
subStack[2].pin_n.v
subStack[2].pin_n.i
subStack[2].feed_anode.h_outflow
subStack[2].feed_cathode.h_outflow
subStack[2].wall[1].Q_flow
subStack[2].pi
subStack[2].n_channels_anode
subStack[2].L_anode
subStack[2].D_anode
subStack[2].Dhyd_anode
subStack[2].C_anode
subStack[2].A_anode
subStack[2].V_anode
subStack[2].A_heat_anode
subStack[2].n_channels_cathode
subStack[2].L_cathode
subStack[2].D_cathode
subStack[2].Dhyd_cathode
subStack[2].C_cathode
subStack[2].A_cathode
subStack[2].V_cathode
subStack[2].A_heat_cathode
subStack[2].n
subStack[2].initOpt_anode
subStack[2].p_start_in_anode
subStack[2].p_start_out_anode
subStack[2].p_start_anode[1]
subStack[2].p_start_anode[2]
subStack[2].initFromEnthalpy_anode
subStack[2].h_start_in_anode
subStack[2].h_start_out_anode
subStack[2].h_start_anode[1]
subStack[2].h_start_anode[2]
subStack[2].T_start_in_anode
subStack[2].T_start_out_anode
subStack[2].T_start_anode[1]
subStack[2].T_start_anode[2]
subStack[2].X_start_anode[1]
subStack[2].X_start_anode[2]
subStack[2].X_start_anode[3]
subStack[2].X_start_anode[4]
subStack[2].X_start_anode[5]
subStack[2].X_start_anode[6]
subStack[2].X_start_anode[7]
subStack[2].m_flow_start_anode
subStack[2].initOpt_cathode
subStack[2].p_start_in_cathode
subStack[2].p_start_out_cathode
subStack[2].p_start_cathode[1]
subStack[2].p_start_cathode[2]
subStack[2].initFromEnthalpy_cathode
subStack[2].h_start_in_cathode
subStack[2].h_start_out_cathode
subStack[2].h_start_cathode[1]
subStack[2].h_start_cathode[2]
subStack[2].T_start_in_cathode
subStack[2].T_start_out_cathode
subStack[2].T_start_cathode[1]
subStack[2].T_start_cathode[2]
subStack[2].X_start_cathode[1]
subStack[2].X_start_cathode[2]
subStack[2].X_start_cathode[3]
subStack[2].X_start_cathode[4]
subStack[2].X_start_cathode[5]
subStack[2].m_flow_start_cathode
subStack[2].dp_smooth
subStack[2].mflow_smooth
subStack[2].from_dp_anode
subStack[2].positiveFlow_anode
subStack[2].generateEventForReversal_anode
subStack[2].from_dp_cathode
subStack[2].positiveFlow_cathode
subStack[2].generateEventForReversal_cathode
subStack[2].useHeatTransfer_anode
subStack[2].useHeatTransfer_cathode
subStack[2].CF_AnodeSidePressureLoss
subStack[2].CF_AnodeSideHeatTransfer
subStack[2].CF_CathodePressureLoss
subStack[2].CF_CathodeSideHeatTransfer
subStack[2].d0_prox
subStack[2].dp0_prox
subStack[2].m_flow_nom_prox
subStack[2].anode_stoich_num
subStack[2].anode_stoich_den
subStack[2].cathode_stoich_num
subStack[2].cathode_stoich_den
subStack[2].summary.N
subStack[2].summary.n_cell
subStack[2].summary.P_stack
subStack[2].summary.j_external
subStack[2].summary.V_cell
subStack[2].summary.Q_stack
subStack[2].summary.dp_anode
subStack[2].summary.dp_cathode
subStack[2].anode_channel.summary.dp
subStack[2].anode_channel.summary.m_flow
subStack[2].anode_channel.summary.M
subStack[2].anode_channel.summary.der(M)
subStack[2].anode_channel.summary.T_in
subStack[2].anode_channel.summary.d_in
subStack[2].anode_channel.n
subStack[2].anode_channel.pi
subStack[2].anode_channel.n_channels
subStack[2].anode_channel.L
subStack[2].anode_channel.D
subStack[2].anode_channel.Dhyd
subStack[2].anode_channel.A
subStack[2].anode_channel.C
subStack[2].anode_channel.V
subStack[2].anode_channel.A_heat
subStack[2].anode_channel.useHeatTransfer
subStack[2].anode_channel.ni
subStack[2].anode_channel.initOpt
subStack[2].anode_channel.p_start_in
subStack[2].anode_channel.p_start_out
subStack[2].anode_channel.p_start[1]
subStack[2].anode_channel.p_start[2]
subStack[2].anode_channel.initFromEnthalpy
subStack[2].anode_channel.h_start_in
subStack[2].anode_channel.h_start_out
subStack[2].anode_channel.h_start[1]
subStack[2].anode_channel.h_start[2]
subStack[2].anode_channel.T_start_in
subStack[2].anode_channel.T_start_out
subStack[2].anode_channel.T_start[1]
subStack[2].anode_channel.T_start[2]
subStack[2].anode_channel.X_start[1]
subStack[2].anode_channel.X_start[2]
subStack[2].anode_channel.X_start[3]
subStack[2].anode_channel.X_start[4]
subStack[2].anode_channel.X_start[5]
subStack[2].anode_channel.X_start[6]
subStack[2].anode_channel.X_start[7]
subStack[2].anode_channel.m_flow_start
subStack[2].anode_channel.positiveFlow
subStack[2].anode_channel.from_dp
subStack[2].anode_channel.dp_smooth
subStack[2].anode_channel.mflow_smooth
subStack[2].anode_channel.generateEventForReversal
subStack[2].anode_channel.CF_PressureLoss
subStack[2].anode_channel.CF_HeatTransfer
subStack[2].anode_channel.X_weight
subStack[2].anode_channel.y_sat
subStack[2].anode_channel.includeStaticHead
subStack[2].anode_channel.height
subStack[2].anode_channel.g
subStack[2].anode_channel.channel.n
subStack[2].anode_channel.channel.n_channels[1]
subStack[2].anode_channel.channel.L[1]
subStack[2].anode_channel.channel.Dhyd[1]
subStack[2].anode_channel.channel.A[1]
subStack[2].anode_channel.channel.L_total
subStack[2].anode_channel.channel.V[1]
subStack[2].anode_channel.channel.V_tot
subStack[2].anode_channel.channel.A_mean
subStack[2].anode_channel.channel.A_heat[1]
subStack[2].anode_channel.channel.ni
subStack[2].anode_channel.channel.initOpt
subStack[2].anode_channel.channel.p_start_in
subStack[2].anode_channel.channel.p_start_out
subStack[2].anode_channel.channel.p_start[1]
subStack[2].anode_channel.channel.p_start[2]
subStack[2].anode_channel.channel.initFromEnthalpy
subStack[2].anode_channel.channel.h_start_in
subStack[2].anode_channel.channel.h_start_out
subStack[2].anode_channel.channel.h_start[1]
subStack[2].anode_channel.channel.h_start[2]
subStack[2].anode_channel.channel.T_start_in
subStack[2].anode_channel.channel.T_start_out
subStack[2].anode_channel.channel.T_start[1]
subStack[2].anode_channel.channel.T_start[2]
subStack[2].anode_channel.channel.X_start[1]
subStack[2].anode_channel.channel.X_start[2]
subStack[2].anode_channel.channel.X_start[3]
subStack[2].anode_channel.channel.X_start[4]
subStack[2].anode_channel.channel.X_start[5]
subStack[2].anode_channel.channel.X_start[6]
subStack[2].anode_channel.channel.X_start[7]
subStack[2].anode_channel.channel.m_flow_start
subStack[2].anode_channel.channel.positiveFlow
subStack[2].anode_channel.channel.from_dp
subStack[2].anode_channel.channel.dp_smooth
subStack[2].anode_channel.channel.mflow_smooth
subStack[2].anode_channel.channel.generateEventForReversal
subStack[2].anode_channel.channel.NA
subStack[2].anode_channel.channel.NB
subStack[2].anode_channel.channel.T[1]
subStack[2].anode_channel.channel.der(T[1])
subStack[2].anode_channel.channel.dp_asState
subStack[2].anode_channel.channel.frictionDistribution
subStack[2].anode_channel.channel.n_fric
subStack[2].anode_channel.channel.CF_PressureLoss
subStack[2].anode_channel.channel.CF_HeatTransfer
subStack[2].anode_channel.channel.includeStaticHead
subStack[2].anode_channel.channel.levels[1]
subStack[2].anode_channel.channel.g
subStack[2].anode_channel.channel.friction[1].A
subStack[2].anode_channel.channel.friction[1].Dhyd
subStack[2].anode_channel.channel.friction[1].n_channels
subStack[2].anode_channel.channel.friction[1].lengthFraction
subStack[2].anode_channel.channel.friction[1].flowFraction0
subStack[2].anode_channel.channel.friction[1].dpFraction0
subStack[2].anode_channel.channel.friction[1].from_dp
subStack[2].anode_channel.channel.friction[1].positiveFlow
subStack[2].anode_channel.channel.friction[1].dp_smooth
subStack[2].anode_channel.channel.friction[1].mflow_smooth
subStack[2].anode_channel.channel.friction[1].useFixedDensity
subStack[2].anode_channel.channel.friction[1].reference_d
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[1]
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[2]
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[3]
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[4]
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[5]
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[6]
subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[7]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[1]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[2]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[3]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[4]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[5]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[6]
subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[7]
subStack[2].anode_channel.channel.friction[1].dp_from_isothermal
subStack[2].anode_channel.channel.friction[1].m_flow
subStack[2].anode_channel.channel.friction[1].dA
subStack[2].anode_channel.channel.friction[1].dB
subStack[2].anode_channel.channel.friction[1].d0
subStack[2].anode_channel.channel.friction[1].dp0
subStack[2].anode_channel.channel.friction[1].m_flow0
subStack[2].anode_channel.channel.htcoeff[1].A
subStack[2].anode_channel.channel.htcoeff[1].L
subStack[2].anode_channel.channel.htcoeff[1].Dhyd
subStack[2].anode_channel.channel.htcoeff[1].m_flow
subStack[2].anode_channel.channel.htcoeff[1].ht_from_isothermal
subStack[2].anode_channel.channel.htcoeff[1].CF_length
subStack[2].anode_channel.channel.htcoeff[1].alpha
subStack[2].anode_channel.channel.reaction.N
subStack[2].anode_channel.channel.reaction.Cp_reac[1]
subStack[2].anode_channel.channel.reaction.Q[1]
subStack[2].anode_channel.channel.reaction.S_reac[1, 1]
subStack[2].anode_channel.channel.reaction.S_reac[1, 2]
subStack[2].anode_channel.channel.reaction.S_reac[1, 3]
subStack[2].anode_channel.channel.reaction.S_reac[1, 4]
subStack[2].anode_channel.channel.reaction.S_reac[1, 5]
subStack[2].anode_channel.channel.reaction.S_reac[1, 6]
subStack[2].anode_channel.channel.reaction.S_reac[1, 7]
subStack[2].anode_channel.channel.reaction.S_reac[2, 1]
subStack[2].anode_channel.channel.reaction.S_reac[2, 2]
subStack[2].anode_channel.channel.reaction.S_reac[2, 3]
subStack[2].anode_channel.channel.reaction.S_reac[2, 4]
subStack[2].anode_channel.channel.reaction.S_reac[2, 5]
subStack[2].anode_channel.channel.reaction.S_reac[2, 6]
subStack[2].anode_channel.channel.reaction.S_reac[2, 7]
subStack[2].anode_channel.channel.reaction.n_reac
subStack[2].anode_channel.channel.reaction.comp[1]
subStack[2].anode_channel.channel.reaction.comp[2]
subStack[2].anode_channel.channel.reaction.pstart
subStack[2].anode_channel.channel.reaction.Tstart
subStack[2].anode_channel.channel.reaction.Xstart[1]
subStack[2].anode_channel.channel.reaction.Xstart[2]
subStack[2].anode_channel.channel.reaction.Xstart[3]
subStack[2].anode_channel.channel.reaction.Xstart[4]
subStack[2].anode_channel.channel.reaction.Xstart[5]
subStack[2].anode_channel.channel.reaction.Xstart[6]
subStack[2].anode_channel.channel.reaction.Xstart[7]
subStack[2].anode_channel.channel.reaction.V
subStack[2].anode_channel.channel.reaction.scale
subStack[2].anode_channel.channel.reaction.MMX[1]
subStack[2].anode_channel.channel.reaction.MMX[2]
subStack[2].anode_channel.channel.reaction.MMX[3]
subStack[2].anode_channel.channel.reaction.MMX[4]
subStack[2].anode_channel.channel.reaction.MMX[5]
subStack[2].anode_channel.channel.reaction.MMX[6]
subStack[2].anode_channel.channel.reaction.MMX[7]
subStack[2].anode_channel.channel.reaction.MM[1]
subStack[2].anode_channel.channel.reaction.der(MM[1])
subStack[2].anode_channel.channel.reaction.y_start[1]
subStack[2].anode_channel.channel.reaction.y_start[2]
subStack[2].anode_channel.channel.reaction.y_start[3]
subStack[2].anode_channel.channel.reaction.y_start[4]
subStack[2].anode_channel.channel.reaction.y_start[5]
subStack[2].anode_channel.channel.reaction.y_start[6]
subStack[2].anode_channel.channel.reaction.y_start[7]
subStack[2].anode_channel.channel.reaction.log10_y_start[1]
subStack[2].anode_channel.channel.reaction.log10_y_start[2]
subStack[2].anode_channel.channel.reaction.log10_y_start[3]
subStack[2].anode_channel.channel.reaction.log10_y_start[4]
subStack[2].anode_channel.channel.reaction.log10_y_start[5]
subStack[2].anode_channel.channel.reaction.log10_y_start[6]
subStack[2].anode_channel.channel.reaction.log10_y_start[7]
subStack[2].anode_channel.channel.reaction.pref
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 1]
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 2]
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 3]
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 4]
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 5]
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 6]
subStack[2].anode_channel.channel.reaction.log10_y_out[1, 7]
subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 1]
subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 2]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 1]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 2]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 3]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 4]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 5]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 6]
subStack[2].anode_channel.channel.reaction.Sx_reac[1, 7]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 1]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 2]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 3]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 4]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 5]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 6]
subStack[2].anode_channel.channel.reaction.Sx_reac[2, 7]
subStack[2].anode_channel.channel.reaction.Ztot_start
subStack[2].anode_channel.channel.reaction.Zx_start[1]
subStack[2].anode_channel.channel.reaction.Zx_start[2]
subStack[2].anode_channel.channel.reaction.Zx_start[3]
subStack[2].anode_channel.channel.reaction.Zx_start[4]
subStack[2].anode_channel.channel.reaction.Zx_start[5]
subStack[2].anode_channel.channel.reaction.Zx_start[6]
subStack[2].anode_channel.channel.reaction.Zx_start[7]
subStack[2].anode_channel.channel.reaction.CF_conversion
subStack[2].anode_channel.channel.reaction.Tscale
subStack[2].anode_channel.channel.reaction.kEq_reac[1, 1]
subStack[2].anode_channel.channel.reaction.kEq_reac[1, 2]
subStack[2].anode_channel.channel.reaction.Zx[1, 1]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 1])
subStack[2].anode_channel.channel.reaction.Zx[1, 2]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 2])
subStack[2].anode_channel.channel.reaction.Zx[1, 3]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 3])
subStack[2].anode_channel.channel.reaction.Zx[1, 4]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 4])
subStack[2].anode_channel.channel.reaction.Zx[1, 5]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 5])
subStack[2].anode_channel.channel.reaction.Zx[1, 6]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 6])
subStack[2].anode_channel.channel.reaction.Zx[1, 7]
subStack[2].anode_channel.channel.reaction.der(Zx[1, 7])
subStack[2].anode_channel.channel.reaction.Ztot[1]
subStack[2].anode_channel.channel.reaction.der(Ztot[1])
subStack[2].anode_channel.channel.reaction.Zx_flow[1, 1]
subStack[2].anode_channel.channel.reaction.Zx_flow[1, 2]
subStack[2].anode_channel.channel.reaction.Zx_flow[1, 3]
subStack[2].anode_channel.channel.reaction.Zx_flow[1, 4]
subStack[2].anode_channel.channel.reaction.Zx_flow[1, 5]
subStack[2].anode_channel.channel.reaction.krate[1, 1]
subStack[2].anode_channel.channel.reaction.der(krate[1, 1])
subStack[2].anode_channel.channel.reaction.krate[1, 2]
subStack[2].anode_channel.channel.reaction.der(krate[1, 2])
subStack[2].anode_channel.channel.reaction.rZ[1, 1]
subStack[2].anode_channel.channel.reaction.rZ[1, 2]
subStack[2].anode_channel.channel.reaction.rZ[1, 3]
subStack[2].anode_channel.channel.reaction.rZ[1, 4]
subStack[2].anode_channel.channel.reaction.rZ[1, 5]
subStack[2].anode_channel.channel.reaction.rZ[1, 6]
subStack[2].anode_channel.channel.reaction.rZ[1, 7]
subStack[2].anode_channel.channel.reaction.g_formation[1, 1]
subStack[2].anode_channel.channel.reaction.g_formation[1, 2]
subStack[2].anode_channel.channel.reaction.g_formation[1, 3]
subStack[2].anode_channel.channel.reaction.g_formation[1, 4]
subStack[2].anode_channel.channel.reaction.g_formation[1, 5]
subStack[2].anode_channel.channel.reaction.g_formation[1, 6]
subStack[2].anode_channel.channel.reaction.g_formation[1, 7]
subStack[2].anode_channel.channel.reaction.Zx_nominal
subStack[2].anode_channel.channel.reaction.epsZ
subStack[2].anode_channel.channel.reaction.e[1, 1]
subStack[2].anode_channel.channel.reaction.e[1, 2]
subStack[2].anode_channel.channel.reaction.state[1].p
subStack[2].anode_channel.channel.reaction.state[1].T
subStack[2].anode_channel.channel.reaction.state[1].X[1]
subStack[2].anode_channel.channel.reaction.state[1].X[2]
subStack[2].anode_channel.channel.reaction.state[1].X[3]
subStack[2].anode_channel.channel.reaction.state[1].X[4]
subStack[2].anode_channel.channel.reaction.state[1].X[5]
subStack[2].anode_channel.channel.reaction.state[1].X[6]
subStack[2].anode_channel.channel.reaction.state[1].X[7]
subStack[2].anode_channel.channel.reaction.deplZ[1, 1]
subStack[2].anode_channel.channel.reaction.deplZ[1, 2]
subStack[2].anode_channel.channel.reaction.deplZ[1, 3]
subStack[2].anode_channel.channel.reaction.deplZ[1, 4]
subStack[2].anode_channel.channel.reaction.deplZ[1, 5]
subStack[2].anode_channel.channel.reaction.deplZ[1, 6]
subStack[2].anode_channel.channel.reaction.deplZ[1, 7]
subStack[2].anode_channel.channel.reaction.reactant[1, 1]
subStack[2].anode_channel.channel.reaction.reactant[1, 2]
subStack[2].anode_channel.channel.reaction.reactant[1, 3]
subStack[2].anode_channel.channel.reaction.reactant[1, 4]
subStack[2].anode_channel.channel.reaction.reactant[1, 5]
subStack[2].anode_channel.channel.reaction.reactant[1, 6]
subStack[2].anode_channel.channel.reaction.reactant[1, 7]
subStack[2].anode_channel.channel.reaction.reactant[2, 1]
subStack[2].anode_channel.channel.reaction.reactant[2, 2]
subStack[2].anode_channel.channel.reaction.reactant[2, 3]
subStack[2].anode_channel.channel.reaction.reactant[2, 4]
subStack[2].anode_channel.channel.reaction.reactant[2, 5]
subStack[2].anode_channel.channel.reaction.reactant[2, 6]
subStack[2].anode_channel.channel.reaction.reactant[2, 7]
subStack[2].anode_channel.channel.reaction.rate[1, 1]
subStack[2].anode_channel.channel.reaction.rate[1, 2]
subStack[2].anode_channel.channel.reaction.S_ref[1]
subStack[2].anode_channel.channel.reaction.S_ref[2]
subStack[2].anode_channel.channel.reaction.S_ref[3]
subStack[2].anode_channel.channel.reaction.S_ref[4]
subStack[2].anode_channel.channel.reaction.S_ref[5]
subStack[2].anode_channel.channel.reaction.S_ref[6]
subStack[2].anode_channel.channel.reaction.S_ref[7]
subStack[2].anode_channel.channel.reaction.S_wgs[1]
subStack[2].anode_channel.channel.reaction.S_wgs[2]
subStack[2].anode_channel.channel.reaction.S_wgs[3]
subStack[2].anode_channel.channel.reaction.S_wgs[4]
subStack[2].anode_channel.channel.reaction.S_wgs[5]
subStack[2].anode_channel.channel.reaction.S_wgs[6]
subStack[2].anode_channel.channel.reaction.S_wgs[7]
subStack[2].anode_channel.channel.reaction.index[1]
subStack[2].anode_channel.channel.reaction.index[2]
subStack[2].anode_channel.channel.reaction.T_sat_for_WGS
subStack[2].anode_channel.channel.reaction.g_rere[1]
subStack[2].anode_channel.channel.reaction.g_wgs[1]
subStack[2].anode_channel.channel.gas[1].X[1]
subStack[2].anode_channel.channel.gas[1].X[2]
subStack[2].anode_channel.channel.gas[1].X[3]
subStack[2].anode_channel.channel.gas[1].X[4]
subStack[2].anode_channel.channel.gas[1].X[5]
subStack[2].anode_channel.channel.gas[1].X[6]
subStack[2].anode_channel.channel.gas[1].X[7]
subStack[2].anode_channel.channel.gas[1].der(X[1])
subStack[2].anode_channel.channel.gas[1].der(X[2])
subStack[2].anode_channel.channel.gas[1].der(X[3])
subStack[2].anode_channel.channel.gas[1].der(X[4])
subStack[2].anode_channel.channel.gas[1].der(X[5])
subStack[2].anode_channel.channel.gas[1].der(X[6])
subStack[2].anode_channel.channel.gas[1].der(X[7])
subStack[2].anode_channel.channel.gas[1].Xi[1]
subStack[2].anode_channel.channel.gas[1].Xi[2]
subStack[2].anode_channel.channel.gas[1].Xi[3]
subStack[2].anode_channel.channel.gas[1].Xi[4]
subStack[2].anode_channel.channel.gas[1].Xi[5]
subStack[2].anode_channel.channel.gas[1].Xi[6]
subStack[2].anode_channel.channel.gas[1].Xi[7]
subStack[2].anode_channel.channel.gas[1].d
subStack[2].anode_channel.channel.gas[1].der(d)
subStack[2].anode_channel.channel.gas[1].u
subStack[2].anode_channel.channel.gas[1].Rg
subStack[2].anode_channel.channel.gas[1].der(Rg)
subStack[2].anode_channel.channel.gas[1].MM
subStack[2].anode_channel.channel.gas[1].assertlevel
subStack[2].anode_channel.channel.gas[1].state.p
subStack[2].anode_channel.channel.gas[1].state.T
subStack[2].anode_channel.channel.gas[1].state.X[1]
subStack[2].anode_channel.channel.gas[1].state.X[2]
subStack[2].anode_channel.channel.gas[1].state.X[3]
subStack[2].anode_channel.channel.gas[1].state.X[4]
subStack[2].anode_channel.channel.gas[1].state.X[5]
subStack[2].anode_channel.channel.gas[1].state.X[6]
subStack[2].anode_channel.channel.gas[1].state.X[7]
subStack[2].anode_channel.channel.gas[1].preferredMediumStates
subStack[2].anode_channel.channel.gas[1].p_bar
subStack[2].anode_channel.channel.gas[1].Z[1]
subStack[2].anode_channel.channel.gas[1].Z[2]
subStack[2].anode_channel.channel.gas[1].Z[3]
subStack[2].anode_channel.channel.gas[1].Z[4]
subStack[2].anode_channel.channel.gas[1].Z[5]
subStack[2].anode_channel.channel.gas[1].Z[6]
subStack[2].anode_channel.channel.gas[1].Z[7]
subStack[2].anode_channel.channel.gas[1].dUZT[1]
subStack[2].anode_channel.channel.gas[1].dUZT[2]
subStack[2].anode_channel.channel.gas[1].dUZT[3]
subStack[2].anode_channel.channel.gas[1].dUZT[4]
subStack[2].anode_channel.channel.gas[1].dUZT[5]
subStack[2].anode_channel.channel.gas[1].dUZT[6]
subStack[2].anode_channel.channel.gas[1].dUZT[7]
subStack[2].anode_channel.channel.gas[1].h_component[1]
subStack[2].anode_channel.channel.gas[1].h_component[2]
subStack[2].anode_channel.channel.gas[1].h_component[3]
subStack[2].anode_channel.channel.gas[1].h_component[4]
subStack[2].anode_channel.channel.gas[1].h_component[5]
subStack[2].anode_channel.channel.gas[1].h_component[6]
subStack[2].anode_channel.channel.gas[1].h_component[7]
subStack[2].anode_channel.channel.gas[1].s_component[1]
subStack[2].anode_channel.channel.gas[1].s_component[2]
subStack[2].anode_channel.channel.gas[1].s_component[3]
subStack[2].anode_channel.channel.gas[1].s_component[4]
subStack[2].anode_channel.channel.gas[1].s_component[5]
subStack[2].anode_channel.channel.gas[1].s_component[6]
subStack[2].anode_channel.channel.gas[1].s_component[7]
subStack[2].anode_channel.channel.gas[1].u_comp[1]
subStack[2].anode_channel.channel.gas[1].u_comp[2]
subStack[2].anode_channel.channel.gas[1].u_comp[3]
subStack[2].anode_channel.channel.gas[1].u_comp[4]
subStack[2].anode_channel.channel.gas[1].u_comp[5]
subStack[2].anode_channel.channel.gas[1].u_comp[6]
subStack[2].anode_channel.channel.gas[1].u_comp[7]
subStack[2].anode_channel.channel.gas[1].cp
subStack[2].anode_channel.channel.gas[1].g_formation[1]
subStack[2].anode_channel.channel.gas[1].g_formation[2]
subStack[2].anode_channel.channel.gas[1].g_formation[3]
subStack[2].anode_channel.channel.gas[1].g_formation[4]
subStack[2].anode_channel.channel.gas[1].g_formation[5]
subStack[2].anode_channel.channel.gas[1].g_formation[6]
subStack[2].anode_channel.channel.gas[1].g_formation[7]
subStack[2].anode_channel.channel.gas[1].ddTp
subStack[2].anode_channel.channel.gas[1].ddpT
subStack[2].anode_channel.channel.gas[1].dupT
subStack[2].anode_channel.channel.gas[1].duTp
subStack[2].anode_channel.channel.gas[1].ddx[1]
subStack[2].anode_channel.channel.gas[1].ddx[2]
subStack[2].anode_channel.channel.gas[1].ddx[3]
subStack[2].anode_channel.channel.gas[1].ddx[4]
subStack[2].anode_channel.channel.gas[1].ddx[5]
subStack[2].anode_channel.channel.gas[1].ddx[6]
subStack[2].anode_channel.channel.gas[1].ddx[7]
subStack[2].anode_channel.channel.p[1]
subStack[2].anode_channel.channel.der(p[1])
subStack[2].anode_channel.channel.E_seg[1]
subStack[2].anode_channel.channel.MXi[1, 1]
subStack[2].anode_channel.channel.MXi[1, 2]
subStack[2].anode_channel.channel.MXi[1, 3]
subStack[2].anode_channel.channel.MXi[1, 4]
subStack[2].anode_channel.channel.MXi[1, 5]
subStack[2].anode_channel.channel.MXi[1, 6]
subStack[2].anode_channel.channel.MXi[1, 7]
subStack[2].anode_channel.channel.dp[1]
subStack[2].anode_channel.channel.dp[2]
subStack[2].anode_channel.channel.sh[1]
subStack[2].anode_channel.channel.state[1].p
subStack[2].anode_channel.channel.state[1].T
subStack[2].anode_channel.channel.state[1].X[1]
subStack[2].anode_channel.channel.state[1].X[2]
subStack[2].anode_channel.channel.state[1].X[3]
subStack[2].anode_channel.channel.state[1].X[4]
subStack[2].anode_channel.channel.state[1].X[5]
subStack[2].anode_channel.channel.state[1].X[6]
subStack[2].anode_channel.channel.state[1].X[7]
subStack[2].anode_channel.channel.state[2].p
subStack[2].anode_channel.channel.state[2].T
subStack[2].anode_channel.channel.state[2].X[1]
subStack[2].anode_channel.channel.state[2].X[2]
subStack[2].anode_channel.channel.state[2].X[3]
subStack[2].anode_channel.channel.state[2].X[4]
subStack[2].anode_channel.channel.state[2].X[5]
subStack[2].anode_channel.channel.state[2].X[6]
subStack[2].anode_channel.channel.state[2].X[7]
subStack[2].anode_channel.channel.state[3].p
subStack[2].anode_channel.channel.state[3].T
subStack[2].anode_channel.channel.state[3].X[1]
subStack[2].anode_channel.channel.state[3].X[2]
subStack[2].anode_channel.channel.state[3].X[3]
subStack[2].anode_channel.channel.state[3].X[4]
subStack[2].anode_channel.channel.state[3].X[5]
subStack[2].anode_channel.channel.state[3].X[6]
subStack[2].anode_channel.channel.state[3].X[7]
subStack[2].anode_channel.channel.TB
subStack[2].anode_channel.channel.Q[1]
subStack[2].anode_channel.channel.alpha[1]
subStack[2].anode_channel.channel.rMX[1, 1]
subStack[2].anode_channel.channel.rMX[1, 2]
subStack[2].anode_channel.channel.rMX[1, 3]
subStack[2].anode_channel.channel.rMX[1, 4]
subStack[2].anode_channel.channel.rMX[1, 5]
subStack[2].anode_channel.channel.rMX[1, 6]
subStack[2].anode_channel.channel.rMX[1, 7]
subStack[2].anode_channel.channel.mflow_A_in
subStack[2].anode_channel.channel.mflow_B_in
subStack[2].anode_channel.channel.XA[1]
subStack[2].anode_channel.channel.XA[2]
subStack[2].anode_channel.channel.XA[3]
subStack[2].anode_channel.channel.XA[4]
subStack[2].anode_channel.channel.XA[5]
subStack[2].anode_channel.channel.XA[6]
subStack[2].anode_channel.channel.XA[7]
subStack[2].anode_channel.channel.XB[1]
subStack[2].anode_channel.channel.XB[2]
subStack[2].anode_channel.channel.XB[3]
subStack[2].anode_channel.channel.XB[4]
subStack[2].anode_channel.channel.XB[5]
subStack[2].anode_channel.channel.XB[6]
subStack[2].anode_channel.channel.XB[7]
subStack[2].anode_channel.channel.n_channels_fric[1]
subStack[2].anode_channel.channel.T_wall[1]
subStack[2].anode_channel.channel.nS
subStack[2].anode_channel.channel.mX_flow[1, 1]
subStack[2].anode_channel.channel.mX_flow[1, 2]
subStack[2].anode_channel.channel.mX_flow[1, 3]
subStack[2].anode_channel.channel.mX_flow[1, 4]
subStack[2].anode_channel.channel.mX_flow[1, 5]
subStack[2].anode_channel.channel.mX_flow[1, 6]
subStack[2].anode_channel.channel.mX_flow[1, 7]
subStack[2].anode_channel.channel.mX_flow[2, 1]
subStack[2].anode_channel.channel.mX_flow[2, 2]
subStack[2].anode_channel.channel.mX_flow[2, 3]
subStack[2].anode_channel.channel.mX_flow[2, 4]
subStack[2].anode_channel.channel.mX_flow[2, 5]
subStack[2].anode_channel.channel.mX_flow[2, 6]
subStack[2].anode_channel.channel.mX_flow[2, 7]
subStack[2].anode_channel.channel.H_flow[1]
subStack[2].anode_channel.channel.H_flow[2]
subStack[2].anode_channel.channel.dE[1]
subStack[2].anode_channel.channel.dMX[1, 1]
subStack[2].anode_channel.channel.dMX[1, 2]
subStack[2].anode_channel.channel.dMX[1, 3]
subStack[2].anode_channel.channel.dMX[1, 4]
subStack[2].anode_channel.channel.dMX[1, 5]
subStack[2].anode_channel.channel.dMX[1, 6]
subStack[2].anode_channel.channel.dMX[1, 7]
subStack[2].anode_channel.channel.dZ[1, 1]
subStack[2].anode_channel.channel.dZ[1, 2]
subStack[2].anode_channel.channel.dZ[1, 3]
subStack[2].anode_channel.channel.dZ[1, 4]
subStack[2].anode_channel.channel.dZ[1, 5]
subStack[2].anode_channel.channel.dUTZ[1]
subStack[2].anode_channel.channel.Z[1, 1]
subStack[2].anode_channel.channel.Z[1, 2]
subStack[2].anode_channel.channel.Z[1, 3]
subStack[2].anode_channel.channel.Z[1, 4]
subStack[2].anode_channel.channel.Z[1, 5]
subStack[2].anode_channel.channel.Z[1, 6]
subStack[2].anode_channel.channel.Z[1, 7]
subStack[2].anode_channel.channel.der(Z[1, 1])
subStack[2].anode_channel.channel.der(Z[1, 2])
subStack[2].anode_channel.channel.der(Z[1, 3])
subStack[2].anode_channel.channel.der(Z[1, 4])
subStack[2].anode_channel.channel.der(Z[1, 5])
subStack[2].anode_channel.channel.der(Z[1, 6])
subStack[2].anode_channel.channel.der(Z[1, 7])
subStack[2].anode_channel.port[1].m_flow
subStack[2].anode_channel.port[1].H_flow
subStack[2].anode_channel.port[1].mX_flow[1]
subStack[2].anode_channel.port[1].mX_flow[2]
subStack[2].anode_channel.port[1].mX_flow[3]
subStack[2].anode_channel.port[1].mX_flow[4]
subStack[2].anode_channel.port[1].mX_flow[5]
subStack[2].anode_channel.port[1].mX_flow[6]
subStack[2].anode_channel.port[1].mX_flow[7]
subStack[2].cathode_channel.summary.dp
subStack[2].cathode_channel.summary.m_flow
subStack[2].cathode_channel.summary.M
subStack[2].cathode_channel.summary.der(M)
subStack[2].cathode_channel.summary.d_in
subStack[2].cathode_channel.n
subStack[2].cathode_channel.pi
subStack[2].cathode_channel.n_channels
subStack[2].cathode_channel.L
subStack[2].cathode_channel.D
subStack[2].cathode_channel.Dhyd
subStack[2].cathode_channel.A
subStack[2].cathode_channel.C
subStack[2].cathode_channel.V
subStack[2].cathode_channel.A_heat
subStack[2].cathode_channel.useHeatTransfer
subStack[2].cathode_channel.ni
subStack[2].cathode_channel.initOpt
subStack[2].cathode_channel.p_start_in
subStack[2].cathode_channel.p_start_out
subStack[2].cathode_channel.p_start[1]
subStack[2].cathode_channel.p_start[2]
subStack[2].cathode_channel.initFromEnthalpy
subStack[2].cathode_channel.h_start_in
subStack[2].cathode_channel.h_start_out
subStack[2].cathode_channel.h_start[1]
subStack[2].cathode_channel.h_start[2]
subStack[2].cathode_channel.T_start_in
subStack[2].cathode_channel.T_start_out
subStack[2].cathode_channel.T_start[1]
subStack[2].cathode_channel.T_start[2]
subStack[2].cathode_channel.X_start[1]
subStack[2].cathode_channel.X_start[2]
subStack[2].cathode_channel.X_start[3]
subStack[2].cathode_channel.X_start[4]
subStack[2].cathode_channel.X_start[5]
subStack[2].cathode_channel.m_flow_start
subStack[2].cathode_channel.positiveFlow
subStack[2].cathode_channel.from_dp
subStack[2].cathode_channel.dp_smooth
subStack[2].cathode_channel.mflow_smooth
subStack[2].cathode_channel.generateEventForReversal
subStack[2].cathode_channel.CF_PressureLoss
subStack[2].cathode_channel.CF_HeatTransfer
subStack[2].cathode_channel.X_weight
subStack[2].cathode_channel.y_sat
subStack[2].cathode_channel.includeStaticHead
subStack[2].cathode_channel.height
subStack[2].cathode_channel.g
subStack[2].cathode_channel.channel.n
subStack[2].cathode_channel.channel.n_channels[1]
subStack[2].cathode_channel.channel.L[1]
subStack[2].cathode_channel.channel.Dhyd[1]
subStack[2].cathode_channel.channel.A[1]
subStack[2].cathode_channel.channel.L_total
subStack[2].cathode_channel.channel.V[1]
subStack[2].cathode_channel.channel.V_tot
subStack[2].cathode_channel.channel.A_mean
subStack[2].cathode_channel.channel.A_heat[1]
subStack[2].cathode_channel.channel.ni
subStack[2].cathode_channel.channel.initOpt
subStack[2].cathode_channel.channel.p_start_in
subStack[2].cathode_channel.channel.p_start_out
subStack[2].cathode_channel.channel.p_start[1]
subStack[2].cathode_channel.channel.p_start[2]
subStack[2].cathode_channel.channel.initFromEnthalpy
subStack[2].cathode_channel.channel.h_start_in
subStack[2].cathode_channel.channel.h_start_out
subStack[2].cathode_channel.channel.h_start[1]
subStack[2].cathode_channel.channel.h_start[2]
subStack[2].cathode_channel.channel.T_start_in
subStack[2].cathode_channel.channel.T_start_out
subStack[2].cathode_channel.channel.T_start[1]
subStack[2].cathode_channel.channel.T_start[2]
subStack[2].cathode_channel.channel.X_start[1]
subStack[2].cathode_channel.channel.X_start[2]
subStack[2].cathode_channel.channel.X_start[3]
subStack[2].cathode_channel.channel.X_start[4]
subStack[2].cathode_channel.channel.X_start[5]
subStack[2].cathode_channel.channel.m_flow_start
subStack[2].cathode_channel.channel.positiveFlow
subStack[2].cathode_channel.channel.from_dp
subStack[2].cathode_channel.channel.dp_smooth
subStack[2].cathode_channel.channel.mflow_smooth
subStack[2].cathode_channel.channel.generateEventForReversal
subStack[2].cathode_channel.channel.NA
subStack[2].cathode_channel.channel.NB
subStack[2].cathode_channel.channel.T[1]
subStack[2].cathode_channel.channel.der(T[1])
subStack[2].cathode_channel.channel.dp_asState
subStack[2].cathode_channel.channel.frictionDistribution
subStack[2].cathode_channel.channel.n_fric
subStack[2].cathode_channel.channel.CF_PressureLoss
subStack[2].cathode_channel.channel.CF_HeatTransfer
subStack[2].cathode_channel.channel.includeStaticHead
subStack[2].cathode_channel.channel.levels[1]
subStack[2].cathode_channel.channel.g
subStack[2].cathode_channel.channel.friction[1].A
subStack[2].cathode_channel.channel.friction[1].Dhyd
subStack[2].cathode_channel.channel.friction[1].n_channels
subStack[2].cathode_channel.channel.friction[1].lengthFraction
subStack[2].cathode_channel.channel.friction[1].flowFraction0
subStack[2].cathode_channel.channel.friction[1].dpFraction0
subStack[2].cathode_channel.channel.friction[1].from_dp
subStack[2].cathode_channel.channel.friction[1].positiveFlow
subStack[2].cathode_channel.channel.friction[1].dp_smooth
subStack[2].cathode_channel.channel.friction[1].mflow_smooth
subStack[2].cathode_channel.channel.friction[1].useFixedDensity
subStack[2].cathode_channel.channel.friction[1].reference_d
subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[1]
subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[2]
subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[3]
subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[4]
subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[5]
subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[1]
subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[2]
subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[3]
subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[4]
subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[5]
subStack[2].cathode_channel.channel.friction[1].dp_from_isothermal
subStack[2].cathode_channel.channel.friction[1].dA
subStack[2].cathode_channel.channel.friction[1].dB
subStack[2].cathode_channel.channel.friction[1].d0
subStack[2].cathode_channel.channel.friction[1].dp0
subStack[2].cathode_channel.channel.friction[1].m_flow0
subStack[2].cathode_channel.channel.htcoeff[1].A
subStack[2].cathode_channel.channel.htcoeff[1].L
subStack[2].cathode_channel.channel.htcoeff[1].Dhyd
subStack[2].cathode_channel.channel.htcoeff[1].ht_from_isothermal
subStack[2].cathode_channel.channel.htcoeff[1].CF_length
subStack[2].cathode_channel.channel.htcoeff[1].alpha
subStack[2].cathode_channel.channel.reaction.N
subStack[2].cathode_channel.channel.reaction.Cp_reac[1]
subStack[2].cathode_channel.channel.reaction.Q[1]
subStack[2].cathode_channel.channel.reaction.n_reac
subStack[2].cathode_channel.channel.reaction.pstart
subStack[2].cathode_channel.channel.reaction.Tstart
subStack[2].cathode_channel.channel.reaction.Xstart[1]
subStack[2].cathode_channel.channel.reaction.Xstart[2]
subStack[2].cathode_channel.channel.reaction.Xstart[3]
subStack[2].cathode_channel.channel.reaction.Xstart[4]
subStack[2].cathode_channel.channel.reaction.Xstart[5]
subStack[2].cathode_channel.channel.reaction.V
subStack[2].cathode_channel.channel.reaction.scale
subStack[2].cathode_channel.channel.reaction.MMX[1]
subStack[2].cathode_channel.channel.reaction.MMX[2]
subStack[2].cathode_channel.channel.reaction.MMX[3]
subStack[2].cathode_channel.channel.reaction.MMX[4]
subStack[2].cathode_channel.channel.reaction.MMX[5]
subStack[2].cathode_channel.channel.reaction.MM[1]
subStack[2].cathode_channel.channel.reaction.der(MM[1])
subStack[2].cathode_channel.channel.reaction.y_start[1]
subStack[2].cathode_channel.channel.reaction.y_start[2]
subStack[2].cathode_channel.channel.reaction.y_start[3]
subStack[2].cathode_channel.channel.reaction.y_start[4]
subStack[2].cathode_channel.channel.reaction.y_start[5]
subStack[2].cathode_channel.channel.reaction.log10_y_start[1]
subStack[2].cathode_channel.channel.reaction.log10_y_start[2]
subStack[2].cathode_channel.channel.reaction.log10_y_start[3]
subStack[2].cathode_channel.channel.reaction.log10_y_start[4]
subStack[2].cathode_channel.channel.reaction.log10_y_start[5]
subStack[2].cathode_channel.channel.reaction.pref
subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 1]
subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 2]
subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 3]
subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 4]
subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 5]
subStack[2].cathode_channel.channel.reaction.Ztot_start
subStack[2].cathode_channel.channel.reaction.Zx_start[1]
subStack[2].cathode_channel.channel.reaction.Zx_start[2]
subStack[2].cathode_channel.channel.reaction.Zx_start[3]
subStack[2].cathode_channel.channel.reaction.Zx_start[4]
subStack[2].cathode_channel.channel.reaction.Zx_start[5]
subStack[2].cathode_channel.channel.reaction.CF_conversion
subStack[2].cathode_channel.channel.reaction.Tscale
subStack[2].cathode_channel.channel.reaction.Zx[1, 1]
subStack[2].cathode_channel.channel.reaction.der(Zx[1, 1])
subStack[2].cathode_channel.channel.reaction.Zx[1, 2]
subStack[2].cathode_channel.channel.reaction.der(Zx[1, 2])
subStack[2].cathode_channel.channel.reaction.Zx[1, 3]
subStack[2].cathode_channel.channel.reaction.der(Zx[1, 3])
subStack[2].cathode_channel.channel.reaction.Zx[1, 4]
subStack[2].cathode_channel.channel.reaction.der(Zx[1, 4])
subStack[2].cathode_channel.channel.reaction.Zx[1, 5]
subStack[2].cathode_channel.channel.reaction.der(Zx[1, 5])
subStack[2].cathode_channel.channel.reaction.Ztot[1]
subStack[2].cathode_channel.channel.reaction.der(Ztot[1])
subStack[2].cathode_channel.channel.reaction.rZ[1, 1]
subStack[2].cathode_channel.channel.reaction.rZ[1, 2]
subStack[2].cathode_channel.channel.reaction.rZ[1, 3]
subStack[2].cathode_channel.channel.reaction.rZ[1, 4]
subStack[2].cathode_channel.channel.reaction.rZ[1, 5]
subStack[2].cathode_channel.channel.reaction.g_formation[1, 1]
subStack[2].cathode_channel.channel.reaction.g_formation[1, 2]
subStack[2].cathode_channel.channel.reaction.g_formation[1, 3]
subStack[2].cathode_channel.channel.reaction.g_formation[1, 4]
subStack[2].cathode_channel.channel.reaction.g_formation[1, 5]
subStack[2].cathode_channel.channel.reaction.Zx_nominal
subStack[2].cathode_channel.channel.reaction.epsZ
subStack[2].cathode_channel.channel.reaction.state[1].p
subStack[2].cathode_channel.channel.reaction.state[1].T
subStack[2].cathode_channel.channel.reaction.state[1].X[1]
subStack[2].cathode_channel.channel.reaction.state[1].X[2]
subStack[2].cathode_channel.channel.reaction.state[1].X[3]
subStack[2].cathode_channel.channel.reaction.state[1].X[4]
subStack[2].cathode_channel.channel.reaction.state[1].X[5]
subStack[2].cathode_channel.channel.reaction.deplZ[1, 1]
subStack[2].cathode_channel.channel.reaction.deplZ[1, 2]
subStack[2].cathode_channel.channel.reaction.deplZ[1, 3]
subStack[2].cathode_channel.channel.reaction.deplZ[1, 4]
subStack[2].cathode_channel.channel.reaction.deplZ[1, 5]
subStack[2].cathode_channel.channel.gas[1].X[1]
subStack[2].cathode_channel.channel.gas[1].X[2]
subStack[2].cathode_channel.channel.gas[1].X[3]
subStack[2].cathode_channel.channel.gas[1].X[4]
subStack[2].cathode_channel.channel.gas[1].X[5]
subStack[2].cathode_channel.channel.gas[1].der(X[1])
subStack[2].cathode_channel.channel.gas[1].der(X[2])
subStack[2].cathode_channel.channel.gas[1].der(X[3])
subStack[2].cathode_channel.channel.gas[1].der(X[4])
subStack[2].cathode_channel.channel.gas[1].der(X[5])
subStack[2].cathode_channel.channel.gas[1].d
subStack[2].cathode_channel.channel.gas[1].der(d)
subStack[2].cathode_channel.channel.gas[1].u
subStack[2].cathode_channel.channel.gas[1].Rg
subStack[2].cathode_channel.channel.gas[1].der(Rg)
subStack[2].cathode_channel.channel.gas[1].MM
subStack[2].cathode_channel.channel.gas[1].assertlevel
subStack[2].cathode_channel.channel.gas[1].state.p
subStack[2].cathode_channel.channel.gas[1].state.T
subStack[2].cathode_channel.channel.gas[1].state.X[1]
subStack[2].cathode_channel.channel.gas[1].state.X[2]
subStack[2].cathode_channel.channel.gas[1].state.X[3]
subStack[2].cathode_channel.channel.gas[1].state.X[4]
subStack[2].cathode_channel.channel.gas[1].state.X[5]
subStack[2].cathode_channel.channel.gas[1].preferredMediumStates
subStack[2].cathode_channel.channel.gas[1].p_bar
subStack[2].cathode_channel.channel.gas[1].Z[1]
subStack[2].cathode_channel.channel.gas[1].Z[2]
subStack[2].cathode_channel.channel.gas[1].Z[3]
subStack[2].cathode_channel.channel.gas[1].Z[4]
subStack[2].cathode_channel.channel.gas[1].Z[5]
subStack[2].cathode_channel.channel.gas[1].dUZT[1]
subStack[2].cathode_channel.channel.gas[1].dUZT[2]
subStack[2].cathode_channel.channel.gas[1].dUZT[3]
subStack[2].cathode_channel.channel.gas[1].dUZT[4]
subStack[2].cathode_channel.channel.gas[1].dUZT[5]
subStack[2].cathode_channel.channel.gas[1].h_component[1]
subStack[2].cathode_channel.channel.gas[1].h_component[2]
subStack[2].cathode_channel.channel.gas[1].h_component[3]
subStack[2].cathode_channel.channel.gas[1].h_component[4]
subStack[2].cathode_channel.channel.gas[1].h_component[5]
subStack[2].cathode_channel.channel.gas[1].s_component[1]
subStack[2].cathode_channel.channel.gas[1].s_component[2]
subStack[2].cathode_channel.channel.gas[1].s_component[3]
subStack[2].cathode_channel.channel.gas[1].s_component[4]
subStack[2].cathode_channel.channel.gas[1].s_component[5]
subStack[2].cathode_channel.channel.gas[1].u_comp[1]
subStack[2].cathode_channel.channel.gas[1].u_comp[2]
subStack[2].cathode_channel.channel.gas[1].u_comp[3]
subStack[2].cathode_channel.channel.gas[1].u_comp[4]
subStack[2].cathode_channel.channel.gas[1].u_comp[5]
subStack[2].cathode_channel.channel.gas[1].cp
subStack[2].cathode_channel.channel.gas[1].g_formation[1]
subStack[2].cathode_channel.channel.gas[1].g_formation[2]
subStack[2].cathode_channel.channel.gas[1].g_formation[3]
subStack[2].cathode_channel.channel.gas[1].g_formation[4]
subStack[2].cathode_channel.channel.gas[1].g_formation[5]
subStack[2].cathode_channel.channel.gas[1].ddTp
subStack[2].cathode_channel.channel.gas[1].ddpT
subStack[2].cathode_channel.channel.gas[1].dupT
subStack[2].cathode_channel.channel.gas[1].duTp
subStack[2].cathode_channel.channel.gas[1].ddx[1]
subStack[2].cathode_channel.channel.gas[1].ddx[2]
subStack[2].cathode_channel.channel.gas[1].ddx[3]
subStack[2].cathode_channel.channel.gas[1].ddx[4]
subStack[2].cathode_channel.channel.gas[1].ddx[5]
subStack[2].cathode_channel.channel.der(p[1])
subStack[2].cathode_channel.channel.E_seg[1]
subStack[2].cathode_channel.channel.MXi[1, 1]
subStack[2].cathode_channel.channel.MXi[1, 2]
subStack[2].cathode_channel.channel.MXi[1, 3]
subStack[2].cathode_channel.channel.MXi[1, 4]
subStack[2].cathode_channel.channel.MXi[1, 5]
subStack[2].cathode_channel.channel.dp[1]
subStack[2].cathode_channel.channel.dp[2]
subStack[2].cathode_channel.channel.sh[1]
subStack[2].cathode_channel.channel.state[1].p
subStack[2].cathode_channel.channel.state[1].T
subStack[2].cathode_channel.channel.state[1].X[1]
subStack[2].cathode_channel.channel.state[1].X[2]
subStack[2].cathode_channel.channel.state[1].X[3]
subStack[2].cathode_channel.channel.state[1].X[4]
subStack[2].cathode_channel.channel.state[1].X[5]
subStack[2].cathode_channel.channel.state[2].p
subStack[2].cathode_channel.channel.state[2].T
subStack[2].cathode_channel.channel.state[2].X[1]
subStack[2].cathode_channel.channel.state[2].X[2]
subStack[2].cathode_channel.channel.state[2].X[3]
subStack[2].cathode_channel.channel.state[2].X[4]
subStack[2].cathode_channel.channel.state[2].X[5]
subStack[2].cathode_channel.channel.state[3].p
subStack[2].cathode_channel.channel.state[3].T
subStack[2].cathode_channel.channel.state[3].X[1]
subStack[2].cathode_channel.channel.state[3].X[2]
subStack[2].cathode_channel.channel.state[3].X[3]
subStack[2].cathode_channel.channel.state[3].X[4]
subStack[2].cathode_channel.channel.state[3].X[5]
subStack[2].cathode_channel.channel.Q[1]
subStack[2].cathode_channel.channel.alpha[1]
subStack[2].cathode_channel.channel.rMX[1, 1]
subStack[2].cathode_channel.channel.rMX[1, 2]
subStack[2].cathode_channel.channel.rMX[1, 3]
subStack[2].cathode_channel.channel.rMX[1, 4]
subStack[2].cathode_channel.channel.rMX[1, 5]
subStack[2].cathode_channel.channel.mflow_A_in
subStack[2].cathode_channel.channel.mflow_B_in
subStack[2].cathode_channel.channel.XA[1]
subStack[2].cathode_channel.channel.XA[2]
subStack[2].cathode_channel.channel.XA[3]
subStack[2].cathode_channel.channel.XA[4]
subStack[2].cathode_channel.channel.XA[5]
subStack[2].cathode_channel.channel.XB[1]
subStack[2].cathode_channel.channel.XB[2]
subStack[2].cathode_channel.channel.XB[3]
subStack[2].cathode_channel.channel.XB[4]
subStack[2].cathode_channel.channel.XB[5]
subStack[2].cathode_channel.channel.n_channels_fric[1]
subStack[2].cathode_channel.channel.T_wall[1]
subStack[2].cathode_channel.channel.nS
subStack[2].cathode_channel.channel.mX_flow[1, 1]
subStack[2].cathode_channel.channel.mX_flow[1, 2]
subStack[2].cathode_channel.channel.mX_flow[1, 3]
subStack[2].cathode_channel.channel.mX_flow[1, 4]
subStack[2].cathode_channel.channel.mX_flow[1, 5]
subStack[2].cathode_channel.channel.mX_flow[2, 1]
subStack[2].cathode_channel.channel.mX_flow[2, 2]
subStack[2].cathode_channel.channel.mX_flow[2, 3]
subStack[2].cathode_channel.channel.mX_flow[2, 4]
subStack[2].cathode_channel.channel.mX_flow[2, 5]
subStack[2].cathode_channel.channel.H_flow[1]
subStack[2].cathode_channel.channel.H_flow[2]
subStack[2].cathode_channel.channel.dE[1]
subStack[2].cathode_channel.channel.dMX[1, 1]
subStack[2].cathode_channel.channel.dMX[1, 2]
subStack[2].cathode_channel.channel.dMX[1, 3]
subStack[2].cathode_channel.channel.dMX[1, 4]
subStack[2].cathode_channel.channel.dMX[1, 5]
subStack[2].cathode_channel.channel.dUTZ[1]
subStack[2].cathode_channel.channel.Z[1, 1]
subStack[2].cathode_channel.channel.Z[1, 2]
subStack[2].cathode_channel.channel.Z[1, 3]
subStack[2].cathode_channel.channel.Z[1, 4]
subStack[2].cathode_channel.channel.Z[1, 5]
subStack[2].cathode_channel.channel.der(Z[1, 1])
subStack[2].cathode_channel.channel.der(Z[1, 2])
subStack[2].cathode_channel.channel.der(Z[1, 3])
subStack[2].cathode_channel.channel.der(Z[1, 4])
subStack[2].cathode_channel.channel.der(Z[1, 5])
subStack[2].cathode_channel.port[1].m_flow
subStack[2].cathode_channel.port[1].H_flow
subStack[2].cathode_channel.port[1].mX_flow[1]
subStack[2].cathode_channel.port[1].mX_flow[2]
subStack[2].cathode_channel.port[1].mX_flow[3]
subStack[2].cathode_channel.port[1].mX_flow[4]
subStack[2].cathode_channel.port[1].mX_flow[5]
subStack[2].ref[1]
subStack[2].air[1]
summary.N
summary.dmAirStkIn
summary.dmFuelStkIn
summary.tAirStkIn
summary.tFuelStkIn
summary.tAirStkOut[1]
summary.tAirStkOut[2]
summary.tFuelStkOut[1]
summary.tFuelStkOut[2]
summary.tStkOut[1]
summary.tStkOut[2]
summary.tStkTopWall
summary.tStkBottomWall
summary.QStkHeat
summary.PStkElec
summary.VCst
summary.PStk
summary.VCstZone[1]
summary.VCstZone[2]
summary.facFuelStkOutComp[1, 1]
summary.facFuelStkOutComp[1, 2]
summary.facFuelStkOutComp[1, 3]
summary.facFuelStkOutComp[1, 4]
summary.facFuelStkOutComp[1, 5]
summary.facFuelStkOutComp[1, 6]
summary.facFuelStkOutComp[1, 7]
summary.facFuelStkOutComp[2, 1]
summary.facFuelStkOutComp[2, 2]
summary.facFuelStkOutComp[2, 3]
summary.facFuelStkOutComp[2, 4]
summary.facFuelStkOutComp[2, 5]
summary.facFuelStkOutComp[2, 6]
summary.facFuelStkOutComp[2, 7]
summary.facFuelStkUtil[1]
summary.facFuelStkUtil[2]
topHeatTransfer.n
topHeatTransfer.Aheatloss
topHeatTransfer.kc
topHeatTransfer.infiniteHT
topHeatTransfer.variableKc
topHeatTransfer.Q_s[1]
topHeatTransfer.qa[1].T
bottomHeatTransfer.n
bottomHeatTransfer.Aheatloss
bottomHeatTransfer.kc
bottomHeatTransfer.infiniteHT
bottomHeatTransfer.variableKc
bottomHeatTransfer.Q_s[1]
bottomHeatTransfer.qb[1].T
bottomWall.n
bottomWall.V_wall[1]
bottomWall.A_wall[1]
bottomWall.dp
bottomWall.includeThermalResistance
bottomWall.massLessWall
bottomWall.CounterTemps
bottomWall.steadyStateInit
bottomWall.Tstart1
bottomWall.TstartN
bottomWall.T0[1]
bottomWall.m[1]
bottomWall.Rw[1]
bottomWall.T[1]
bottomWall.der(T[1])
bottomWall.qb_Q_flow[1]
bottomWall.metal_specificHeatCapacity[1]
bottomWall.qb[1].T
topWall.n
topWall.V_wall[1]
topWall.A_wall[1]
topWall.dp
topWall.includeThermalResistance
topWall.massLessWall
topWall.CounterTemps
topWall.steadyStateInit
topWall.Tstart1
topWall.TstartN
topWall.T0[1]
topWall.m[1]
topWall.Rw[1]
topWall.T[1]
topWall.der(T[1])
topWall.qa_Q_flow[1]
topWall.metal_specificHeatCapacity[1]
topWall.qa[1].T
counterFlow
feed_Anode.initFromEnthalpy
feed_Anode.h_start
feed_Anode.T_start
feed_Anode.dp_start
feed_Anode.m_flow_start
feed_Anode.height
feed_Anode.positiveFlow
feed_Anode.N_drain
feed_Anode.heat_port[1].Q_flow
feed_Anode.heat_port[2].Q_flow
feed_Anode.feed.m_flow
feed_Anode.drain[1].m_flow
feed_Anode.drain[2].m_flow
feed_Anode.pi
feed_Anode.n_volumes
feed_Anode.V_tot
feed_Anode.Nusselt_nbr
feed_Anode.pstart_in
feed_Anode.volume[1].der(V)
feed_Anode.volume[1].initOpt
feed_Anode.volume[1].initFromEnthalpy
feed_Anode.volume[1].p_start
feed_Anode.volume[1].T_start
feed_Anode.volume[1].h_start
feed_Anode.volume[1].X_start[1]
feed_Anode.volume[1].X_start[2]
feed_Anode.volume[1].X_start[3]
feed_Anode.volume[1].X_start[4]
feed_Anode.volume[1].X_start[5]
feed_Anode.volume[1].X_start[6]
feed_Anode.volume[1].X_start[7]
feed_Anode.volume[1].mXs_flow[1]
feed_Anode.volume[1].mXs_flow[2]
feed_Anode.volume[1].mXs_flow[3]
feed_Anode.volume[1].mXs_flow[4]
feed_Anode.volume[1].mXs_flow[5]
feed_Anode.volume[1].mXs_flow[6]
feed_Anode.volume[1].mXs_flow[7]
feed_Anode.volume[1].Q_add
feed_Anode.volume[1].m
feed_Anode.volume[1].N
feed_Anode.volume[1].port[1].m_flow
feed_Anode.volume[1].port[2].X_outflow[1]
feed_Anode.volume[1].port[2].X_outflow[2]
feed_Anode.volume[1].port[2].X_outflow[3]
feed_Anode.volume[1].port[2].X_outflow[4]
feed_Anode.volume[1].port[2].X_outflow[5]
feed_Anode.volume[1].port[2].X_outflow[6]
feed_Anode.volume[1].port[2].X_outflow[7]
feed_Anode.volume[1].port[3].X_outflow[1]
feed_Anode.volume[1].port[3].X_outflow[2]
feed_Anode.volume[1].port[3].X_outflow[3]
feed_Anode.volume[1].port[3].X_outflow[4]
feed_Anode.volume[1].port[3].X_outflow[5]
feed_Anode.volume[1].port[3].X_outflow[6]
feed_Anode.volume[1].port[3].X_outflow[7]
feed_Anode.volume[1].thermalDynamics
feed_Anode.volume[1].realTimeMode
feed_Anode.volume[1].stepSize
feed_Anode.volume[1].der_p_factor
feed_Anode.volume[1].h_in
feed_Anode.volume[1].T_in
feed_Anode.volume[1].X_in[1]
feed_Anode.volume[1].X_in[2]
feed_Anode.volume[1].X_in[3]
feed_Anode.volume[1].X_in[4]
feed_Anode.volume[1].X_in[5]
feed_Anode.volume[1].X_in[6]
feed_Anode.volume[1].X_in[7]
feed_Anode.volume[1].state_in.p
feed_Anode.volume[1].state_in.T
feed_Anode.volume[1].state_in.X[1]
feed_Anode.volume[1].state_in.X[2]
feed_Anode.volume[1].state_in.X[3]
feed_Anode.volume[1].state_in.X[4]
feed_Anode.volume[1].state_in.X[5]
feed_Anode.volume[1].state_in.X[6]
feed_Anode.volume[1].state_in.X[7]
feed_Anode.volume[1].state_default.p
feed_Anode.volume[1].state_default.T
feed_Anode.volume[1].state_default.X[1]
feed_Anode.volume[1].state_default.X[2]
feed_Anode.volume[1].state_default.X[3]
feed_Anode.volume[1].state_default.X[4]
feed_Anode.volume[1].state_default.X[5]
feed_Anode.volume[1].state_default.X[6]
feed_Anode.volume[1].state_default.X[7]
feed_Anode.volume[1].m_flow_in[1]
feed_Anode.volume[1].m_flow_in[2]
feed_Anode.volume[1].m_flow_in[3]
feed_Anode.volume[1].H_flow_in[1]
feed_Anode.volume[1].H_flow_in[2]
feed_Anode.volume[1].H_flow_in[3]
feed_Anode.volume[1].MX_flow_in[1, 1]
feed_Anode.volume[1].MX_flow_in[1, 2]
feed_Anode.volume[1].MX_flow_in[1, 3]
feed_Anode.volume[1].MX_flow_in[1, 4]
feed_Anode.volume[1].MX_flow_in[1, 5]
feed_Anode.volume[1].MX_flow_in[1, 6]
feed_Anode.volume[1].MX_flow_in[1, 7]
feed_Anode.volume[1].MX_flow_in[2, 1]
feed_Anode.volume[1].MX_flow_in[2, 2]
feed_Anode.volume[1].MX_flow_in[2, 3]
feed_Anode.volume[1].MX_flow_in[2, 4]
feed_Anode.volume[1].MX_flow_in[2, 5]
feed_Anode.volume[1].MX_flow_in[2, 6]
feed_Anode.volume[1].MX_flow_in[2, 7]
feed_Anode.volume[1].MX_flow_in[3, 1]
feed_Anode.volume[1].MX_flow_in[3, 2]
feed_Anode.volume[1].MX_flow_in[3, 3]
feed_Anode.volume[1].MX_flow_in[3, 4]
feed_Anode.volume[1].MX_flow_in[3, 5]
feed_Anode.volume[1].MX_flow_in[3, 6]
feed_Anode.volume[1].MX_flow_in[3, 7]
feed_Anode.volume[1].dE
feed_Anode.volume[1].dMX[1]
feed_Anode.volume[1].dMX[2]
feed_Anode.volume[1].dMX[3]
feed_Anode.volume[1].dMX[4]
feed_Anode.volume[1].dMX[5]
feed_Anode.volume[1].dMX[6]
feed_Anode.volume[1].dMX[7]
feed_Anode.volume[1].H_flow[1]
feed_Anode.volume[1].H_flow[2]
feed_Anode.volume[1].H_flow[3]
feed_Anode.volume[1].MX_flow[1, 1]
feed_Anode.volume[1].MX_flow[1, 2]
feed_Anode.volume[1].MX_flow[1, 3]
feed_Anode.volume[1].MX_flow[1, 4]
feed_Anode.volume[1].MX_flow[1, 5]
feed_Anode.volume[1].MX_flow[1, 6]
feed_Anode.volume[1].MX_flow[1, 7]
feed_Anode.volume[1].MX_flow[2, 1]
feed_Anode.volume[1].MX_flow[2, 2]
feed_Anode.volume[1].MX_flow[2, 3]
feed_Anode.volume[1].MX_flow[2, 4]
feed_Anode.volume[1].MX_flow[2, 5]
feed_Anode.volume[1].MX_flow[2, 6]
feed_Anode.volume[1].MX_flow[2, 7]
feed_Anode.volume[1].MX_flow[3, 1]
feed_Anode.volume[1].MX_flow[3, 2]
feed_Anode.volume[1].MX_flow[3, 3]
feed_Anode.volume[1].MX_flow[3, 4]
feed_Anode.volume[1].MX_flow[3, 5]
feed_Anode.volume[1].MX_flow[3, 6]
feed_Anode.volume[1].MX_flow[3, 7]
feed_Anode.volume[1].M
feed_Anode.volume[1].fluid.quasiStatic
feed_Anode.volume[1].fluid.thermalDynamics
feed_Anode.volume[1].fluid.realTimeMode
feed_Anode.volume[1].fluid.stepSize
feed_Anode.volume[1].fluid.der_p_factor
feed_Anode.volume[1].fluid.initOpt
feed_Anode.volume[1].fluid.T_start
feed_Anode.volume[1].fluid.p_start
feed_Anode.volume[1].fluid.h_start
feed_Anode.volume[1].fluid.X_start[1]
feed_Anode.volume[1].fluid.X_start[2]
feed_Anode.volume[1].fluid.X_start[3]
feed_Anode.volume[1].fluid.X_start[4]
feed_Anode.volume[1].fluid.X_start[5]
feed_Anode.volume[1].fluid.X_start[6]
feed_Anode.volume[1].fluid.X_start[7]
feed_Anode.volume[1].fluid.ns
feed_Anode.volume[1].fluid.nC
feed_Anode.volume[1].fluid.der(V_tot)
feed_Anode.volume[1].fluid.p
feed_Anode.volume[1].fluid.der(p)
feed_Anode.volume[1].fluid.d
feed_Anode.volume[1].fluid.T
feed_Anode.volume[1].fluid.der(T)
feed_Anode.volume[1].fluid.X[1]
feed_Anode.volume[1].fluid.der(X[1])
feed_Anode.volume[1].fluid.X[2]
feed_Anode.volume[1].fluid.der(X[2])
feed_Anode.volume[1].fluid.X[3]
feed_Anode.volume[1].fluid.der(X[3])
feed_Anode.volume[1].fluid.X[4]
feed_Anode.volume[1].fluid.der(X[4])
feed_Anode.volume[1].fluid.X[5]
feed_Anode.volume[1].fluid.der(X[5])
feed_Anode.volume[1].fluid.X[6]
feed_Anode.volume[1].fluid.der(X[6])
feed_Anode.volume[1].fluid.X[7]
feed_Anode.volume[1].fluid.state.p
feed_Anode.volume[1].fluid.state.T
feed_Anode.volume[1].fluid.state.X[1]
feed_Anode.volume[1].fluid.state.X[2]
feed_Anode.volume[1].fluid.state.X[3]
feed_Anode.volume[1].fluid.state.X[4]
feed_Anode.volume[1].fluid.state.X[5]
feed_Anode.volume[1].fluid.state.X[6]
feed_Anode.volume[1].fluid.state.X[7]
feed_Anode.volume[1].fluid.u
feed_Anode.volume[1].fluid.v
feed_Anode.volume[1].fluid.MX[1]
feed_Anode.volume[1].fluid.MX[2]
feed_Anode.volume[1].fluid.MX[3]
feed_Anode.volume[1].fluid.MX[4]
feed_Anode.volume[1].fluid.MX[5]
feed_Anode.volume[1].fluid.MX[6]
feed_Anode.volume[1].fluid.MX[7]
feed_Anode.volume[1].fluid.M
feed_Anode.volume[1].fluid.E
feed_Anode.volume[1].fluid.R
feed_Anode.volume[1].fluid.dM
feed_Anode.volume[1].fluid.dX[7]
feed_Anode.volume[1].fluid.R_g[1]
feed_Anode.volume[1].fluid.R_g[2]
feed_Anode.volume[1].fluid.R_g[3]
feed_Anode.volume[1].fluid.R_g[4]
feed_Anode.volume[1].fluid.R_g[5]
feed_Anode.volume[1].fluid.R_g[6]
feed_Anode.volume[1].fluid.R_g[7]
feed_Anode.volume[1].fluid.dd
feed_Anode.volume[1].fluid.dv
feed_Anode.volume[1].fluid.du
feed_Anode.volume[1].fluid.du_dX[1]
feed_Anode.volume[1].fluid.du_dX[2]
feed_Anode.volume[1].fluid.du_dX[3]
feed_Anode.volume[1].fluid.du_dX[4]
feed_Anode.volume[1].fluid.du_dX[5]
feed_Anode.volume[1].fluid.du_dX[6]
feed_Anode.volume[1].fluid.du_dX[7]
feed_Anode.volume[1].usePositiveFlow
feed_Anode.volume[1].positiveFlow[1]
feed_Anode.volume[1].positiveFlow[2]
feed_Anode.volume[1].positiveFlow[3]
feed_Anode.basicHeatTransfer.n
feed_Anode.basicHeatTransfer.Aheatloss
feed_Anode.basicHeatTransfer.kc
feed_Anode.basicHeatTransfer.infiniteHT
feed_Anode.basicHeatTransfer.variableKc
feed_Anode.frictionLoss[1].portB.X_outflow[1]
feed_Anode.frictionLoss[1].portB.X_outflow[2]
feed_Anode.frictionLoss[1].portB.X_outflow[3]
feed_Anode.frictionLoss[1].portB.X_outflow[4]
feed_Anode.frictionLoss[1].portB.X_outflow[5]
feed_Anode.frictionLoss[1].portB.X_outflow[6]
feed_Anode.frictionLoss[1].portB.X_outflow[7]
feed_Anode.frictionLoss[1].T_start
feed_Anode.frictionLoss[1].mflow_start
feed_Anode.frictionLoss[1].positiveFlow
feed_Anode.frictionLoss[1].dp_asState
feed_Anode.frictionLoss[1].dp
feed_Anode.frictionLoss[1].d
feed_Anode.frictionLoss[1].T_in
feed_Anode.frictionLoss[1].TB_in
feed_Anode.frictionLoss[1].T_out
feed_Anode.frictionLoss[1].state_in.p
feed_Anode.frictionLoss[1].state_in.T
feed_Anode.frictionLoss[1].state_in.X[1]
feed_Anode.frictionLoss[1].state_in.X[2]
feed_Anode.frictionLoss[1].state_in.X[3]
feed_Anode.frictionLoss[1].state_in.X[4]
feed_Anode.frictionLoss[1].state_in.X[5]
feed_Anode.frictionLoss[1].state_in.X[6]
feed_Anode.frictionLoss[1].state_in.X[7]
feed_Anode.frictionLoss[1].stateB_in.p
feed_Anode.frictionLoss[1].stateB_in.T
feed_Anode.frictionLoss[1].stateB_in.X[1]
feed_Anode.frictionLoss[1].stateB_in.X[2]
feed_Anode.frictionLoss[1].stateB_in.X[3]
feed_Anode.frictionLoss[1].stateB_in.X[4]
feed_Anode.frictionLoss[1].stateB_in.X[5]
feed_Anode.frictionLoss[1].stateB_in.X[6]
feed_Anode.frictionLoss[1].stateB_in.X[7]
feed_Anode.frictionLoss[1].state_out.p
feed_Anode.frictionLoss[1].state_out.T
feed_Anode.frictionLoss[1].state_out.X[1]
feed_Anode.frictionLoss[1].state_out.X[2]
feed_Anode.frictionLoss[1].state_out.X[3]
feed_Anode.frictionLoss[1].state_out.X[4]
feed_Anode.frictionLoss[1].state_out.X[5]
feed_Anode.frictionLoss[1].state_out.X[6]
feed_Anode.frictionLoss[1].state_out.X[7]
feed_Anode.frictionLoss[1].from_dp
feed_Anode.frictionLoss[1].dp_smooth
feed_Anode.frictionLoss[1].mflow_smooth
feed_Anode.frictionLoss[1].dynamicModel
feed_Anode.frictionLoss[1].T_mflow
feed_Anode.frictionLoss[1].summary.V_flow
feed_Anode.frictionLoss[1].friction.from_dp
feed_Anode.frictionLoss[1].friction.positiveFlow
feed_Anode.frictionLoss[1].friction.dp_smooth
feed_Anode.frictionLoss[1].friction.mflow_smooth
feed_Anode.frictionLoss[1].friction.useFixedDensity
feed_Anode.frictionLoss[1].friction.reference_d
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[1]
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[2]
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[3]
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[4]
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[5]
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[6]
feed_Anode.frictionLoss[1].friction.stateA_inflow.X[7]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[1]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[2]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[3]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[4]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[5]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[6]
feed_Anode.frictionLoss[1].friction.stateB_inflow.X[7]
feed_Anode.frictionLoss[1].friction.dA
feed_Anode.frictionLoss[1].friction.dB
feed_Anode.frictionLoss[1].friction.d0
feed_Anode.frictionLoss[1].friction.dp0
feed_Anode.frictionLoss[1].friction.m_flow0
feed_Anode.frictionLoss[2].portB.X_outflow[1]
feed_Anode.frictionLoss[2].portB.X_outflow[2]
feed_Anode.frictionLoss[2].portB.X_outflow[3]
feed_Anode.frictionLoss[2].portB.X_outflow[4]
feed_Anode.frictionLoss[2].portB.X_outflow[5]
feed_Anode.frictionLoss[2].portB.X_outflow[6]
feed_Anode.frictionLoss[2].portB.X_outflow[7]
feed_Anode.frictionLoss[2].T_start
feed_Anode.frictionLoss[2].mflow_start
feed_Anode.frictionLoss[2].positiveFlow
feed_Anode.frictionLoss[2].dp_asState
feed_Anode.frictionLoss[2].dp
feed_Anode.frictionLoss[2].d
feed_Anode.frictionLoss[2].T_in
feed_Anode.frictionLoss[2].TB_in
feed_Anode.frictionLoss[2].T_out
feed_Anode.frictionLoss[2].state_in.p
feed_Anode.frictionLoss[2].state_in.T
feed_Anode.frictionLoss[2].state_in.X[1]
feed_Anode.frictionLoss[2].state_in.X[2]
feed_Anode.frictionLoss[2].state_in.X[3]
feed_Anode.frictionLoss[2].state_in.X[4]
feed_Anode.frictionLoss[2].state_in.X[5]
feed_Anode.frictionLoss[2].state_in.X[6]
feed_Anode.frictionLoss[2].state_in.X[7]
feed_Anode.frictionLoss[2].stateB_in.p
feed_Anode.frictionLoss[2].stateB_in.T
feed_Anode.frictionLoss[2].stateB_in.X[1]
feed_Anode.frictionLoss[2].stateB_in.X[2]
feed_Anode.frictionLoss[2].stateB_in.X[3]
feed_Anode.frictionLoss[2].stateB_in.X[4]
feed_Anode.frictionLoss[2].stateB_in.X[5]
feed_Anode.frictionLoss[2].stateB_in.X[6]
feed_Anode.frictionLoss[2].stateB_in.X[7]
feed_Anode.frictionLoss[2].state_out.p
feed_Anode.frictionLoss[2].state_out.T
feed_Anode.frictionLoss[2].state_out.X[1]
feed_Anode.frictionLoss[2].state_out.X[2]
feed_Anode.frictionLoss[2].state_out.X[3]
feed_Anode.frictionLoss[2].state_out.X[4]
feed_Anode.frictionLoss[2].state_out.X[5]
feed_Anode.frictionLoss[2].state_out.X[6]
feed_Anode.frictionLoss[2].state_out.X[7]
feed_Anode.frictionLoss[2].from_dp
feed_Anode.frictionLoss[2].dp_smooth
feed_Anode.frictionLoss[2].mflow_smooth
feed_Anode.frictionLoss[2].dynamicModel
feed_Anode.frictionLoss[2].T_mflow
feed_Anode.frictionLoss[2].summary.V_flow
feed_Anode.frictionLoss[2].friction.from_dp
feed_Anode.frictionLoss[2].friction.positiveFlow
feed_Anode.frictionLoss[2].friction.dp_smooth
feed_Anode.frictionLoss[2].friction.mflow_smooth
feed_Anode.frictionLoss[2].friction.useFixedDensity
feed_Anode.frictionLoss[2].friction.reference_d
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[1]
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[2]
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[3]
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[4]
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[5]
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[6]
feed_Anode.frictionLoss[2].friction.stateA_inflow.X[7]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[1]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[2]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[3]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[4]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[5]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[6]
feed_Anode.frictionLoss[2].friction.stateB_inflow.X[7]
feed_Anode.frictionLoss[2].friction.dA
feed_Anode.frictionLoss[2].friction.dB
feed_Anode.frictionLoss[2].friction.d0
feed_Anode.frictionLoss[2].friction.dp0
feed_Anode.frictionLoss[2].friction.m_flow0
feed_Anode.summary.nbr
feed_Anode.summary.V_tot
feed_Anode.summary.m_flow_in
feed_Anode.summary.dp[1]
feed_Anode.summary.dp[2]
feed_Anode.lambda_fluid
feed_Anode.width
feed_Anode.depth
feed_Anode.thermalCollector.m
feed_Anode.thermalCollector.port_b.Q_flow
feed_Anode.pstart[1]
feed_Anode.Dhyd
feed_Cathode.initFromEnthalpy
feed_Cathode.h_start
feed_Cathode.T_start
feed_Cathode.dp_start
feed_Cathode.m_flow_start
feed_Cathode.height
feed_Cathode.positiveFlow
feed_Cathode.N_drain
feed_Cathode.heat_port[1].Q_flow
feed_Cathode.heat_port[2].Q_flow
feed_Cathode.feed.m_flow
feed_Cathode.drain[1].m_flow
feed_Cathode.drain[2].m_flow
feed_Cathode.pi
feed_Cathode.n_volumes
feed_Cathode.V_tot
feed_Cathode.Nusselt_nbr
feed_Cathode.pstart_in
feed_Cathode.volume[1].der(V)
feed_Cathode.volume[1].initOpt
feed_Cathode.volume[1].initFromEnthalpy
feed_Cathode.volume[1].p_start
feed_Cathode.volume[1].T_start
feed_Cathode.volume[1].h_start
feed_Cathode.volume[1].X_start[1]
feed_Cathode.volume[1].X_start[2]
feed_Cathode.volume[1].X_start[3]
feed_Cathode.volume[1].X_start[4]
feed_Cathode.volume[1].X_start[5]
feed_Cathode.volume[1].mXs_flow[1]
feed_Cathode.volume[1].mXs_flow[2]
feed_Cathode.volume[1].mXs_flow[3]
feed_Cathode.volume[1].mXs_flow[4]
feed_Cathode.volume[1].mXs_flow[5]
feed_Cathode.volume[1].Q_add
feed_Cathode.volume[1].m
feed_Cathode.volume[1].N
feed_Cathode.volume[1].port[1].m_flow
feed_Cathode.volume[1].port[2].X_outflow[1]
feed_Cathode.volume[1].port[2].X_outflow[2]
feed_Cathode.volume[1].port[2].X_outflow[3]
feed_Cathode.volume[1].port[2].X_outflow[4]
feed_Cathode.volume[1].port[2].X_outflow[5]
feed_Cathode.volume[1].port[3].X_outflow[1]
feed_Cathode.volume[1].port[3].X_outflow[2]
feed_Cathode.volume[1].port[3].X_outflow[3]
feed_Cathode.volume[1].port[3].X_outflow[4]
feed_Cathode.volume[1].port[3].X_outflow[5]
feed_Cathode.volume[1].thermalDynamics
feed_Cathode.volume[1].realTimeMode
feed_Cathode.volume[1].stepSize
feed_Cathode.volume[1].der_p_factor
feed_Cathode.volume[1].h_in
feed_Cathode.volume[1].X_in[1]
feed_Cathode.volume[1].X_in[2]
feed_Cathode.volume[1].X_in[3]
feed_Cathode.volume[1].X_in[4]
feed_Cathode.volume[1].X_in[5]
feed_Cathode.volume[1].state_in.p
feed_Cathode.volume[1].state_in.T
feed_Cathode.volume[1].state_in.X[1]
feed_Cathode.volume[1].state_in.X[2]
feed_Cathode.volume[1].state_in.X[3]
feed_Cathode.volume[1].state_in.X[4]
feed_Cathode.volume[1].state_in.X[5]
feed_Cathode.volume[1].state_default.p
feed_Cathode.volume[1].state_default.T
feed_Cathode.volume[1].state_default.X[1]
feed_Cathode.volume[1].state_default.X[2]
feed_Cathode.volume[1].state_default.X[3]
feed_Cathode.volume[1].state_default.X[4]
feed_Cathode.volume[1].state_default.X[5]
feed_Cathode.volume[1].m_flow_in[1]
feed_Cathode.volume[1].m_flow_in[2]
feed_Cathode.volume[1].m_flow_in[3]
feed_Cathode.volume[1].H_flow_in[1]
feed_Cathode.volume[1].H_flow_in[2]
feed_Cathode.volume[1].H_flow_in[3]
feed_Cathode.volume[1].MX_flow_in[1, 1]
feed_Cathode.volume[1].MX_flow_in[1, 2]
feed_Cathode.volume[1].MX_flow_in[1, 3]
feed_Cathode.volume[1].MX_flow_in[1, 4]
feed_Cathode.volume[1].MX_flow_in[1, 5]
feed_Cathode.volume[1].MX_flow_in[2, 1]
feed_Cathode.volume[1].MX_flow_in[2, 2]
feed_Cathode.volume[1].MX_flow_in[2, 3]
feed_Cathode.volume[1].MX_flow_in[2, 4]
feed_Cathode.volume[1].MX_flow_in[2, 5]
feed_Cathode.volume[1].MX_flow_in[3, 1]
feed_Cathode.volume[1].MX_flow_in[3, 2]
feed_Cathode.volume[1].MX_flow_in[3, 3]
feed_Cathode.volume[1].MX_flow_in[3, 4]
feed_Cathode.volume[1].MX_flow_in[3, 5]
feed_Cathode.volume[1].dE
feed_Cathode.volume[1].dMX[1]
feed_Cathode.volume[1].dMX[2]
feed_Cathode.volume[1].dMX[3]
feed_Cathode.volume[1].dMX[4]
feed_Cathode.volume[1].dMX[5]
feed_Cathode.volume[1].H_flow[1]
feed_Cathode.volume[1].H_flow[2]
feed_Cathode.volume[1].H_flow[3]
feed_Cathode.volume[1].MX_flow[1, 1]
feed_Cathode.volume[1].MX_flow[1, 2]
feed_Cathode.volume[1].MX_flow[1, 3]
feed_Cathode.volume[1].MX_flow[1, 4]
feed_Cathode.volume[1].MX_flow[1, 5]
feed_Cathode.volume[1].MX_flow[2, 1]
feed_Cathode.volume[1].MX_flow[2, 2]
feed_Cathode.volume[1].MX_flow[2, 3]
feed_Cathode.volume[1].MX_flow[2, 4]
feed_Cathode.volume[1].MX_flow[2, 5]
feed_Cathode.volume[1].MX_flow[3, 1]
feed_Cathode.volume[1].MX_flow[3, 2]
feed_Cathode.volume[1].MX_flow[3, 3]
feed_Cathode.volume[1].MX_flow[3, 4]
feed_Cathode.volume[1].MX_flow[3, 5]
feed_Cathode.volume[1].M
feed_Cathode.volume[1].fluid.quasiStatic
feed_Cathode.volume[1].fluid.thermalDynamics
feed_Cathode.volume[1].fluid.realTimeMode
feed_Cathode.volume[1].fluid.stepSize
feed_Cathode.volume[1].fluid.der_p_factor
feed_Cathode.volume[1].fluid.initOpt
feed_Cathode.volume[1].fluid.T_start
feed_Cathode.volume[1].fluid.p_start
feed_Cathode.volume[1].fluid.h_start
feed_Cathode.volume[1].fluid.X_start[1]
feed_Cathode.volume[1].fluid.X_start[2]
feed_Cathode.volume[1].fluid.X_start[3]
feed_Cathode.volume[1].fluid.X_start[4]
feed_Cathode.volume[1].fluid.X_start[5]
feed_Cathode.volume[1].fluid.ns
feed_Cathode.volume[1].fluid.nC
feed_Cathode.volume[1].fluid.der(V_tot)
feed_Cathode.volume[1].fluid.p
feed_Cathode.volume[1].fluid.der(p)
feed_Cathode.volume[1].fluid.d
feed_Cathode.volume[1].fluid.T
feed_Cathode.volume[1].fluid.der(T)
feed_Cathode.volume[1].fluid.X[1]
feed_Cathode.volume[1].fluid.der(X[1])
feed_Cathode.volume[1].fluid.X[2]
feed_Cathode.volume[1].fluid.der(X[2])
feed_Cathode.volume[1].fluid.X[3]
feed_Cathode.volume[1].fluid.der(X[3])
feed_Cathode.volume[1].fluid.X[4]
feed_Cathode.volume[1].fluid.der(X[4])
feed_Cathode.volume[1].fluid.X[5]
feed_Cathode.volume[1].fluid.state.p
feed_Cathode.volume[1].fluid.state.T
feed_Cathode.volume[1].fluid.state.X[1]
feed_Cathode.volume[1].fluid.state.X[2]
feed_Cathode.volume[1].fluid.state.X[3]
feed_Cathode.volume[1].fluid.state.X[4]
feed_Cathode.volume[1].fluid.state.X[5]
feed_Cathode.volume[1].fluid.u
feed_Cathode.volume[1].fluid.v
feed_Cathode.volume[1].fluid.MX[1]
feed_Cathode.volume[1].fluid.MX[2]
feed_Cathode.volume[1].fluid.MX[3]
feed_Cathode.volume[1].fluid.MX[4]
feed_Cathode.volume[1].fluid.MX[5]
feed_Cathode.volume[1].fluid.M
feed_Cathode.volume[1].fluid.E
feed_Cathode.volume[1].fluid.R
feed_Cathode.volume[1].fluid.dM
feed_Cathode.volume[1].fluid.dX[5]
feed_Cathode.volume[1].fluid.R_g[1]
feed_Cathode.volume[1].fluid.R_g[2]
feed_Cathode.volume[1].fluid.R_g[3]
feed_Cathode.volume[1].fluid.R_g[4]
feed_Cathode.volume[1].fluid.R_g[5]
feed_Cathode.volume[1].fluid.dd
feed_Cathode.volume[1].fluid.dv
feed_Cathode.volume[1].fluid.du
feed_Cathode.volume[1].fluid.du_dX[1]
feed_Cathode.volume[1].fluid.du_dX[2]
feed_Cathode.volume[1].fluid.du_dX[3]
feed_Cathode.volume[1].fluid.du_dX[4]
feed_Cathode.volume[1].fluid.du_dX[5]
feed_Cathode.volume[1].usePositiveFlow
feed_Cathode.volume[1].positiveFlow[1]
feed_Cathode.volume[1].positiveFlow[2]
feed_Cathode.volume[1].positiveFlow[3]
feed_Cathode.basicHeatTransfer.n
feed_Cathode.basicHeatTransfer.Aheatloss
feed_Cathode.basicHeatTransfer.kc
feed_Cathode.basicHeatTransfer.infiniteHT
feed_Cathode.basicHeatTransfer.variableKc
feed_Cathode.frictionLoss[1].portB.X_outflow[1]
feed_Cathode.frictionLoss[1].portB.X_outflow[2]
feed_Cathode.frictionLoss[1].portB.X_outflow[3]
feed_Cathode.frictionLoss[1].portB.X_outflow[4]
feed_Cathode.frictionLoss[1].portB.X_outflow[5]
feed_Cathode.frictionLoss[1].T_start
feed_Cathode.frictionLoss[1].mflow_start
feed_Cathode.frictionLoss[1].positiveFlow
feed_Cathode.frictionLoss[1].dp_asState
feed_Cathode.frictionLoss[1].dp
feed_Cathode.frictionLoss[1].d
feed_Cathode.frictionLoss[1].state_in.p
feed_Cathode.frictionLoss[1].state_in.T
feed_Cathode.frictionLoss[1].state_in.X[1]
feed_Cathode.frictionLoss[1].state_in.X[2]
feed_Cathode.frictionLoss[1].state_in.X[3]
feed_Cathode.frictionLoss[1].state_in.X[4]
feed_Cathode.frictionLoss[1].state_in.X[5]
feed_Cathode.frictionLoss[1].stateB_in.p
feed_Cathode.frictionLoss[1].stateB_in.T
feed_Cathode.frictionLoss[1].stateB_in.X[1]
feed_Cathode.frictionLoss[1].stateB_in.X[2]
feed_Cathode.frictionLoss[1].stateB_in.X[3]
feed_Cathode.frictionLoss[1].stateB_in.X[4]
feed_Cathode.frictionLoss[1].stateB_in.X[5]
feed_Cathode.frictionLoss[1].state_out.p
feed_Cathode.frictionLoss[1].state_out.T
feed_Cathode.frictionLoss[1].state_out.X[1]
feed_Cathode.frictionLoss[1].state_out.X[2]
feed_Cathode.frictionLoss[1].state_out.X[3]
feed_Cathode.frictionLoss[1].state_out.X[4]
feed_Cathode.frictionLoss[1].state_out.X[5]
feed_Cathode.frictionLoss[1].from_dp
feed_Cathode.frictionLoss[1].dp_smooth
feed_Cathode.frictionLoss[1].mflow_smooth
feed_Cathode.frictionLoss[1].dynamicModel
feed_Cathode.frictionLoss[1].T_mflow
feed_Cathode.frictionLoss[1].summary.V_flow
feed_Cathode.frictionLoss[1].friction.from_dp
feed_Cathode.frictionLoss[1].friction.positiveFlow
feed_Cathode.frictionLoss[1].friction.dp_smooth
feed_Cathode.frictionLoss[1].friction.mflow_smooth
feed_Cathode.frictionLoss[1].friction.useFixedDensity
feed_Cathode.frictionLoss[1].friction.reference_d
feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[1]
feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[2]
feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[3]
feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[4]
feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[5]
feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[1]
feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[2]
feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[3]
feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[4]
feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[5]
feed_Cathode.frictionLoss[1].friction.dA
feed_Cathode.frictionLoss[1].friction.dB
feed_Cathode.frictionLoss[1].friction.d0
feed_Cathode.frictionLoss[1].friction.dp0
feed_Cathode.frictionLoss[1].friction.m_flow0
feed_Cathode.frictionLoss[2].portB.X_outflow[1]
feed_Cathode.frictionLoss[2].portB.X_outflow[2]
feed_Cathode.frictionLoss[2].portB.X_outflow[3]
feed_Cathode.frictionLoss[2].portB.X_outflow[4]
feed_Cathode.frictionLoss[2].portB.X_outflow[5]
feed_Cathode.frictionLoss[2].T_start
feed_Cathode.frictionLoss[2].mflow_start
feed_Cathode.frictionLoss[2].positiveFlow
feed_Cathode.frictionLoss[2].dp_asState
feed_Cathode.frictionLoss[2].dp
feed_Cathode.frictionLoss[2].d
feed_Cathode.frictionLoss[2].state_in.p
feed_Cathode.frictionLoss[2].state_in.T
feed_Cathode.frictionLoss[2].state_in.X[1]
feed_Cathode.frictionLoss[2].state_in.X[2]
feed_Cathode.frictionLoss[2].state_in.X[3]
feed_Cathode.frictionLoss[2].state_in.X[4]
feed_Cathode.frictionLoss[2].state_in.X[5]
feed_Cathode.frictionLoss[2].stateB_in.p
feed_Cathode.frictionLoss[2].stateB_in.T
feed_Cathode.frictionLoss[2].stateB_in.X[1]
feed_Cathode.frictionLoss[2].stateB_in.X[2]
feed_Cathode.frictionLoss[2].stateB_in.X[3]
feed_Cathode.frictionLoss[2].stateB_in.X[4]
feed_Cathode.frictionLoss[2].stateB_in.X[5]
feed_Cathode.frictionLoss[2].state_out.p
feed_Cathode.frictionLoss[2].state_out.T
feed_Cathode.frictionLoss[2].state_out.X[1]
feed_Cathode.frictionLoss[2].state_out.X[2]
feed_Cathode.frictionLoss[2].state_out.X[3]
feed_Cathode.frictionLoss[2].state_out.X[4]
feed_Cathode.frictionLoss[2].state_out.X[5]
feed_Cathode.frictionLoss[2].from_dp
feed_Cathode.frictionLoss[2].dp_smooth
feed_Cathode.frictionLoss[2].mflow_smooth
feed_Cathode.frictionLoss[2].dynamicModel
feed_Cathode.frictionLoss[2].T_mflow
feed_Cathode.frictionLoss[2].summary.V_flow
feed_Cathode.frictionLoss[2].friction.from_dp
feed_Cathode.frictionLoss[2].friction.positiveFlow
feed_Cathode.frictionLoss[2].friction.dp_smooth
feed_Cathode.frictionLoss[2].friction.mflow_smooth
feed_Cathode.frictionLoss[2].friction.useFixedDensity
feed_Cathode.frictionLoss[2].friction.reference_d
feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[1]
feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[2]
feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[3]
feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[4]
feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[5]
feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[1]
feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[2]
feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[3]
feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[4]
feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[5]
feed_Cathode.frictionLoss[2].friction.dA
feed_Cathode.frictionLoss[2].friction.dB
feed_Cathode.frictionLoss[2].friction.d0
feed_Cathode.frictionLoss[2].friction.dp0
feed_Cathode.frictionLoss[2].friction.m_flow0
feed_Cathode.summary.nbr
feed_Cathode.summary.V_tot
feed_Cathode.summary.m_flow_in
feed_Cathode.summary.dp[1]
feed_Cathode.summary.dp[2]
feed_Cathode.lambda_fluid
feed_Cathode.width
feed_Cathode.depth
feed_Cathode.thermalCollector.m
feed_Cathode.thermalCollector.port_b.Q_flow
feed_Cathode.pstart[1]
feed_Cathode.Dhyd
drain_Anode.initFromEnthalpy
drain_Anode.h_start
drain_Anode.T_start
drain_Anode.dp_start
drain_Anode.m_flow_start
drain_Anode.height
drain_Anode.positiveFlow
drain_Anode.N_feed
drain_Anode.heat_port[1].Q_flow
drain_Anode.heat_port[2].Q_flow
drain_Anode.feed[1].m_flow
drain_Anode.feed[2].m_flow
drain_Anode.drain.m_flow
drain_Anode.pi
drain_Anode.n_volumes
drain_Anode.V_tot
drain_Anode.Nusselt_nbr
drain_Anode.pstart_out
drain_Anode.volume[1].V
drain_Anode.volume[1].der(V)
drain_Anode.volume[1].initOpt
drain_Anode.volume[1].initFromEnthalpy
drain_Anode.volume[1].p_start
drain_Anode.volume[1].T_start
drain_Anode.volume[1].h_start
drain_Anode.volume[1].X_start[1]
drain_Anode.volume[1].X_start[2]
drain_Anode.volume[1].X_start[3]
drain_Anode.volume[1].X_start[4]
drain_Anode.volume[1].X_start[5]
drain_Anode.volume[1].X_start[6]
drain_Anode.volume[1].X_start[7]
drain_Anode.volume[1].mXs_flow[1]
drain_Anode.volume[1].mXs_flow[2]
drain_Anode.volume[1].mXs_flow[3]
drain_Anode.volume[1].mXs_flow[4]
drain_Anode.volume[1].mXs_flow[5]
drain_Anode.volume[1].mXs_flow[6]
drain_Anode.volume[1].mXs_flow[7]
drain_Anode.volume[1].Q_add
drain_Anode.volume[1].m
drain_Anode.volume[1].N
drain_Anode.volume[1].port[3].m_flow
drain_Anode.volume[1].port[3].X_outflow[1]
drain_Anode.volume[1].port[3].X_outflow[2]
drain_Anode.volume[1].port[3].X_outflow[3]
drain_Anode.volume[1].port[3].X_outflow[4]
drain_Anode.volume[1].port[3].X_outflow[5]
drain_Anode.volume[1].port[3].X_outflow[6]
drain_Anode.volume[1].port[3].X_outflow[7]
drain_Anode.volume[1].thermalDynamics
drain_Anode.volume[1].realTimeMode
drain_Anode.volume[1].stepSize
drain_Anode.volume[1].der_p_factor
drain_Anode.volume[1].h_in
drain_Anode.volume[1].T_in
drain_Anode.volume[1].X_in[1]
drain_Anode.volume[1].X_in[2]
drain_Anode.volume[1].X_in[3]
drain_Anode.volume[1].X_in[4]
drain_Anode.volume[1].X_in[5]
drain_Anode.volume[1].X_in[6]
drain_Anode.volume[1].X_in[7]
drain_Anode.volume[1].state_in.p
drain_Anode.volume[1].state_in.T
drain_Anode.volume[1].state_in.X[1]
drain_Anode.volume[1].state_in.X[2]
drain_Anode.volume[1].state_in.X[3]
drain_Anode.volume[1].state_in.X[4]
drain_Anode.volume[1].state_in.X[5]
drain_Anode.volume[1].state_in.X[6]
drain_Anode.volume[1].state_in.X[7]
drain_Anode.volume[1].state_default.p
drain_Anode.volume[1].state_default.T
drain_Anode.volume[1].state_default.X[1]
drain_Anode.volume[1].state_default.X[2]
drain_Anode.volume[1].state_default.X[3]
drain_Anode.volume[1].state_default.X[4]
drain_Anode.volume[1].state_default.X[5]
drain_Anode.volume[1].state_default.X[6]
drain_Anode.volume[1].state_default.X[7]
drain_Anode.volume[1].m_flow_in[1]
drain_Anode.volume[1].m_flow_in[2]
drain_Anode.volume[1].m_flow_in[3]
drain_Anode.volume[1].H_flow_in[1]
drain_Anode.volume[1].H_flow_in[2]
drain_Anode.volume[1].H_flow_in[3]
drain_Anode.volume[1].MX_flow_in[1, 1]
drain_Anode.volume[1].MX_flow_in[1, 2]
drain_Anode.volume[1].MX_flow_in[1, 3]
drain_Anode.volume[1].MX_flow_in[1, 4]
drain_Anode.volume[1].MX_flow_in[1, 5]
drain_Anode.volume[1].MX_flow_in[1, 6]
drain_Anode.volume[1].MX_flow_in[1, 7]
drain_Anode.volume[1].MX_flow_in[2, 1]
drain_Anode.volume[1].MX_flow_in[2, 2]
drain_Anode.volume[1].MX_flow_in[2, 3]
drain_Anode.volume[1].MX_flow_in[2, 4]
drain_Anode.volume[1].MX_flow_in[2, 5]
drain_Anode.volume[1].MX_flow_in[2, 6]
drain_Anode.volume[1].MX_flow_in[2, 7]
drain_Anode.volume[1].MX_flow_in[3, 1]
drain_Anode.volume[1].MX_flow_in[3, 2]
drain_Anode.volume[1].MX_flow_in[3, 3]
drain_Anode.volume[1].MX_flow_in[3, 4]
drain_Anode.volume[1].MX_flow_in[3, 5]
drain_Anode.volume[1].MX_flow_in[3, 6]
drain_Anode.volume[1].MX_flow_in[3, 7]
drain_Anode.volume[1].dE
drain_Anode.volume[1].dMX[1]
drain_Anode.volume[1].dMX[2]
drain_Anode.volume[1].dMX[3]
drain_Anode.volume[1].dMX[4]
drain_Anode.volume[1].dMX[5]
drain_Anode.volume[1].dMX[6]
drain_Anode.volume[1].dMX[7]
drain_Anode.volume[1].H_flow[1]
drain_Anode.volume[1].H_flow[2]
drain_Anode.volume[1].H_flow[3]
drain_Anode.volume[1].MX_flow[1, 1]
drain_Anode.volume[1].MX_flow[1, 2]
drain_Anode.volume[1].MX_flow[1, 3]
drain_Anode.volume[1].MX_flow[1, 4]
drain_Anode.volume[1].MX_flow[1, 5]
drain_Anode.volume[1].MX_flow[1, 6]
drain_Anode.volume[1].MX_flow[1, 7]
drain_Anode.volume[1].MX_flow[2, 1]
drain_Anode.volume[1].MX_flow[2, 2]
drain_Anode.volume[1].MX_flow[2, 3]
drain_Anode.volume[1].MX_flow[2, 4]
drain_Anode.volume[1].MX_flow[2, 5]
drain_Anode.volume[1].MX_flow[2, 6]
drain_Anode.volume[1].MX_flow[2, 7]
drain_Anode.volume[1].MX_flow[3, 1]
drain_Anode.volume[1].MX_flow[3, 2]
drain_Anode.volume[1].MX_flow[3, 3]
drain_Anode.volume[1].MX_flow[3, 4]
drain_Anode.volume[1].MX_flow[3, 5]
drain_Anode.volume[1].MX_flow[3, 6]
drain_Anode.volume[1].MX_flow[3, 7]
drain_Anode.volume[1].M
drain_Anode.volume[1].fluid.quasiStatic
drain_Anode.volume[1].fluid.thermalDynamics
drain_Anode.volume[1].fluid.realTimeMode
drain_Anode.volume[1].fluid.stepSize
drain_Anode.volume[1].fluid.der_p_factor
drain_Anode.volume[1].fluid.initOpt
drain_Anode.volume[1].fluid.T_start
drain_Anode.volume[1].fluid.p_start
drain_Anode.volume[1].fluid.h_start
drain_Anode.volume[1].fluid.X_start[1]
drain_Anode.volume[1].fluid.X_start[2]
drain_Anode.volume[1].fluid.X_start[3]
drain_Anode.volume[1].fluid.X_start[4]
drain_Anode.volume[1].fluid.X_start[5]
drain_Anode.volume[1].fluid.X_start[6]
drain_Anode.volume[1].fluid.X_start[7]
drain_Anode.volume[1].fluid.ns
drain_Anode.volume[1].fluid.nC
drain_Anode.volume[1].fluid.V_tot
drain_Anode.volume[1].fluid.der(V_tot)
drain_Anode.volume[1].fluid.p
drain_Anode.volume[1].fluid.der(p)
drain_Anode.volume[1].fluid.d
drain_Anode.volume[1].fluid.T
drain_Anode.volume[1].fluid.der(T)
drain_Anode.volume[1].fluid.X[1]
drain_Anode.volume[1].fluid.der(X[1])
drain_Anode.volume[1].fluid.X[2]
drain_Anode.volume[1].fluid.der(X[2])
drain_Anode.volume[1].fluid.X[3]
drain_Anode.volume[1].fluid.der(X[3])
drain_Anode.volume[1].fluid.X[4]
drain_Anode.volume[1].fluid.der(X[4])
drain_Anode.volume[1].fluid.X[5]
drain_Anode.volume[1].fluid.der(X[5])
drain_Anode.volume[1].fluid.X[6]
drain_Anode.volume[1].fluid.der(X[6])
drain_Anode.volume[1].fluid.X[7]
drain_Anode.volume[1].fluid.state.p
drain_Anode.volume[1].fluid.state.T
drain_Anode.volume[1].fluid.state.X[1]
drain_Anode.volume[1].fluid.state.X[2]
drain_Anode.volume[1].fluid.state.X[3]
drain_Anode.volume[1].fluid.state.X[4]
drain_Anode.volume[1].fluid.state.X[5]
drain_Anode.volume[1].fluid.state.X[6]
drain_Anode.volume[1].fluid.state.X[7]
drain_Anode.volume[1].fluid.u
drain_Anode.volume[1].fluid.v
drain_Anode.volume[1].fluid.MX[1]
drain_Anode.volume[1].fluid.MX[2]
drain_Anode.volume[1].fluid.MX[3]
drain_Anode.volume[1].fluid.MX[4]
drain_Anode.volume[1].fluid.MX[5]
drain_Anode.volume[1].fluid.MX[6]
drain_Anode.volume[1].fluid.MX[7]
drain_Anode.volume[1].fluid.M
drain_Anode.volume[1].fluid.E
drain_Anode.volume[1].fluid.R
drain_Anode.volume[1].fluid.dM
drain_Anode.volume[1].fluid.dX[7]
drain_Anode.volume[1].fluid.R_g[1]
drain_Anode.volume[1].fluid.R_g[2]
drain_Anode.volume[1].fluid.R_g[3]
drain_Anode.volume[1].fluid.R_g[4]
drain_Anode.volume[1].fluid.R_g[5]
drain_Anode.volume[1].fluid.R_g[6]
drain_Anode.volume[1].fluid.R_g[7]
drain_Anode.volume[1].fluid.dd
drain_Anode.volume[1].fluid.dv
drain_Anode.volume[1].fluid.du
drain_Anode.volume[1].fluid.du_dX[1]
drain_Anode.volume[1].fluid.du_dX[2]
drain_Anode.volume[1].fluid.du_dX[3]
drain_Anode.volume[1].fluid.du_dX[4]
drain_Anode.volume[1].fluid.du_dX[5]
drain_Anode.volume[1].fluid.du_dX[6]
drain_Anode.volume[1].fluid.du_dX[7]
drain_Anode.volume[1].usePositiveFlow
drain_Anode.volume[1].positiveFlow[1]
drain_Anode.volume[1].positiveFlow[2]
drain_Anode.volume[1].positiveFlow[3]
drain_Anode.volume[1].summary.V
drain_Anode.basicHeatTransfer.n
drain_Anode.basicHeatTransfer.Aheatloss
drain_Anode.basicHeatTransfer.kc
drain_Anode.basicHeatTransfer.infiniteHT
drain_Anode.basicHeatTransfer.variableKc
drain_Anode.frictionLoss.portA.m_flow
drain_Anode.frictionLoss.portB.m_flow
drain_Anode.frictionLoss.portB.X_outflow[1]
drain_Anode.frictionLoss.portB.X_outflow[2]
drain_Anode.frictionLoss.portB.X_outflow[3]
drain_Anode.frictionLoss.portB.X_outflow[4]
drain_Anode.frictionLoss.portB.X_outflow[5]
drain_Anode.frictionLoss.portB.X_outflow[6]
drain_Anode.frictionLoss.portB.X_outflow[7]
drain_Anode.frictionLoss.T_start
drain_Anode.frictionLoss.mflow_start
drain_Anode.frictionLoss.positiveFlow
drain_Anode.frictionLoss.dp_asState
drain_Anode.frictionLoss.dp
drain_Anode.frictionLoss.m_flow
drain_Anode.frictionLoss.d
drain_Anode.frictionLoss.T_in
drain_Anode.frictionLoss.TB_in
drain_Anode.frictionLoss.T_out
drain_Anode.frictionLoss.state_in.p
drain_Anode.frictionLoss.state_in.T
drain_Anode.frictionLoss.state_in.X[1]
drain_Anode.frictionLoss.state_in.X[2]
drain_Anode.frictionLoss.state_in.X[3]
drain_Anode.frictionLoss.state_in.X[4]
drain_Anode.frictionLoss.state_in.X[5]
drain_Anode.frictionLoss.state_in.X[6]
drain_Anode.frictionLoss.state_in.X[7]
drain_Anode.frictionLoss.stateB_in.p
drain_Anode.frictionLoss.stateB_in.T
drain_Anode.frictionLoss.stateB_in.X[1]
drain_Anode.frictionLoss.stateB_in.X[2]
drain_Anode.frictionLoss.stateB_in.X[3]
drain_Anode.frictionLoss.stateB_in.X[4]
drain_Anode.frictionLoss.stateB_in.X[5]
drain_Anode.frictionLoss.stateB_in.X[6]
drain_Anode.frictionLoss.stateB_in.X[7]
drain_Anode.frictionLoss.state_out.p
drain_Anode.frictionLoss.state_out.T
drain_Anode.frictionLoss.state_out.X[1]
drain_Anode.frictionLoss.state_out.X[2]
drain_Anode.frictionLoss.state_out.X[3]
drain_Anode.frictionLoss.state_out.X[4]
drain_Anode.frictionLoss.state_out.X[5]
drain_Anode.frictionLoss.state_out.X[6]
drain_Anode.frictionLoss.state_out.X[7]
drain_Anode.frictionLoss.from_dp
drain_Anode.frictionLoss.dp_smooth
drain_Anode.frictionLoss.mflow_smooth
drain_Anode.frictionLoss.dynamicModel
drain_Anode.frictionLoss.T_mflow
drain_Anode.frictionLoss.summary.m_flow
drain_Anode.frictionLoss.summary.V_flow
drain_Anode.frictionLoss.friction.from_dp
drain_Anode.frictionLoss.friction.positiveFlow
drain_Anode.frictionLoss.friction.dp_smooth
drain_Anode.frictionLoss.friction.mflow_smooth
drain_Anode.frictionLoss.friction.useFixedDensity
drain_Anode.frictionLoss.friction.reference_d
drain_Anode.frictionLoss.friction.stateA_inflow.X[1]
drain_Anode.frictionLoss.friction.stateA_inflow.X[2]
drain_Anode.frictionLoss.friction.stateA_inflow.X[3]
drain_Anode.frictionLoss.friction.stateA_inflow.X[4]
drain_Anode.frictionLoss.friction.stateA_inflow.X[5]
drain_Anode.frictionLoss.friction.stateA_inflow.X[6]
drain_Anode.frictionLoss.friction.stateA_inflow.X[7]
drain_Anode.frictionLoss.friction.stateB_inflow.X[1]
drain_Anode.frictionLoss.friction.stateB_inflow.X[2]
drain_Anode.frictionLoss.friction.stateB_inflow.X[3]
drain_Anode.frictionLoss.friction.stateB_inflow.X[4]
drain_Anode.frictionLoss.friction.stateB_inflow.X[5]
drain_Anode.frictionLoss.friction.stateB_inflow.X[6]
drain_Anode.frictionLoss.friction.stateB_inflow.X[7]
drain_Anode.frictionLoss.friction.m_flow
drain_Anode.frictionLoss.friction.dA
drain_Anode.frictionLoss.friction.dB
drain_Anode.frictionLoss.friction.d0
drain_Anode.frictionLoss.friction.dp0
drain_Anode.frictionLoss.friction.m_flow0
drain_Anode.summary.nbr
drain_Anode.summary.V_tot
drain_Anode.summary.m_flow_out
drain_Anode.summary.dp[1]
drain_Anode.summary.dp[2]
drain_Anode.lambda_fluid
drain_Anode.width
drain_Anode.depth
drain_Anode.pstart[1]
drain_Anode.Dhyd
drain_Anode.thermalCollector.m
drain_Anode.thermalCollector.port_b.Q_flow
drain_Cathode.initFromEnthalpy
drain_Cathode.h_start
drain_Cathode.T_start
drain_Cathode.dp_start
drain_Cathode.m_flow_start
drain_Cathode.height
drain_Cathode.positiveFlow
drain_Cathode.N_feed
drain_Cathode.heat_port[1].Q_flow
drain_Cathode.heat_port[2].Q_flow
drain_Cathode.feed[1].m_flow
drain_Cathode.feed[2].m_flow
drain_Cathode.drain.m_flow
drain_Cathode.pi
drain_Cathode.n_volumes
drain_Cathode.V_tot
drain_Cathode.Nusselt_nbr
drain_Cathode.pstart_out
drain_Cathode.volume[1].V
drain_Cathode.volume[1].der(V)
drain_Cathode.volume[1].initOpt
drain_Cathode.volume[1].initFromEnthalpy
drain_Cathode.volume[1].p_start
drain_Cathode.volume[1].T_start
drain_Cathode.volume[1].h_start
drain_Cathode.volume[1].X_start[1]
drain_Cathode.volume[1].X_start[2]
drain_Cathode.volume[1].X_start[3]
drain_Cathode.volume[1].X_start[4]
drain_Cathode.volume[1].X_start[5]
drain_Cathode.volume[1].mXs_flow[1]
drain_Cathode.volume[1].mXs_flow[2]
drain_Cathode.volume[1].mXs_flow[3]
drain_Cathode.volume[1].mXs_flow[4]
drain_Cathode.volume[1].mXs_flow[5]
drain_Cathode.volume[1].Q_add
drain_Cathode.volume[1].m
drain_Cathode.volume[1].N
drain_Cathode.volume[1].port[3].m_flow
drain_Cathode.volume[1].port[3].X_outflow[1]
drain_Cathode.volume[1].port[3].X_outflow[2]
drain_Cathode.volume[1].port[3].X_outflow[3]
drain_Cathode.volume[1].port[3].X_outflow[4]
drain_Cathode.volume[1].port[3].X_outflow[5]
drain_Cathode.volume[1].thermalDynamics
drain_Cathode.volume[1].realTimeMode
drain_Cathode.volume[1].stepSize
drain_Cathode.volume[1].der_p_factor
drain_Cathode.volume[1].h_in
drain_Cathode.volume[1].X_in[1]
drain_Cathode.volume[1].X_in[2]
drain_Cathode.volume[1].X_in[3]
drain_Cathode.volume[1].X_in[4]
drain_Cathode.volume[1].X_in[5]
drain_Cathode.volume[1].state_in.p
drain_Cathode.volume[1].state_in.T
drain_Cathode.volume[1].state_in.X[1]
drain_Cathode.volume[1].state_in.X[2]
drain_Cathode.volume[1].state_in.X[3]
drain_Cathode.volume[1].state_in.X[4]
drain_Cathode.volume[1].state_in.X[5]
drain_Cathode.volume[1].state_default.p
drain_Cathode.volume[1].state_default.T
drain_Cathode.volume[1].state_default.X[1]
drain_Cathode.volume[1].state_default.X[2]
drain_Cathode.volume[1].state_default.X[3]
drain_Cathode.volume[1].state_default.X[4]
drain_Cathode.volume[1].state_default.X[5]
drain_Cathode.volume[1].m_flow_in[1]
drain_Cathode.volume[1].m_flow_in[2]
drain_Cathode.volume[1].m_flow_in[3]
drain_Cathode.volume[1].H_flow_in[1]
drain_Cathode.volume[1].H_flow_in[2]
drain_Cathode.volume[1].H_flow_in[3]
drain_Cathode.volume[1].MX_flow_in[1, 1]
drain_Cathode.volume[1].MX_flow_in[1, 2]
drain_Cathode.volume[1].MX_flow_in[1, 3]
drain_Cathode.volume[1].MX_flow_in[1, 4]
drain_Cathode.volume[1].MX_flow_in[1, 5]
drain_Cathode.volume[1].MX_flow_in[2, 1]
drain_Cathode.volume[1].MX_flow_in[2, 2]
drain_Cathode.volume[1].MX_flow_in[2, 3]
drain_Cathode.volume[1].MX_flow_in[2, 4]
drain_Cathode.volume[1].MX_flow_in[2, 5]
drain_Cathode.volume[1].MX_flow_in[3, 1]
drain_Cathode.volume[1].MX_flow_in[3, 2]
drain_Cathode.volume[1].MX_flow_in[3, 3]
drain_Cathode.volume[1].MX_flow_in[3, 4]
drain_Cathode.volume[1].MX_flow_in[3, 5]
drain_Cathode.volume[1].dE
drain_Cathode.volume[1].dMX[1]
drain_Cathode.volume[1].dMX[2]
drain_Cathode.volume[1].dMX[3]
drain_Cathode.volume[1].dMX[4]
drain_Cathode.volume[1].dMX[5]
drain_Cathode.volume[1].H_flow[1]
drain_Cathode.volume[1].H_flow[2]
drain_Cathode.volume[1].H_flow[3]
drain_Cathode.volume[1].MX_flow[1, 1]
drain_Cathode.volume[1].MX_flow[1, 2]
drain_Cathode.volume[1].MX_flow[1, 3]
drain_Cathode.volume[1].MX_flow[1, 4]
drain_Cathode.volume[1].MX_flow[1, 5]
drain_Cathode.volume[1].MX_flow[2, 1]
drain_Cathode.volume[1].MX_flow[2, 2]
drain_Cathode.volume[1].MX_flow[2, 3]
drain_Cathode.volume[1].MX_flow[2, 4]
drain_Cathode.volume[1].MX_flow[2, 5]
drain_Cathode.volume[1].MX_flow[3, 1]
drain_Cathode.volume[1].MX_flow[3, 2]
drain_Cathode.volume[1].MX_flow[3, 3]
drain_Cathode.volume[1].MX_flow[3, 4]
drain_Cathode.volume[1].MX_flow[3, 5]
drain_Cathode.volume[1].M
drain_Cathode.volume[1].fluid.quasiStatic
drain_Cathode.volume[1].fluid.thermalDynamics
drain_Cathode.volume[1].fluid.realTimeMode
drain_Cathode.volume[1].fluid.stepSize
drain_Cathode.volume[1].fluid.der_p_factor
drain_Cathode.volume[1].fluid.initOpt
drain_Cathode.volume[1].fluid.T_start
drain_Cathode.volume[1].fluid.p_start
drain_Cathode.volume[1].fluid.h_start
drain_Cathode.volume[1].fluid.X_start[1]
drain_Cathode.volume[1].fluid.X_start[2]
drain_Cathode.volume[1].fluid.X_start[3]
drain_Cathode.volume[1].fluid.X_start[4]
drain_Cathode.volume[1].fluid.X_start[5]
drain_Cathode.volume[1].fluid.ns
drain_Cathode.volume[1].fluid.nC
drain_Cathode.volume[1].fluid.V_tot
drain_Cathode.volume[1].fluid.der(V_tot)
drain_Cathode.volume[1].fluid.p
drain_Cathode.volume[1].fluid.der(p)
drain_Cathode.volume[1].fluid.d
drain_Cathode.volume[1].fluid.T
drain_Cathode.volume[1].fluid.der(T)
drain_Cathode.volume[1].fluid.X[1]
drain_Cathode.volume[1].fluid.der(X[1])
drain_Cathode.volume[1].fluid.X[2]
drain_Cathode.volume[1].fluid.der(X[2])
drain_Cathode.volume[1].fluid.X[3]
drain_Cathode.volume[1].fluid.der(X[3])
drain_Cathode.volume[1].fluid.X[4]
drain_Cathode.volume[1].fluid.der(X[4])
drain_Cathode.volume[1].fluid.X[5]
drain_Cathode.volume[1].fluid.state.p
drain_Cathode.volume[1].fluid.state.T
drain_Cathode.volume[1].fluid.state.X[1]
drain_Cathode.volume[1].fluid.state.X[2]
drain_Cathode.volume[1].fluid.state.X[3]
drain_Cathode.volume[1].fluid.state.X[4]
drain_Cathode.volume[1].fluid.state.X[5]
drain_Cathode.volume[1].fluid.u
drain_Cathode.volume[1].fluid.v
drain_Cathode.volume[1].fluid.MX[1]
drain_Cathode.volume[1].fluid.MX[2]
drain_Cathode.volume[1].fluid.MX[3]
drain_Cathode.volume[1].fluid.MX[4]
drain_Cathode.volume[1].fluid.MX[5]
drain_Cathode.volume[1].fluid.M
drain_Cathode.volume[1].fluid.E
drain_Cathode.volume[1].fluid.R
drain_Cathode.volume[1].fluid.dM
drain_Cathode.volume[1].fluid.dX[5]
drain_Cathode.volume[1].fluid.R_g[1]
drain_Cathode.volume[1].fluid.R_g[2]
drain_Cathode.volume[1].fluid.R_g[3]
drain_Cathode.volume[1].fluid.R_g[4]
drain_Cathode.volume[1].fluid.R_g[5]
drain_Cathode.volume[1].fluid.dd
drain_Cathode.volume[1].fluid.dv
drain_Cathode.volume[1].fluid.du
drain_Cathode.volume[1].fluid.du_dX[1]
drain_Cathode.volume[1].fluid.du_dX[2]
drain_Cathode.volume[1].fluid.du_dX[3]
drain_Cathode.volume[1].fluid.du_dX[4]
drain_Cathode.volume[1].fluid.du_dX[5]
drain_Cathode.volume[1].usePositiveFlow
drain_Cathode.volume[1].positiveFlow[1]
drain_Cathode.volume[1].positiveFlow[2]
drain_Cathode.volume[1].positiveFlow[3]
drain_Cathode.volume[1].summary.V
drain_Cathode.basicHeatTransfer.n
drain_Cathode.basicHeatTransfer.Aheatloss
drain_Cathode.basicHeatTransfer.kc
drain_Cathode.basicHeatTransfer.infiniteHT
drain_Cathode.basicHeatTransfer.variableKc
drain_Cathode.frictionLoss.portA.m_flow
drain_Cathode.frictionLoss.portB.m_flow
drain_Cathode.frictionLoss.portB.X_outflow[1]
drain_Cathode.frictionLoss.portB.X_outflow[2]
drain_Cathode.frictionLoss.portB.X_outflow[3]
drain_Cathode.frictionLoss.portB.X_outflow[4]
drain_Cathode.frictionLoss.portB.X_outflow[5]
drain_Cathode.frictionLoss.T_start
drain_Cathode.frictionLoss.mflow_start
drain_Cathode.frictionLoss.positiveFlow
drain_Cathode.frictionLoss.dp_asState
drain_Cathode.frictionLoss.dp
drain_Cathode.frictionLoss.m_flow
drain_Cathode.frictionLoss.d
drain_Cathode.frictionLoss.state_in.p
drain_Cathode.frictionLoss.state_in.T
drain_Cathode.frictionLoss.state_in.X[1]
drain_Cathode.frictionLoss.state_in.X[2]
drain_Cathode.frictionLoss.state_in.X[3]
drain_Cathode.frictionLoss.state_in.X[4]
drain_Cathode.frictionLoss.state_in.X[5]
drain_Cathode.frictionLoss.stateB_in.p
drain_Cathode.frictionLoss.stateB_in.T
drain_Cathode.frictionLoss.stateB_in.X[1]
drain_Cathode.frictionLoss.stateB_in.X[2]
drain_Cathode.frictionLoss.stateB_in.X[3]
drain_Cathode.frictionLoss.stateB_in.X[4]
drain_Cathode.frictionLoss.stateB_in.X[5]
drain_Cathode.frictionLoss.state_out.p
drain_Cathode.frictionLoss.state_out.T
drain_Cathode.frictionLoss.state_out.X[1]
drain_Cathode.frictionLoss.state_out.X[2]
drain_Cathode.frictionLoss.state_out.X[3]
drain_Cathode.frictionLoss.state_out.X[4]
drain_Cathode.frictionLoss.state_out.X[5]
drain_Cathode.frictionLoss.from_dp
drain_Cathode.frictionLoss.dp_smooth
drain_Cathode.frictionLoss.mflow_smooth
drain_Cathode.frictionLoss.dynamicModel
drain_Cathode.frictionLoss.T_mflow
drain_Cathode.frictionLoss.summary.m_flow
drain_Cathode.frictionLoss.summary.V_flow
drain_Cathode.frictionLoss.friction.from_dp
drain_Cathode.frictionLoss.friction.positiveFlow
drain_Cathode.frictionLoss.friction.dp_smooth
drain_Cathode.frictionLoss.friction.mflow_smooth
drain_Cathode.frictionLoss.friction.useFixedDensity
drain_Cathode.frictionLoss.friction.reference_d
drain_Cathode.frictionLoss.friction.stateA_inflow.X[1]
drain_Cathode.frictionLoss.friction.stateA_inflow.X[2]
drain_Cathode.frictionLoss.friction.stateA_inflow.X[3]
drain_Cathode.frictionLoss.friction.stateA_inflow.X[4]
drain_Cathode.frictionLoss.friction.stateA_inflow.X[5]
drain_Cathode.frictionLoss.friction.stateB_inflow.X[1]
drain_Cathode.frictionLoss.friction.stateB_inflow.X[2]
drain_Cathode.frictionLoss.friction.stateB_inflow.X[3]
drain_Cathode.frictionLoss.friction.stateB_inflow.X[4]
drain_Cathode.frictionLoss.friction.stateB_inflow.X[5]
drain_Cathode.frictionLoss.friction.m_flow
drain_Cathode.frictionLoss.friction.dA
drain_Cathode.frictionLoss.friction.dB
drain_Cathode.frictionLoss.friction.d0
drain_Cathode.frictionLoss.friction.dp0
drain_Cathode.frictionLoss.friction.m_flow0
drain_Cathode.summary.nbr
drain_Cathode.summary.V_tot
drain_Cathode.summary.m_flow_out
drain_Cathode.summary.dp[1]
drain_Cathode.summary.dp[2]
drain_Cathode.lambda_fluid
drain_Cathode.width
drain_Cathode.depth
drain_Cathode.pstart[1]
drain_Cathode.Dhyd
drain_Cathode.thermalCollector.m
drain_Cathode.thermalCollector.port_b.Q_flow
pin_p.v
pin_p.i
pin_n.v
pin_n.i
feed_cath.m_flow
feed_cath.h_outflow
feed_an.m_flow
feed_an.h_outflow
drain_cath.m_flow
drain_cath.h_outflow
drain_an.p
drain_an.m_flow
drain_an.h_outflow
stackHeatLosses.N
stackHeatLosses.nbr
stackHeatLosses.A_topWall
stackHeatLosses.A_bottomWall
stackHeatLosses.A_sideWall
stackHeatLosses.h_conv_top
stackHeatLosses.h_conv_side
stackHeatLosses.e_top
stackHeatLosses.e_side
stackHeatLosses.k_insul
stackHeatLosses.dl_topInsul
stackHeatLosses.dl_bottomInsul
stackHeatLosses.dl_sideInsul
stackHeatLosses.environment.Q_flow
stackHeatLosses.leftWall[1].Q_flow
stackHeatLosses.leftWall[2].Q_flow
stackHeatLosses.rightWall[1].Q_flow
stackHeatLosses.rightWall[2].Q_flow
stackHeatLosses.summary.environment_Q
stackHeatLosses.thermalCollector.m
stackHeatLosses.thermalCollector.port_a[1].Q_flow
stackHeatLosses.thermalCollector.port_a[2].Q_flow
stackHeatLosses.thermalCollector.port_a[4].Q_flow
stackHeatLosses.thermalCollector.port_a[5].Q_flow
stackHeatLosses.thermalCollector.port_a[6].Q_flow
stackHeatLosses.thermalCollector.port_a[7].Q_flow
stackHeatLosses.thermalCollector.port_a[8].Q_flow
stackHeatLosses.thermalCollector.port_a[9].Q_flow
stackHeatLosses.thermalCollector.port_a[10].Q_flow
stackHeatLosses.thermalCollector.port_a[11].Q_flow
stackHeatLosses.thermalCollector.port_b.Q_flow
stackHeatLosses.topConvection[1].dT
stackHeatLosses.topConvectionCoeff[1].k
stackHeatLosses.topRadiation[1].dT
stackHeatLosses.topRadiation[1].Gr
stackHeatLosses.rightRadiation[1].dT
stackHeatLosses.rightRadiation[1].Gr
stackHeatLosses.rightRadiation[2].dT
stackHeatLosses.rightRadiation[2].Gr
stackHeatLosses.rightConvectionCoeff[1].k
stackHeatLosses.rightConvectionCoeff[2].k
stackHeatLosses.rightConvection[1].dT
stackHeatLosses.rightConvection[2].dT
stackHeatLosses.leftRadiation[1].dT
stackHeatLosses.leftRadiation[1].Gr
stackHeatLosses.leftRadiation[2].dT
stackHeatLosses.leftRadiation[2].Gr
stackHeatLosses.leftConvection[1].dT
stackHeatLosses.leftConvection[2].dT
stackHeatLosses.leftConvectionCoeff[1].k
stackHeatLosses.leftConvectionCoeff[2].k
stackHeatLosses.bottomConduction[1].dT
stackHeatLosses.bottomConduction[1].G
heat_port.T
heat_port.Q_flow
fuel_in
fuel_used
utilization
ref[1]
ref[2]
ground.p.v
ground.p.i
subStack[1].anode_channel.channel.q[1].Q_flow
subStack[1].cathode_channel.channel.q[1].Q_flow
subStack[2].anode_channel.channel.q[1].Q_flow
subStack[2].cathode_channel.channel.q[1].Q_flow

double initialValue(4842,6)
  0       1                       1                 1.0000000000000000E+100
  6   258   # N
  0       2                       2                 1.0000000000000000E+100
  6   258   # nbrSubStacks
 -1       1                       0                       0                
  1   282   # n_cell[1]
 -1       1                       0                       0                
  1   282   # n_cell[2]
  0  3.6100000000000000E-02       0                       0                
  6   256   # A_cell
 -1     500                       0                       0                
  1   280   # Cp_cell
 -1     250                       0                       0                
  1   280   # kc_cell
 -1       1                       0                 1.0000000000000000E+100
  1   280   # M_stack
 -1  1.0000000000000000E-02       0                       0                
  1   280   # A_top
 -1     200                       0                       0                
  1   280   # h_top
 -1  1.0000000000000000E-02       0                       0                
  1   280   # dp_top
 -1      12                       0                       0                
  1   280   # h_conv_top
 -1  4.0000000000000001E-02       0                       0                
  1   280   # e_top
 -1  1.0000000000000000E-02       0                       0                
  1   280   # A_bottom
 -1     200                       0                       0                
  1   280   # h_bottom
 -1  1.0000000000000000E-02       0                       0                
  1   280   # dp_bottom
 -1  5.0000000000000000E-01       0                       0                
  1   280   # A_side
 -1       5                       0                       0                
  1   280   # h_conv_side
 -1  4.0000000000000001E-02       0                       0                
  1   280   # e_side
 -1  4.0000000000000001E-02       0                       0                
  1   280   # k_insul
 -1  2.0000000000000000E-02       0                       0                
  1   280   # dl_topInsul
 -1  2.0000000000000000E-02       0                       0                
  1   280   # dl_bottomInsul
 -1  2.0000000000000000E-02       0                       0                
  1   280   # dl_sideInsul
  0       1                       1                 1.0000000000000000E+100
  6   258   # n
 -1       1                       1                       5                
  1   282   # initOpt_anode
 -1  100000                       0                       0                
  1   280   # p_start_in_anode
 -1  100000                       0                       0                
  1   280   # p_start_out_anode
  0       0                       0                       0                
  6   256   # p_start_anode[1]
  0       0                       0                       0                
  6   256   # p_start_anode[2]
 -1       0                       0                       0                
  1   281   # initFromEnthalpy_anode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # h_start_in_anode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # h_start_out_anode
  0       0                       0                       0                
  6   256   # h_start_anode[1]
  0       0                       0                       0                
  6   256   # h_start_anode[2]
 -1  2.9814999999999998E+02       0                 1.0000000000000000E+100
  1   280   # T_start_in_anode
 -1  2.9814999999999998E+02       0                 1.0000000000000000E+100
  1   280   # T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # T_start_anode[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # X_start_anode[7]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Hf
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.Tlimit
  0  4.0783232100000001E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[1]
  0 -8.0091860399999996E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[2]
  0  8.2147020099999999E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[3]
  0 -1.2697144570000001E-02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[4]
  0  1.7536050760000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[5]
  0 -1.2028602700000000E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[6]
  0  3.3680934900000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.alow[7]
  0  2.6824846649999999E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[1]
  0 -3.0437888439999998E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.blow[2]
  0  5.6081280099999998E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[1]
  0 -8.3715047400000003E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[2]
  0  2.9753645320000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[3]
  0  1.2522491239999999E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[4]
  0 -3.7407161900000001E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[5]
  0  5.9366252000000005E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[6]
  0 -3.6069940999999999E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.ahigh[7]
  0  5.3398244100000002E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[1]
  0 -2.2027747689999999E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.bhigh[2]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2.R
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.MM
  0 -4.6501596388583798E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Hf
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.Tlimit
  0 -1.7668509980000000E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[1]
  0  2.7861810200000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[2]
  0 -1.2025778499999999E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[3]
  0  3.9176192899999997E-02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[4]
  0 -3.6190544300000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[5]
  0  2.0268530430000001E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[6]
  0 -4.9767054899999986E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.alow[7]
  0 -2.3313143599999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[1]
  0  8.9043227500000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.blow[2]
  0  3.7300427599999998E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[1]
  0 -1.3835014850000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[2]
  0  2.0491070910000001E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[3]
  0 -1.9619747590000000E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[4]
  0  4.7273130399999999E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[5]
  0 -3.7288146900000001E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[6]
  0  1.6237372070000000E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.ahigh[7]
  0  7.5320669099999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[1]
  0 -1.2191248890000000E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.bhigh[2]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CH4.R
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.MM
  0 -3.9462620983145358E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Hf
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.Tlimit
  0  1.4890453260000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[1]
  0 -2.9222859390000002E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[2]
  0  5.7245271700000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[3]
  0 -8.1762350300000012E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[4]
  0  1.4569034690000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[5]
  0 -1.0877463020000000E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[6]
  0  3.0279418269999999E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.alow[7]
  0 -1.3031318780000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[1]
  0 -7.8592413499999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.blow[2]
  0  4.6191972499999998E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[1]
  0 -1.9447048629999999E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[2]
  0  5.9167141799999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[3]
  0 -5.6642828300000007E-04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[4]
  0  1.3988145400000001E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[5]
  0 -1.7876803610000000E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[6]
  0  9.6209355700000001E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.ahigh[7]
  0 -2.4662610840000002E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[1]
  0 -1.3874131080000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.bhigh[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO.R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.CO2.R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.H2O.R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.N2.R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.O2.R
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].Hf
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].Tlimit
  0  4.0783232100000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[1]
  0 -8.0091860399999996E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[2]
  0  8.2147020099999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[3]
  0 -1.2697144570000001E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[4]
  0  1.7536050760000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[5]
  0 -1.2028602700000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[6]
  0  3.3680934900000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].alow[7]
  0  2.6824846649999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].blow[1]
  0 -3.0437888439999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].blow[2]
  0  5.6081280099999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[1]
  0 -8.3715047400000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[2]
  0  2.9753645320000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[3]
  0  1.2522491239999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[4]
  0 -3.7407161900000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[5]
  0  5.9366252000000005E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[6]
  0 -3.6069940999999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].ahigh[7]
  0  5.3398244100000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].bhigh[1]
  0 -2.2027747689999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].bhigh[2]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[1].R
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].MM
  0 -4.6501596388583798E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].Hf
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].Tlimit
  0 -1.7668509980000000E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[1]
  0  2.7861810200000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[2]
  0 -1.2025778499999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[3]
  0  3.9176192899999997E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[4]
  0 -3.6190544300000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[5]
  0  2.0268530430000001E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[6]
  0 -4.9767054899999986E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].alow[7]
  0 -2.3313143599999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].blow[1]
  0  8.9043227500000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].blow[2]
  0  3.7300427599999998E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[1]
  0 -1.3835014850000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[2]
  0  2.0491070910000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[3]
  0 -1.9619747590000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[4]
  0  4.7273130399999999E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[5]
  0 -3.7288146900000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[6]
  0  1.6237372070000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].ahigh[7]
  0  7.5320669099999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].bhigh[1]
  0 -1.2191248890000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].bhigh[2]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[2].R
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].MM
  0 -3.9462620983145358E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].Hf
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].Tlimit
  0  1.4890453260000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[1]
  0 -2.9222859390000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[2]
  0  5.7245271700000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[3]
  0 -8.1762350300000012E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[4]
  0  1.4569034690000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[5]
  0 -1.0877463020000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[6]
  0  3.0279418269999999E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].alow[7]
  0 -1.3031318780000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].blow[1]
  0 -7.8592413499999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].blow[2]
  0  4.6191972499999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[1]
  0 -1.9447048629999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[2]
  0  5.9167141799999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[3]
  0 -5.6642828300000007E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[4]
  0  1.3988145400000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[5]
  0 -1.7876803610000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[6]
  0  9.6209355700000001E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].ahigh[7]
  0 -2.4662610840000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].bhigh[1]
  0 -1.3874131080000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].bhigh[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[3].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[4].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[5].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[6].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data[7].R
 -1  1.0000000000000001E-01       0                       0                
  1   280   # m_flow_start_anode
 -1       1                       1                       5                
  1   282   # initOpt_cathode
 -1  100000                       0                       0                
  1   280   # p_start_in_cathode
 -1  100000                       0                       0                
  1   280   # p_start_out_cathode
  0       0                       0                       0                
  6   256   # p_start_cathode[1]
  0       0                       0                       0                
  6   256   # p_start_cathode[2]
 -1       0                       0                       0                
  1   281   # initFromEnthalpy_cathode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # h_start_in_cathode
 -1  3.0000000000000000E+05       0                       0                
  1   280   # h_start_out_cathode
  0       0                       0                       0                
  6   256   # h_start_cathode[1]
  0       0                       0                       0                
  6   256   # h_start_cathode[2]
 -1  2.9814999999999998E+02       0                 1.0000000000000000E+100
  1   280   # T_start_in_cathode
 -1  2.9814999999999998E+02       0                 1.0000000000000000E+100
  1   280   # T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # T_start_cathode[2]
  0       0                       0                       1                
  6   256   # X_start_cathode[1]
  0       0                       0                       1                
  6   256   # X_start_cathode[2]
  0       0                       0                       1                
  6   256   # X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # X_start_cathode[5]
 -1  1.0000000000000001E-01       0                       0                
  1   280   # m_flow_start_cathode
 -1      10                       0                       0                
  1   280   # dp_smooth
 -1  1.0000000000000000E-04       0                       0                
  1   280   # mflow_smooth
 -1       1                       0                       0                
  1   281   # from_dp_anode
  0       0                       0                       0                
  6   257   # positiveFlow_anode
 -1       0                       0                       0                
  1   281   # generateEventForReversal_anode
 -1       1                       0                       0                
  1   281   # from_dp_cathode
  0       0                       0                       0                
  6   257   # positiveFlow_cathode
 -1       0                       0                       0                
  1   281   # generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # useHeatTransfer_cathode
 -1    5000                       0                       0                
  1   280   # dp_start_anode
 -1    5000                       0                       0                
  1   280   # dp_start_cathode
  0       0                       0                       0                
  6   256   # splitRatio_an[1]
  0       0                       0                       0                
  6   256   # splitRatio_an[2]
  0       0                       0                       0                
  6   256   # splitRatio_cath[1]
  0       0                       0                       0                
  6   256   # splitRatio_cath[2]
 -1  1.0000000000000000E-03       0                       0                
  1   280   # V_manifold_an
 -1  1.0000000000000000E-03       0                       0                
  1   280   # V_manifold_cath
  0       0                       0                 1.0000000000000000E+100
  6   256   # height
 -1  2.9999999999999999E-02       0                       0                
  1   280   # thickness_cell
 -1  1.0000000000000000E-02       0                       0                
  1   280   # wallthickness
 -1  4.0000000000000001E-02  3.6100000000000000E-02 1.0000000000000000E+100
  1   280   # A_cell_tot
 -1  1.0000000000000000E-03       0                       0                
  1   280   # m_flow_nom_an
 -1  1.0000000000000000E-03       0                       0                
  1   280   # m_flow_nom_cath
  0       1                       1                 1.0000000000000000E+100
  6   258   # heat[1].n
  0  3.6100000000000000E-02       0                       0                
  6   256   # heat[1].Aheatloss
  0       0                       0                       0                
  6   256   # heat[1].kc
  0       0                       0                       0                
  6   257   # heat[1].infiniteHT
  0       0                       0                       0                
  6   257   # heat[1].variableKc
  0       1                       0                       0                
  6   256   # heat[1].Q_s[1]
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].N
  0       7                       0                       0                
  6   258   # subStack[1].nX_an
  0       5                       0                       0                
  6   258   # subStack[1].nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # subStack[1].A_cell
  0       0                       0                       0                
  6   256   # subStack[1].kc
  0       0                       0                       0                
  6   257   # subStack[1].includeCellConduction
 -1      20                       0                       0                
  1   280   # subStack[1].lambda_cell
 -1  3.6000000000000001E-05       0                       0                
  1   280   # subStack[1].A_crosssection_cell
 -1  1.4999999999999999E-01       0                       0                
  1   280   # subStack[1].length_cell
  0       0                       0                       0                
  6   256   # subStack[1].G_cell
  0       0                       0                       0                
  6   258   # subStack[1].n_cell
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].M_cell
  0       0                       0                       0                
  6   256   # subStack[1].Cp_cell
  0       0                       0                       0                
  6   257   # subStack[1].addProxToAnode
  0       0                       0                       0                
  6   256   # subStack[1].P_stack
  0       0                       0                       1                
  6   256   # subStack[1].anode_stoich
  0       0                       0                       1                
  6   256   # subStack[1].cathode_stoich
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].cell.N
  0       7                       0                       0                
  6   258   # subStack[1].cell.nX_an
  0       5                       0                       0                
  6   258   # subStack[1].cell.nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # subStack[1].cell.A_cell
  0       0                       0                       0                
  6   258   # subStack[1].cell.n_cell
  0       0                       0                       0                
  6   256   # subStack[1].cell.MCp_cell
  0       0                       0                       0                
  6   256   # subStack[1].cell.kc
  0       0                       0                       0                
  6   256   # subStack[1].cell.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].cell.Tstart
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].cell.T_cell[1]
  0       0                       0                       0                
  3   256   # subStack[1].cell.der(T_cell[1])
  0       0                       0                       0                
  6   256   # subStack[1].cell.P_total
  0       0                       0                       0                
  6   256   # subStack[1].cell.Q_cell[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.j_External
  0       0                       0                       0                
  6   257   # subStack[1].cell.T_from_h
  0       0                       0                       0                
  6   388   # subStack[1].cell.wall_an[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[1].cell.wall_cath[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[1].cell.pin_p.i
  0       0                       0                       0                
  6   388   # subStack[1].cell.pin_n.i
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].H_flow
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[1]
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[2]
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[3]
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[4]
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[5]
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[6]
  0       0                       0                       1                
  6   260   # subStack[1].cell.port_an[1].X[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_an[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cell.port_cath[1].mX_flow[5]
  0       0                       0                   10000                
  6  1280   # subStack[1].cell.T_an[1]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[1].cell.state_an[1].p
  0     300                       0                   10000                
  6  1280   # subStack[1].cell.state_an[1].T
  0     300                       0                   10000                
  6  1280   # subStack[1].cell.state_cath[1].T
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[5]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[6]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].X[7]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].Hf
  0  4.2006974621505244E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].Tlimit
  0  4.0783232100000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[1]
  0 -8.0091860399999996E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[2]
  0  8.2147020099999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[3]
  0 -1.2697144570000001E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[4]
  0  1.7536050760000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[5]
  0 -1.2028602700000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[6]
  0  3.3680934900000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].alow[7]
  0  2.6824846649999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].blow[1]
  0 -3.0437888439999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].blow[2]
  0  5.6081280099999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[1]
  0 -8.3715047400000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[2]
  0  2.9753645320000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[3]
  0  1.2522491239999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[4]
  0 -3.7407161900000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[5]
  0  5.9366252000000005E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[6]
  0 -3.6069940999999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].ahigh[7]
  0  5.3398244100000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].bhigh[1]
  0 -2.2027747689999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].bhigh[2]
  0  4.1244875687044860E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[1].R
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].MM
  0 -4.6501596388583798E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].Hf
  0  6.2435574095244741E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].Tlimit
  0 -1.7668509980000000E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[1]
  0  2.7861810200000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[2]
  0 -1.2025778499999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[3]
  0  3.9176192899999997E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[4]
  0 -3.6190544300000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[5]
  0  2.0268530430000001E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[6]
  0 -4.9767054899999986E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].alow[7]
  0 -2.3313143599999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].blow[1]
  0  8.9043227500000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].blow[2]
  0  3.7300427599999998E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[1]
  0 -1.3835014850000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[2]
  0  2.0491070910000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[3]
  0 -1.9619747590000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[4]
  0  4.7273130399999999E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[5]
  0 -3.7288146900000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[6]
  0  1.6237372070000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].ahigh[7]
  0  7.5320669099999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].bhigh[1]
  0 -1.2191248890000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].bhigh[2]
  0  5.1827911679380850E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[2].R
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].MM
  0 -3.9462620983145358E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].Hf
  0  3.0957061916951381E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].Tlimit
  0  1.4890453260000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[1]
  0 -2.9222859390000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[2]
  0  5.7245271700000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[3]
  0 -8.1762350300000012E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[4]
  0  1.4569034690000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[5]
  0 -1.0877463020000000E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[6]
  0  3.0279418269999999E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].alow[7]
  0 -1.3031318780000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].blow[1]
  0 -7.8592413499999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].blow[2]
  0  4.6191972499999998E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[1]
  0 -1.9447048629999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[2]
  0  5.9167141799999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[3]
  0 -5.6642828300000007E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[4]
  0  1.3988145400000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[5]
  0 -1.7876803610000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[6]
  0  9.6209355700000001E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].ahigh[7]
  0 -2.4662610840000002E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].bhigh[1]
  0 -1.3874131080000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].bhigh[2]
  0  2.9683835473632718E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[3].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[4].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[5].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[6].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAReformateLong.EquationsOfState.data_Unique10[7].R
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[5]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[6]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # subStack[1].cell.anode[1].MM
 -1       2                       1                       2                
  1  1306   # subStack[1].cell.anode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].state.p
  0     300                       0                   10000                
  6  1280   # subStack[1].cell.anode[1].state.T
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[5]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[6]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.anode[1].state.X[7]
  0       0                       0                       0                
  6  1281   # subStack[1].cell.anode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # subStack[1].cell.anode[1].T_degC
  0       0                       0                       0                
  6  1280   # subStack[1].cell.anode[1].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[1].cell.anode[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.anode[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.anode[1].g_formation[7]
  0       0                       0                       0                
  6  1280   # subStack[1].cell.anode[1].ddTp
  0       0                       0                       0                
  6  1280   # subStack[1].cell.anode[1].ddpT
  0       0                       0                       0                
  6  1280   # subStack[1].cell.anode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[1].cell.anode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.anode[1].ddx[7]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.cathode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # subStack[1].cell.cathode[1].MM
 -1       2                       1                       2                
  1  1306   # subStack[1].cell.cathode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].state.p
  0       0                       0                   10000                
  6  1280   # subStack[1].cell.cathode[1].state.T
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cell.cathode[1].state.X[5]
  0       0                       0                       0                
  6  1281   # subStack[1].cell.cathode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # subStack[1].cell.cathode[1].T_degC
  0       0                       0                       0                
  6  1280   # subStack[1].cell.cathode[1].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[1].cell.cathode[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[1].cell.cathode[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cell.cathode[1].g_formation[5]
  0       0                       0                       0                
  6  1280   # subStack[1].cell.cathode[1].ddTp
  0       0                       0                       0                
  6  1280   # subStack[1].cell.cathode[1].ddpT
  0       0                       0                       0                
  6  1280   # subStack[1].cell.cathode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[1].cell.cathode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.cathode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.cathode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.cathode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.cathode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[1].cell.cathode[1].ddx[5]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Hf
  0  1.5513737859216981E+05       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.Tlimit
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[1]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[2]
  0  2.5000000000000000E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[3]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[4]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[5]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[6]
  0       0                       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.alow[7]
  0 -7.4537500000000000E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[1]
  0  4.3796749100000003E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.blow[2]
  0  2.0105384749999999E+01       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[1]
  0 -5.9926610699999987E-02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[2]
  0  2.5000694010000002E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[3]
  0 -3.9921411600000003E-08       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[4]
  0  1.2052721400000000E-11       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[5]
  0 -1.8190155760000001E-15       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[6]
  0  1.0785766360000000E-19       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.ahigh[7]
  0 -7.4499396100000001E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[1]
  0  4.3791801100000001E+00       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.bhigh[2]
  0  2.0813237208370879E+02       0                       0                
  6  1280   # _GlobalScope.Modelon.Media.DataDefinitions.NasaData.Ar.R
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].Hf
  0  1.5513737859216981E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].Tlimit
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[1]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[2]
  0  2.5000000000000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[3]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[4]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[5]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[6]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].alow[7]
  0 -7.4537500000000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].blow[1]
  0  4.3796749100000003E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].blow[2]
  0  2.0105384749999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[1]
  0 -5.9926610699999987E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[2]
  0  2.5000694010000002E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[3]
  0 -3.9921411600000003E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[4]
  0  1.2052721400000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[5]
  0 -1.8190155760000001E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[6]
  0  1.0785766360000000E-19       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].ahigh[7]
  0 -7.4499396100000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].bhigh[1]
  0  4.3791801100000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].bhigh[2]
  0  2.0813237208370879E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[1].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[2].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[3].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[4].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data[5].R
  0       0                       0                       0                
  6  1280   # subStack[1].cell.der_T_cell[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.sum_Q_cell
  0       0                       0                       0                
  6   256   # subStack[1].cell.P_cell[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cell.j_Ionic[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.T_degC
  0       0                       0                       0                
  6   256   # subStack[1].cell.m_flowO2[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.m_flowH2[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.m_flowH2O[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 6]
  0       0                       0                       0                
  6   256   # subStack[1].cell.mXi_flow_an[1, 7]
  0       1                       0                       0                
  6   256   # subStack[1].cell.S_ionic[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.S_ionic[2]
  0       0                       0                       0                
  6   256   # subStack[1].cell.S_ionic[3]
  0       0                       0                       0                
  6   256   # subStack[1].cell.S_ionic[4]
  0      -1                       0                       0                
  6   256   # subStack[1].cell.S_ionic[5]
  0       0                       0                       0                
  6   256   # subStack[1].cell.S_ionic[6]
  0       0                       0                       0                
  6   256   # subStack[1].cell.S_ionic[7]
 -1  2.9000000000000000E-05       0                       0                
  1   280   # subStack[1].cell.ASR0
 -1  6.2715461151825861E+04       0                       0                
  1   280   # subStack[1].cell.Ea
 -1    1073                       0                 1.0000000000000000E+100
  1   280   # subStack[1].cell.T0
  0       0                       0                       0                
  6   256   # subStack[1].cell.V_nernst[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.r_Int[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.ASR[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.g_reaction[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.pH2[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.pH2O[1]
  0       0                       0                       0                
  6   256   # subStack[1].cell.pO2[1]
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # subStack[1].cell.internalRes[1].T_ref
 -1       0                       0                       0                
  1   280   # subStack[1].cell.internalRes[1].alpha
  0       0                       0                       0                
  6   256   # subStack[1].cell.internalRes[1].v
  0       0                       0                       0                
  6   256   # subStack[1].cell.internalRes[1].i
  0       0                       0                       0                
  6   388   # subStack[1].cell.internalRes[1].p.i
  0       0                       0                       0                
  6   388   # subStack[1].cell.internalRes[1].n.i
  0       0                       0                       0                
  6   769   # subStack[1].cell.internalRes[1].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].cell.internalRes[1].T
  0       0                       0                       0                
  6   256   # subStack[1].cell.internalRes[1].LossPower
  0       0                       0                       0                
  6   256   # subStack[1].cell.internalRes[1].R_actual
  0       0                       0                       0                
  6   388   # subStack[1].cell.sourceV[1].p.i
  0       0                       0                       0                
  6   388   # subStack[1].cell.sourceV[1].n.i
  0       0                       0                       0                
  6   256   # subStack[1].cell.sourceV[1].i
  0       1                       0                       0                
  6  1282   # subStack[1].cell.ref[1]
  0       5                       0                       0                
  6  1282   # subStack[1].cell.ref[2]
  0       5                       0                       0                
  6  1282   # subStack[1].cell.air[1]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[1]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[2]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[3]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[4]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX[5]
  0       0                       0                       0                
  6   388   # subStack[1].pin_p.i
  0       0                       0                       0                
  6   388   # subStack[1].pin_n.i
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # subStack[1].feed_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # subStack[1].feed_cathode.h_outflow
  0       0                       0                       0                
  6   388   # subStack[1].wall[1].Q_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # subStack[1].pi
 -1       1                       1                 1.0000000000000000E+100
  1   280   # subStack[1].n_channels_anode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # subStack[1].L_anode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # subStack[1].D_anode
  0       0                       0                       0                
  6   256   # subStack[1].Dhyd_anode
  0       0                       0                       0                
  6   256   # subStack[1].C_anode
  0       0                       0                       0                
  6   256   # subStack[1].A_anode
  0       0                       0                       0                
  6   256   # subStack[1].V_anode
  0       0                       0                       0                
  6   256   # subStack[1].A_heat_anode
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].n_channels_cathode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # subStack[1].L_cathode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # subStack[1].D_cathode
  0       0                       0                       0                
  6   256   # subStack[1].Dhyd_cathode
  0       0                       0                       0                
  6   256   # subStack[1].C_cathode
  0       0                       0                       0                
  6   256   # subStack[1].A_cathode
  0       0                       0                       0                
  6   256   # subStack[1].V_cathode
  0       0                       0                       0                
  6   256   # subStack[1].A_heat_cathode
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].n
  0       1                       1                       5                
  6   258   # subStack[1].initOpt_anode
  0       0                       0                       0                
  6   256   # subStack[1].p_start_in_anode
  0       0                       0                       0                
  6   256   # subStack[1].p_start_out_anode
  0       0                       0                       0                
  6   256   # subStack[1].p_start_anode[1]
  0       0                       0                       0                
  6   256   # subStack[1].p_start_anode[2]
  0       0                       0                       0                
  6   257   # subStack[1].initFromEnthalpy_anode
  0       0                       0                       0                
  6   256   # subStack[1].h_start_in_anode
  0       0                       0                       0                
  6   256   # subStack[1].h_start_out_anode
  0       0                       0                       0                
  6   256   # subStack[1].h_start_anode[1]
  0       0                       0                       0                
  6   256   # subStack[1].h_start_anode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_in_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_anode[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[1].X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[1].X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[1].X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[1].X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[1].X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[1].X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[1].X_start_anode[7]
  0       0                       0                       0                
  6   256   # subStack[1].m_flow_start_anode
  0       1                       1                       5                
  6   258   # subStack[1].initOpt_cathode
  0       0                       0                       0                
  6   256   # subStack[1].p_start_in_cathode
  0       0                       0                       0                
  6   256   # subStack[1].p_start_out_cathode
  0       0                       0                       0                
  6   256   # subStack[1].p_start_cathode[1]
  0       0                       0                       0                
  6   256   # subStack[1].p_start_cathode[2]
  0       0                       0                       0                
  6   257   # subStack[1].initFromEnthalpy_cathode
  0       0                       0                       0                
  6   256   # subStack[1].h_start_in_cathode
  0       0                       0                       0                
  6   256   # subStack[1].h_start_out_cathode
  0       0                       0                       0                
  6   256   # subStack[1].h_start_cathode[1]
  0       0                       0                       0                
  6   256   # subStack[1].h_start_cathode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_in_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].T_start_cathode[2]
  0       0                       0                       1                
  6   256   # subStack[1].X_start_cathode[1]
  0       0                       0                       1                
  6   256   # subStack[1].X_start_cathode[2]
  0       0                       0                       1                
  6   256   # subStack[1].X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[1].X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[1].X_start_cathode[5]
  0       0                       0                       0                
  6   256   # subStack[1].m_flow_start_cathode
  0       0                       0                       0                
  6   256   # subStack[1].dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[1].from_dp_anode
  0       0                       0                       0                
  6   257   # subStack[1].positiveFlow_anode
  0       0                       0                       0                
  6   257   # subStack[1].generateEventForReversal_anode
  0       0                       0                       0                
  6   257   # subStack[1].from_dp_cathode
  0       0                       0                       0                
  6   257   # subStack[1].positiveFlow_cathode
  0       0                       0                       0                
  6   257   # subStack[1].generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # subStack[1].useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # subStack[1].useHeatTransfer_cathode
 -1       1                       0                       0                
  1   280   # subStack[1].CF_AnodeSidePressureLoss
 -1       1                       0                       0                
  1   280   # subStack[1].CF_AnodeSideHeatTransfer
 -1       1                       0                       0                
  1   280   # subStack[1].CF_CathodePressureLoss
 -1       1                       0                       0                
  1   280   # subStack[1].CF_CathodeSideHeatTransfer
 -1     400                       0                 1.0000000000000000E+100
  1   280   # subStack[1].d0_prox
 -1     100                       0                       0                
  1   280   # subStack[1].dp0_prox
 -1  1.0000000000000001E-01       0                       0                
  1   280   # subStack[1].m_flow_nom_prox
  0       0                       0                       0                
  6   256   # subStack[1].anode_stoich_num
  0       0                       0                       0                
  6   256   # subStack[1].anode_stoich_den
  0       0                       0                       0                
  6   256   # subStack[1].cathode_stoich_num
  0       0                       0                       0                
  6   256   # subStack[1].cathode_stoich_den
  0       1                       0                       0                
  6   258   # subStack[1].summary.N
  0       0                       0                       0                
  6   258   # subStack[1].summary.n_cell
  0       0                       0                       0                
  6   256   # subStack[1].summary.P_stack
  0       0                       0                       0                
  6   256   # subStack[1].summary.j_external
  0       0                       0                       0                
  6   256   # subStack[1].summary.V_cell
  0       0                       0                       0                
  6   256   # subStack[1].summary.Q_stack
  0       0                       0                       0                
  6   256   # subStack[1].summary.dp_anode
  0       0                       0                       0                
  6   256   # subStack[1].summary.dp_cathode
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.summary.dp
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.summary.M
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.summary.der(M)
  0     300                       0                   10000                
  6   288   # subStack[1].anode_channel.summary.T_in
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.summary.d_in
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].anode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # subStack[1].anode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.n_channels
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.L
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.D
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.Dhyd
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.A
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.C
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.V
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.A_heat
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.useHeatTransfer
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].anode_channel.ni
  0       1                       1                       5                
  6   258   # subStack[1].anode_channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.T_start[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[1].anode_channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[1].anode_channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[1].anode_channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[1].anode_channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[1].anode_channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[1].anode_channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[1].anode_channel.X_start[7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # subStack[1].anode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # subStack[1].anode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # subStack[1].anode_channel.X_weight
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.y_sat
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # subStack[1].anode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # subStack[1].anode_channel.g
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].anode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.n_channels[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.A_heat[1]
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].anode_channel.channel.ni
  0       1                       1                       5                
  6   258   # subStack[1].anode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.T_start[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[1].anode_channel.channel.X_start[7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # subStack[1].anode_channel.channel.NA
  0       1                       0                       0                
  6   258   # subStack[1].anode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # subStack[1].anode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.der(T[1])
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # subStack[1].anode_channel.channel.frictionDistribution
  0       1                       0                       0                
  6   258   # subStack[1].anode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.g
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.friction[1].n_channels
  0       1                  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[1].anode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[1].anode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # subStack[1].anode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # subStack[1].anode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.friction[1].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # subStack[1].anode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.friction[1].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # subStack[1].anode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # subStack[1].anode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # subStack[1].anode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.htcoeff[1].Dhyd
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.htcoeff[1].m_flow
  0       1                       0                       0                
  6   257   # subStack[1].anode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # subStack[1].anode_channel.channel.htcoeff[1].alpha
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].anode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Q[1]
  0       3                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 1]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 2]
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 4]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[1, 7]
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 2]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 3]
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 4]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_reac[2, 7]
  0       2                       0                       0                
  6   258   # subStack[1].anode_channel.channel.reaction.n_reac
  0       2                       0                       0                
  6   258   # subStack[1].anode_channel.channel.reaction.comp[1]
  0       5                       0                       0                
  6   258   # subStack[1].anode_channel.channel.reaction.comp[2]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.reaction.Tstart
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[1].anode_channel.channel.reaction.Xstart[7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # subStack[1].anode_channel.channel.reaction.scale
  0  2.0158799999999998E-03  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[1]
  0  1.6042460000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[2]
  0  2.8010100000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[3]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[4]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[5]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[6]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.reaction.MMX[7]
  0  1.7558759618000002E-02       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.der(MM[1])
  0  2.7660000000000001E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[1]
  0  1.6960000000000000E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[2]
  0  1.7999999999999999E-02       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[3]
  0  7.3300000000000004E-02       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[4]
  0  2.4530000000000002E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[5]
  0  2.0549999999999999E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[6]
  0  1.1700000000000000E-02       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.y_start[7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_start[7]
  0  100000                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.pref
  0 -5.5814782422670817E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_y_out[1, 7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.log10_eq_reac[1, 2]
  0  3.7697709702875987E-01       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 1]
  0      -1                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 2]
  0  1.7459978083161807E+00       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 4]
  0 -1.1229749053449409E+00       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 6]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[1, 7]
  0  1.1189834407236522E-01       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 1]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 2]
  0 -1.5547968169242996E+00       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 3]
  0  2.4428984728519345E+00       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 4]
  0      -1                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 6]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.Sx_reac[2, 7]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[1]
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[2]
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[3]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[4]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[5]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[6]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique87[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_start[7]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # subStack[1].anode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # subStack[1].anode_channel.channel.reaction.Tscale
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.kEq_reac[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.kEq_reac[1, 2]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 6]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].anode_channel.channel.reaction.Zx[1, 7]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(Zx[1, 7])
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.Ztot[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_flow[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_flow[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_flow[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_flow[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_flow[1, 5]
 -1  1.0000000000000000E-02       0                       0                
  2   280   # subStack[1].anode_channel.channel.reaction.krate[1, 1]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(krate[1, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # subStack[1].anode_channel.channel.reaction.krate[1, 2]
  0       0                       0                       0                
  3   256   # subStack[1].anode_channel.channel.reaction.der(krate[1, 2])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.rZ[1, 7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_formation[1, 7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # subStack[1].anode_channel.channel.reaction.epsZ
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.e[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.e[1, 2]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[6]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.reaction.state[1].X[7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 6]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.deplZ[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 1]
  0      -1                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 4]
  0      -1                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 6]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 1]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 2]
  0      -1                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 3]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 4]
  0      -1                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 6]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.reactant[2, 7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.rate[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.reaction.rate[1, 2]
  0       3                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[1]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[2]
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[3]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[4]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_ref[7]
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[2]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[3]
  0       1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[4]
  0      -1                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.S_wgs[7]
  0       2                       0                       0                
  6   258   # subStack[1].anode_channel.channel.reaction.index[1]
  0       5                       0                       0                
  6   258   # subStack[1].anode_channel.channel.reaction.index[2]
  0  7.2314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.reaction.T_sat_for_WGS
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_rere[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.reaction.g_wgs[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].X[7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[5])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[6])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(X[7])
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].anode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # subStack[1].anode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].state.X[7]
  0       0                       0                       0                
  6   257   # subStack[1].anode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.gas[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].anode_channel.channel.gas[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.gas[1].g_formation[7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[1].anode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].anode_channel.channel.gas[1].ddx[7]
  0       0                       0                  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.p[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.E_seg[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].anode_channel.channel.MXi[1, 7]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.sh[1]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.state[2].p
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.state[2].T
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[2].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].anode_channel.channel.state[3].p
  0     300                       0                   10000                
  6   256   # subStack[1].anode_channel.channel.state[3].T
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[5]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[6]
  0       0                       0                       1                
  6   256   # subStack[1].anode_channel.channel.state[3].X[7]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   288   # subStack[1].anode_channel.channel.TB
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 6]
  0       0                       0                       0                
  6   256   # subStack[1].anode_channel.channel.rMX[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.mflow_B_in
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[6]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XA[7]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[5]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[6]
  0       0                       0                       1                
  6  1280   # subStack[1].anode_channel.channel.XB[7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.n_channels_fric[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # subStack[1].anode_channel.channel.T_wall[1]
  0       7                       0                       0                
  6  1282   # subStack[1].anode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[1, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.mX_flow[2, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.H_flow[2]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dE[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].anode_channel.channel.dMX[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dZ[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dZ[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dZ[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dZ[1, 4]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dZ[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.dUTZ[1]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # subStack[1].anode_channel.channel.Z[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 6])
  0       0                       0                       0                
  6  1280   # subStack[1].anode_channel.channel.der(Z[1, 7])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].anode_channel.port[1].mX_flow[7]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.summary.dp
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.summary.M
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.summary.der(M)
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.summary.d_in
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].cathode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # subStack[1].cathode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.n_channels
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.L
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.D
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.Dhyd
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.A
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.C
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.V
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.A_heat
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.useHeatTransfer
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].cathode_channel.ni
  0       1                       1                       5                
  6   258   # subStack[1].cathode_channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.T_start[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.X_start[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.X_start[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[1].cathode_channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[1].cathode_channel.X_start[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # subStack[1].cathode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # subStack[1].cathode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # subStack[1].cathode_channel.X_weight
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.y_sat
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # subStack[1].cathode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # subStack[1].cathode_channel.g
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].cathode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.n_channels[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.A_heat[1]
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].cathode_channel.channel.ni
  0       1                       1                       5                
  6   258   # subStack[1].cathode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.T_start[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.X_start[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.X_start[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[1].cathode_channel.channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[1].cathode_channel.channel.X_start[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # subStack[1].cathode_channel.channel.NA
  0       1                       0                       0                
  6   258   # subStack[1].cathode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # subStack[1].cathode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # subStack[1].cathode_channel.channel.der(T[1])
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # subStack[1].cathode_channel.channel.frictionDistribution
  0       1                       0                       0                
  6   258   # subStack[1].cathode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.g
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.friction[1].n_channels
  0       1                  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[1].cathode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[1].cathode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # subStack[1].cathode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # subStack[1].cathode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.friction[1].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # subStack[1].cathode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # subStack[1].cathode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # subStack[1].cathode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.htcoeff[1].Dhyd
  0       1                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # subStack[1].cathode_channel.channel.htcoeff[1].alpha
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[1].cathode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   258   # subStack[1].cathode_channel.channel.reaction.n_reac
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.channel.reaction.Tstart
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.reaction.Xstart[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.reaction.Xstart[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.reaction.Xstart[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[1].cathode_channel.channel.reaction.Xstart[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[1].cathode_channel.channel.reaction.Xstart[5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # subStack[1].cathode_channel.channel.reaction.scale
  0  3.9947999999999997E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].cathode_channel.channel.reaction.MMX[1]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].cathode_channel.channel.reaction.MMX[2]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].cathode_channel.channel.reaction.MMX[3]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].cathode_channel.channel.reaction.MMX[4]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].cathode_channel.channel.reaction.MMX[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.y_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.y_start[2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.y_start[3]
  0  7.9270802239664317E-01       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.y_start[4]
  0  2.0729197760335691E-01       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.y_start[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_start[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_start[2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_start[3]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_start[4]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_start[5]
  0  100000                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.pref
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.log10_y_out[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Zx_start[5]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # subStack[1].cathode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # subStack[1].cathode_channel.channel.reaction.Tscale
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].cathode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # subStack[1].cathode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].cathode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # subStack[1].cathode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].cathode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # subStack[1].cathode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].cathode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # subStack[1].cathode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[1].cathode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # subStack[1].cathode_channel.channel.reaction.der(Zx[1, 5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.reaction.Ztot[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.g_formation[1, 5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[1].cathode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # subStack[1].cathode_channel.channel.reaction.epsZ
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].X[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[1].cathode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # subStack[1].cathode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].state.X[5]
  0       0                       0                       0                
  6   257   # subStack[1].cathode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.gas[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[1].cathode_channel.channel.gas[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.gas[1].g_formation[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[1].cathode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[1].cathode_channel.channel.gas[1].ddx[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.E_seg[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[1].cathode_channel.channel.MXi[1, 5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.sh[1]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   288   # subStack[1].cathode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[1].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.state[2].p
  0     300                       0                   10000                
  6   256   # subStack[1].cathode_channel.channel.state[2].T
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[2].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[2].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[2].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[2].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[2].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[1].cathode_channel.channel.state[3].p
  0     300                       0                   10000                
  6   288   # subStack[1].cathode_channel.channel.state[3].T
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[3].X[1]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[3].X[2]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[3].X[3]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[3].X[4]
  0       0                       0                       1                
  6   256   # subStack[1].cathode_channel.channel.state[3].X[5]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # subStack[1].cathode_channel.channel.rMX[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.mflow_B_in
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.XB[5]
  0       1                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.n_channels_fric[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # subStack[1].cathode_channel.channel.T_wall[1]
  0       5                       0                       0                
  6  1282   # subStack[1].cathode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.H_flow[2]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.dE[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.dMX[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[1].cathode_channel.channel.dMX[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.dUTZ[1]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.Z[1, 1]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.Z[1, 2]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.Z[1, 3]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.Z[1, 4]
  0       0                       0                       1                
  6  1280   # subStack[1].cathode_channel.channel.Z[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # subStack[1].cathode_channel.channel.der(Z[1, 5])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[1].cathode_channel.port[1].mX_flow[5]
  0       1                       0                       0                
  6  1282   # subStack[1].ref[1]
  0       5                       0                       0                
  6  1282   # subStack[1].air[1]
  0  2.0158799999999998E-03       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[1]
  0  1.6042460000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[2]
  0  2.8010100000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[3]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[4]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[5]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[6]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique100[7]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[1]
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[2]
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[3]
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[4]
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.Modelon.Media.Templates.IdealGas.MMX_Unique102[5]
  0  3.9947999999999997E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].Hf
  0  1.5513737859216981E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].Tlimit
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[1]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[2]
  0  2.5000000000000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[3]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[4]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[5]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[6]
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].alow[7]
  0 -7.4537500000000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].blow[1]
  0  4.3796749100000003E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].blow[2]
  0  2.0105384749999999E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[1]
  0 -5.9926610699999987E-02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[2]
  0  2.5000694010000002E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[3]
  0 -3.9921411600000003E-08       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[4]
  0  1.2052721400000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[5]
  0 -1.8190155760000001E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[6]
  0  1.0785766360000000E-19       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].ahigh[7]
  0 -7.4499396100000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].bhigh[1]
  0  4.3791801100000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].bhigh[2]
  0  2.0813237208370879E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[1].R
  0  4.4009500000000000E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].MM
  0 -8.9414785444051847E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].Hf
  0  2.1280562151353681E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].Tlimit
  0  4.9436505400000002E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[1]
  0 -6.2641160100000002E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[2]
  0  5.3017252399999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[3]
  0  2.5038138159999999E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[4]
  0 -2.1273087280000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[5]
  0 -7.6899887800000002E-10       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[6]
  0  2.8496778010000001E-13       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].alow[7]
  0 -4.5281984600000003E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].blow[1]
  0 -7.0482794400000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].blow[2]
  0  1.1769624189999999E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[1]
  0 -1.7887914770000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[2]
  0  8.2915231899999995E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[3]
  0 -9.2231567800000002E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[4]
  0  4.8636768799999996E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[5]
  0 -1.8910533120000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[6]
  0  6.3300365899999994E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].ahigh[7]
  0 -3.9083505899999996E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].bhigh[1]
  0 -2.6526692810000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].bhigh[2]
  0  1.8892448221406741E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[2].R
  0  1.8015280000000002E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].MM
  0 -1.3423382817252910E+07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].Hf
  0  5.4976064762801351E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].Tlimit
  0 -3.9479608300000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[1]
  0  5.7557310199999995E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[2]
  0  9.3178265299999996E-01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[3]
  0  7.2227128600000001E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[4]
  0 -7.3425573700000000E-06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[5]
  0  4.9550434900000003E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[6]
  0 -1.3369332460000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].alow[7]
  0 -3.3039743100000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].blow[1]
  0  1.7242057750000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].blow[2]
  0  1.0349720960000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[1]
  0 -2.4126985620000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[2]
  0  4.6461107799999999E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[3]
  0  2.2919983070000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[4]
  0 -6.8368304799999993E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[5]
  0  9.4264689300000008E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[6]
  0 -4.8223805300000000E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].ahigh[7]
  0 -1.3842865089999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].bhigh[1]
  0 -7.9781485099999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].bhigh[2]
  0  4.6152332908508782E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[3].R
  0  2.8013400000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].Hf
  0  3.0949845431115112E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].Tlimit
  0  2.2103714970000001E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[1]
  0 -3.8184618200000000E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[2]
  0  6.0827383599999996E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[3]
  0 -8.5309144099999998E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[4]
  0  1.3846461890000000E-05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[5]
  0 -9.6257936199999997E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[6]
  0  2.5197058090000001E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].alow[7]
  0  7.1084608600000001E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].blow[1]
  0 -1.0760037440000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].blow[2]
  0  5.8771240599999996E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[1]
  0 -2.2392490730000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[2]
  0  6.0669492199999997E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[3]
  0 -6.1396854999999997E-04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[4]
  0  1.4918066790000001E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[5]
  0 -1.9231054850000001E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[6]
  0  1.0619543859999999E-15       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].ahigh[7]
  0  1.2832104149999999E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].bhigh[1]
  0 -1.5866400270000000E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].bhigh[2]
  0  2.9680338695053081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[4].R
  0  3.1998800000000001E-02       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].MM
  0       0                       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].Hf
  0  2.7126342237833922E+05       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].H0
  0    1000                       0                 1.0000000000000000E+100
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].Tlimit
  0 -3.4255634200000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[1]
  0  4.8470009700000003E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[2]
  0  1.1190109610000001E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[3]
  0  4.2938892400000003E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[4]
  0 -6.8363005199999996E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[5]
  0 -2.0233726999999998E-09       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[6]
  0  1.0390400180000000E-12       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].alow[7]
  0 -3.3914548700000000E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].blow[1]
  0  1.8496994699999998E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].blow[2]
  0 -1.0379390220000000E+06       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[1]
  0  2.3448302819999999E+03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[2]
  0  1.8197320360000000E+00       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[3]
  0  1.2678475820000000E-03       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[4]
  0 -2.1880679880000000E-07       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[5]
  0  2.0537195720000000E-11       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[6]
  0 -8.1934670500000009E-16       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].ahigh[7]
  0 -1.6890109290000000E+04       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].bhigh[1]
  0  1.7387165060000001E+01       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].bhigh[2]
  0  2.5983699388727081E+02       0                       0                
  6  1280   # _GlobalScope.FuelCell.Media.PreDefined.IdealGases.NASAMoistAir.EquationsOfState.data_Unique103[5].R
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].N
  0       7                       0                       0                
  6   258   # subStack[2].nX_an
  0       5                       0                       0                
  6   258   # subStack[2].nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # subStack[2].A_cell
  0       0                       0                       0                
  6   256   # subStack[2].kc
  0       0                       0                       0                
  6   257   # subStack[2].includeCellConduction
 -1      20                       0                       0                
  1   280   # subStack[2].lambda_cell
 -1  3.6000000000000001E-05       0                       0                
  1   280   # subStack[2].A_crosssection_cell
 -1  1.4999999999999999E-01       0                       0                
  1   280   # subStack[2].length_cell
  0       0                       0                       0                
  6   256   # subStack[2].G_cell
  0       0                       0                       0                
  6   258   # subStack[2].n_cell
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].M_cell
  0       0                       0                       0                
  6   256   # subStack[2].Cp_cell
  0       0                       0                       0                
  6   257   # subStack[2].addProxToAnode
  0       0                       0                       0                
  6   256   # subStack[2].P_stack
  0       0                       0                       1                
  6   256   # subStack[2].anode_stoich
  0       0                       0                       1                
  6   256   # subStack[2].cathode_stoich
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].cell.N
  0       7                       0                       0                
  6   258   # subStack[2].cell.nX_an
  0       5                       0                       0                
  6   258   # subStack[2].cell.nX_cath
  0  3.6100000000000000E-02       0                       0                
  6   256   # subStack[2].cell.A_cell
  0       0                       0                       0                
  6   258   # subStack[2].cell.n_cell
  0       0                       0                       0                
  6   256   # subStack[2].cell.MCp_cell
  0       0                       0                       0                
  6   256   # subStack[2].cell.kc
  0       0                       0                       0                
  6   256   # subStack[2].cell.pstart
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].cell.Tstart
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].cell.T_cell[1]
  0       0                       0                       0                
  3   256   # subStack[2].cell.der(T_cell[1])
  0       0                       0                       0                
  6   256   # subStack[2].cell.P_total
  0       0                       0                       0                
  6   256   # subStack[2].cell.Q_cell[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.j_External
  0       0                       0                       0                
  6   257   # subStack[2].cell.T_from_h
  0       0                       0                       0                
  6   388   # subStack[2].cell.wall_an[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[2].cell.wall_cath[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[2].cell.pin_p.i
  0       0                       0                       0                
  6   260   # subStack[2].cell.pin_n.v
  0       0                       0                       0                
  6   388   # subStack[2].cell.pin_n.i
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].H_flow
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[1]
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[2]
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[3]
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[4]
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[5]
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[6]
  0       0                       0                       1                
  6   260   # subStack[2].cell.port_an[1].X[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_an[1].mX_flow[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cell.port_cath[1].mX_flow[5]
  0       0                       0                   10000                
  6  1280   # subStack[2].cell.T_an[1]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[2].cell.state_an[1].p
  0     300                       0                   10000                
  6  1280   # subStack[2].cell.state_an[1].T
  0     300                       0                   10000                
  6  1280   # subStack[2].cell.state_cath[1].T
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[5]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[6]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].X[7]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[5]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[6]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # subStack[2].cell.anode[1].MM
 -1       2                       1                       2                
  1  1306   # subStack[2].cell.anode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].state.p
  0     300                       0                   10000                
  6  1280   # subStack[2].cell.anode[1].state.T
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[5]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[6]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.anode[1].state.X[7]
  0       0                       0                       0                
  6  1281   # subStack[2].cell.anode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # subStack[2].cell.anode[1].T_degC
  0       0                       0                       0                
  6  1280   # subStack[2].cell.anode[1].p_bar
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[1]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[2]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[3]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[4]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[5]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[6]
  0  1.4285714285714285E-01       0                       1                
  6  1280   # subStack[2].cell.anode[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.anode[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.anode[1].g_formation[7]
  0       0                       0                       0                
  6  1280   # subStack[2].cell.anode[1].ddTp
  0       0                       0                       0                
  6  1280   # subStack[2].cell.anode[1].ddpT
  0       0                       0                       0                
  6  1280   # subStack[2].cell.anode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[2].cell.anode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.anode[1].ddx[7]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].X[3]
  0  7.7000000000000002E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].X[4]
  0  2.3000000000000001E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].X[5]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.cathode[1].d
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].h
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].u
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].Rg
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6  1280   # subStack[2].cell.cathode[1].MM
 -1       2                       1                       2                
  1  1306   # subStack[2].cell.cathode[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].state.p
  0       0                       0                   10000                
  6  1280   # subStack[2].cell.cathode[1].state.T
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].state.X[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].state.X[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].state.X[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].state.X[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cell.cathode[1].state.X[5]
  0       0                       0                       0                
  6  1281   # subStack[2].cell.cathode[1].preferredMediumStates
  0       0                       0                       0                
  6  1280   # subStack[2].cell.cathode[1].T_degC
  0       0                       0                       0                
  6  1280   # subStack[2].cell.cathode[1].p_bar
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].Z[1]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].Z[2]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].Z[3]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].Z[4]
  0  2.0000000000000001E-01       0                       1                
  6  1280   # subStack[2].cell.cathode[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6  1280   # subStack[2].cell.cathode[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cell.cathode[1].g_formation[5]
  0       0                       0                       0                
  6  1280   # subStack[2].cell.cathode[1].ddTp
  0       0                       0                       0                
  6  1280   # subStack[2].cell.cathode[1].ddpT
  0       0                       0                       0                
  6  1280   # subStack[2].cell.cathode[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6  1280   # subStack[2].cell.cathode[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.cathode[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.cathode[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.cathode[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.cathode[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6  1280   # subStack[2].cell.cathode[1].ddx[5]
  0       0                       0                       0                
  6  1280   # subStack[2].cell.der_T_cell[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.sum_Q_cell
  0       0                       0                       0                
  6   256   # subStack[2].cell.P_cell[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cell.j_Ionic[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.T_degC
  0       0                       0                       0                
  6   256   # subStack[2].cell.m_flowO2[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.m_flowH2[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.m_flowH2O[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 6]
  0       0                       0                       0                
  6   256   # subStack[2].cell.mXi_flow_an[1, 7]
  0       1                       0                       0                
  6   256   # subStack[2].cell.S_ionic[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.S_ionic[2]
  0       0                       0                       0                
  6   256   # subStack[2].cell.S_ionic[3]
  0       0                       0                       0                
  6   256   # subStack[2].cell.S_ionic[4]
  0      -1                       0                       0                
  6   256   # subStack[2].cell.S_ionic[5]
  0       0                       0                       0                
  6   256   # subStack[2].cell.S_ionic[6]
  0       0                       0                       0                
  6   256   # subStack[2].cell.S_ionic[7]
 -1  2.9000000000000000E-05       0                       0                
  1   280   # subStack[2].cell.ASR0
 -1  6.2715461151825861E+04       0                       0                
  1   280   # subStack[2].cell.Ea
 -1    1073                       0                 1.0000000000000000E+100
  1   280   # subStack[2].cell.T0
  0       0                       0                       0                
  6   256   # subStack[2].cell.r_Int[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.ASR[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.g_reaction[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.pH2[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.pH2O[1]
  0       0                       0                       0                
  6   256   # subStack[2].cell.pO2[1]
 -1  3.0014999999999998E+02       0                 1.0000000000000000E+100
  1   280   # subStack[2].cell.internalRes[1].T_ref
 -1       0                       0                       0                
  1   280   # subStack[2].cell.internalRes[1].alpha
  0       0                       0                       0                
  6   256   # subStack[2].cell.internalRes[1].v
  0       0                       0                       0                
  6   256   # subStack[2].cell.internalRes[1].i
  0       0                       0                       0                
  6   388   # subStack[2].cell.internalRes[1].p.i
  0       0                       0                       0                
  6   388   # subStack[2].cell.internalRes[1].n.i
  0       0                       0                       0                
  6   769   # subStack[2].cell.internalRes[1].useHeatPort
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].cell.internalRes[1].T
  0       0                       0                       0                
  6   256   # subStack[2].cell.internalRes[1].LossPower
  0       0                       0                       0                
  6   256   # subStack[2].cell.internalRes[1].R_actual
  0       0                       0                       0                
  6   388   # subStack[2].cell.sourceV[1].p.i
  0       0                       0                       0                
  6   260   # subStack[2].cell.sourceV[1].n.v
  0       0                       0                       0                
  6   388   # subStack[2].cell.sourceV[1].n.i
  0       0                       0                       0                
  6   256   # subStack[2].cell.sourceV[1].i
  0       1                       0                       0                
  6  1282   # subStack[2].cell.ref[1]
  0       5                       0                       0                
  6  1282   # subStack[2].cell.ref[2]
  0       5                       0                       0                
  6  1282   # subStack[2].cell.air[1]
  0       0                       0                       0                
  6   388   # subStack[2].pin_p.i
  0       0                       0                       0                
  6   260   # subStack[2].pin_n.v
  0       0                       0                       0                
  6   388   # subStack[2].pin_n.i
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # subStack[2].feed_anode.h_outflow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # subStack[2].feed_cathode.h_outflow
  0       0                       0                       0                
  6   388   # subStack[2].wall[1].Q_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # subStack[2].pi
 -1       1                       1                 1.0000000000000000E+100
  1   280   # subStack[2].n_channels_anode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # subStack[2].L_anode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # subStack[2].D_anode
  0       0                       0                       0                
  6   256   # subStack[2].Dhyd_anode
  0       0                       0                       0                
  6   256   # subStack[2].C_anode
  0       0                       0                       0                
  6   256   # subStack[2].A_anode
  0       0                       0                       0                
  6   256   # subStack[2].V_anode
  0       0                       0                       0                
  6   256   # subStack[2].A_heat_anode
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].n_channels_cathode
 -1  1.4999999999999999E-01       0                       0                
  1   280   # subStack[2].L_cathode
 -1  8.0000000000000002E-02       0                       0                
  1   280   # subStack[2].D_cathode
  0       0                       0                       0                
  6   256   # subStack[2].Dhyd_cathode
  0       0                       0                       0                
  6   256   # subStack[2].C_cathode
  0       0                       0                       0                
  6   256   # subStack[2].A_cathode
  0       0                       0                       0                
  6   256   # subStack[2].V_cathode
  0       0                       0                       0                
  6   256   # subStack[2].A_heat_cathode
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].n
  0       1                       1                       5                
  6   258   # subStack[2].initOpt_anode
  0       0                       0                       0                
  6   256   # subStack[2].p_start_in_anode
  0       0                       0                       0                
  6   256   # subStack[2].p_start_out_anode
  0       0                       0                       0                
  6   256   # subStack[2].p_start_anode[1]
  0       0                       0                       0                
  6   256   # subStack[2].p_start_anode[2]
  0       0                       0                       0                
  6   257   # subStack[2].initFromEnthalpy_anode
  0       0                       0                       0                
  6   256   # subStack[2].h_start_in_anode
  0       0                       0                       0                
  6   256   # subStack[2].h_start_out_anode
  0       0                       0                       0                
  6   256   # subStack[2].h_start_anode[1]
  0       0                       0                       0                
  6   256   # subStack[2].h_start_anode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_in_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_out_anode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_anode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_anode[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[2].X_start_anode[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[2].X_start_anode[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[2].X_start_anode[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[2].X_start_anode[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[2].X_start_anode[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[2].X_start_anode[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[2].X_start_anode[7]
  0       0                       0                       0                
  6   256   # subStack[2].m_flow_start_anode
  0       1                       1                       5                
  6   258   # subStack[2].initOpt_cathode
  0       0                       0                       0                
  6   256   # subStack[2].p_start_in_cathode
  0       0                       0                       0                
  6   256   # subStack[2].p_start_out_cathode
  0       0                       0                       0                
  6   256   # subStack[2].p_start_cathode[1]
  0       0                       0                       0                
  6   256   # subStack[2].p_start_cathode[2]
  0       0                       0                       0                
  6   257   # subStack[2].initFromEnthalpy_cathode
  0       0                       0                       0                
  6   256   # subStack[2].h_start_in_cathode
  0       0                       0                       0                
  6   256   # subStack[2].h_start_out_cathode
  0       0                       0                       0                
  6   256   # subStack[2].h_start_cathode[1]
  0       0                       0                       0                
  6   256   # subStack[2].h_start_cathode[2]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_in_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_out_cathode
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_cathode[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].T_start_cathode[2]
  0       0                       0                       1                
  6   256   # subStack[2].X_start_cathode[1]
  0       0                       0                       1                
  6   256   # subStack[2].X_start_cathode[2]
  0       0                       0                       1                
  6   256   # subStack[2].X_start_cathode[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[2].X_start_cathode[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[2].X_start_cathode[5]
  0       0                       0                       0                
  6   256   # subStack[2].m_flow_start_cathode
  0       0                       0                       0                
  6   256   # subStack[2].dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[2].from_dp_anode
  0       0                       0                       0                
  6   257   # subStack[2].positiveFlow_anode
  0       0                       0                       0                
  6   257   # subStack[2].generateEventForReversal_anode
  0       0                       0                       0                
  6   257   # subStack[2].from_dp_cathode
  0       0                       0                       0                
  6   257   # subStack[2].positiveFlow_cathode
  0       0                       0                       0                
  6   257   # subStack[2].generateEventForReversal_cathode
  0       0                       0                       0                
  6   257   # subStack[2].useHeatTransfer_anode
  0       0                       0                       0                
  6   257   # subStack[2].useHeatTransfer_cathode
 -1       1                       0                       0                
  1   280   # subStack[2].CF_AnodeSidePressureLoss
 -1       1                       0                       0                
  1   280   # subStack[2].CF_AnodeSideHeatTransfer
 -1       1                       0                       0                
  1   280   # subStack[2].CF_CathodePressureLoss
 -1       1                       0                       0                
  1   280   # subStack[2].CF_CathodeSideHeatTransfer
 -1     400                       0                 1.0000000000000000E+100
  1   280   # subStack[2].d0_prox
 -1     100                       0                       0                
  1   280   # subStack[2].dp0_prox
 -1  1.0000000000000001E-01       0                       0                
  1   280   # subStack[2].m_flow_nom_prox
  0       0                       0                       0                
  6   256   # subStack[2].anode_stoich_num
  0       0                       0                       0                
  6   256   # subStack[2].anode_stoich_den
  0       0                       0                       0                
  6   256   # subStack[2].cathode_stoich_num
  0       0                       0                       0                
  6   256   # subStack[2].cathode_stoich_den
  0       1                       0                       0                
  6   258   # subStack[2].summary.N
  0       0                       0                       0                
  6   258   # subStack[2].summary.n_cell
  0       0                       0                       0                
  6   256   # subStack[2].summary.P_stack
  0       0                       0                       0                
  6   256   # subStack[2].summary.j_external
  0       0                       0                       0                
  6   256   # subStack[2].summary.V_cell
  0       0                       0                       0                
  6   256   # subStack[2].summary.Q_stack
  0       0                       0                       0                
  6   256   # subStack[2].summary.dp_anode
  0       0                       0                       0                
  6   256   # subStack[2].summary.dp_cathode
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.summary.dp
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.summary.M
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.summary.der(M)
  0     300                       0                   10000                
  6   288   # subStack[2].anode_channel.summary.T_in
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.summary.d_in
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].anode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # subStack[2].anode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.n_channels
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.L
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.D
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.Dhyd
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.A
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.C
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.V
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.A_heat
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.useHeatTransfer
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].anode_channel.ni
  0       1                       1                       5                
  6   258   # subStack[2].anode_channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.T_start[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[2].anode_channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[2].anode_channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[2].anode_channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[2].anode_channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[2].anode_channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[2].anode_channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[2].anode_channel.X_start[7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # subStack[2].anode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # subStack[2].anode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # subStack[2].anode_channel.X_weight
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.y_sat
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # subStack[2].anode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # subStack[2].anode_channel.g
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].anode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.n_channels[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.A_heat[1]
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].anode_channel.channel.ni
  0       1                       1                       5                
  6   258   # subStack[2].anode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.T_start[2]
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[2].anode_channel.channel.X_start[7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # subStack[2].anode_channel.channel.NA
  0       1                       0                       0                
  6   258   # subStack[2].anode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # subStack[2].anode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.der(T[1])
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # subStack[2].anode_channel.channel.frictionDistribution
  0       1                       0                       0                
  6   258   # subStack[2].anode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.g
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.friction[1].n_channels
  0       1                  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[2].anode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[2].anode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # subStack[2].anode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # subStack[2].anode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.friction[1].stateB_inflow.X[7]
  0       1                       0                       0                
  6   257   # subStack[2].anode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.friction[1].m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # subStack[2].anode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # subStack[2].anode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # subStack[2].anode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.htcoeff[1].Dhyd
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.htcoeff[1].m_flow
  0       1                       0                       0                
  6   257   # subStack[2].anode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # subStack[2].anode_channel.channel.htcoeff[1].alpha
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].anode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Q[1]
  0       3                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 1]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 2]
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 4]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[1, 7]
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 2]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 3]
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 4]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_reac[2, 7]
  0       2                       0                       0                
  6   258   # subStack[2].anode_channel.channel.reaction.n_reac
  0       2                       0                       0                
  6   258   # subStack[2].anode_channel.channel.reaction.comp[1]
  0       5                       0                       0                
  6   258   # subStack[2].anode_channel.channel.reaction.comp[2]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.reaction.Tstart
  0  3.1755797113845990E-02       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # subStack[2].anode_channel.channel.reaction.Xstart[7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # subStack[2].anode_channel.channel.reaction.scale
  0  2.0158799999999998E-03  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[1]
  0  1.6042460000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[2]
  0  2.8010100000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[3]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[4]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[5]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[6]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.reaction.MMX[7]
  0  1.7558759618000002E-02       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.der(MM[1])
  0  2.7660000000000001E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[1]
  0  1.6960000000000000E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[2]
  0  1.7999999999999999E-02       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[3]
  0  7.3300000000000004E-02       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[4]
  0  2.4530000000000002E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[5]
  0  2.0549999999999999E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[6]
  0  1.1700000000000000E-02       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.y_start[7]
  0 -5.5814782422670817E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_start[7]
  0  100000                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.pref
  0 -5.5814782422670817E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 1]
  0 -7.7057415207930502E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 2]
  0 -1.7447274948966940E+00       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 3]
  0 -1.1348960253588720E+00       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 4]
  0 -6.1030245179361431E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 5]
  0 -6.8718817378791197E-01       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 6]
  0 -1.9318141382538383E+00       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_y_out[1, 7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.log10_eq_reac[1, 2]
  0  3.7697709702875987E-01       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 1]
  0      -1                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 2]
  0  1.7459978083161807E+00       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 4]
  0 -1.1229749053449409E+00       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 6]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[1, 7]
  0  1.1189834407236522E-01       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 1]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 2]
  0 -1.5547968169242996E+00       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 3]
  0  2.4428984728519345E+00       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 4]
  0      -1                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 6]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.Sx_reac[2, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_start[7]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # subStack[2].anode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # subStack[2].anode_channel.channel.reaction.Tscale
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.kEq_reac[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.kEq_reac[1, 2]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 5])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 6]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 6])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].anode_channel.channel.reaction.Zx[1, 7]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(Zx[1, 7])
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.Ztot[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_flow[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_flow[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_flow[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_flow[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_flow[1, 5]
 -1  1.0000000000000000E-02       0                       0                
  2   280   # subStack[2].anode_channel.channel.reaction.krate[1, 1]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(krate[1, 1])
 -1  1.0000000000000000E-02       0                       0                
  2   280   # subStack[2].anode_channel.channel.reaction.krate[1, 2]
  0       0                       0                       0                
  3   256   # subStack[2].anode_channel.channel.reaction.der(krate[1, 2])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.rZ[1, 7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_formation[1, 7]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # subStack[2].anode_channel.channel.reaction.epsZ
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.e[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.e[1, 2]
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[6]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.reaction.state[1].X[7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 6]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.deplZ[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 1]
  0      -1                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 4]
  0      -1                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 6]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 1]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 2]
  0      -1                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 3]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 4]
  0      -1                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 6]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.reactant[2, 7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.rate[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.reaction.rate[1, 2]
  0       3                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[1]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[2]
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[3]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[4]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_ref[7]
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[2]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[3]
  0       1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[4]
  0      -1                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.S_wgs[7]
  0       2                       0                       0                
  6   258   # subStack[2].anode_channel.channel.reaction.index[1]
  0       5                       0                       0                
  6   258   # subStack[2].anode_channel.channel.reaction.index[2]
  0  7.2314999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.reaction.T_sat_for_WGS
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_rere[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.reaction.g_wgs[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].X[7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[5])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[6])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(X[7])
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Xi[7]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].anode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # subStack[2].anode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].state.X[7]
  0       0                       0                       0                
  6   257   # subStack[2].anode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.gas[1].Z[7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].dUZT[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].h_component[7]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[6]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].s_component[7]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[6]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].anode_channel.channel.gas[1].u_comp[7]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.gas[1].g_formation[7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[2].anode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[5]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[6]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].anode_channel.channel.gas[1].ddx[7]
  0       0                       0                  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.p[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.E_seg[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].anode_channel.channel.MXi[1, 7]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.sh[1]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[1].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.state[2].p
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.state[2].T
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[2].X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].anode_channel.channel.state[3].p
  0     300                       0                   10000                
  6   256   # subStack[2].anode_channel.channel.state[3].T
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[5]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[6]
  0       0                       0                       1                
  6   256   # subStack[2].anode_channel.channel.state[3].X[7]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   288   # subStack[2].anode_channel.channel.TB
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 6]
  0       0                       0                       0                
  6   256   # subStack[2].anode_channel.channel.rMX[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.mflow_B_in
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[6]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XA[7]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[5]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[6]
  0       0                       0                       1                
  6  1280   # subStack[2].anode_channel.channel.XB[7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.n_channels_fric[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # subStack[2].anode_channel.channel.T_wall[1]
  0       7                       0                       0                
  6  1282   # subStack[2].anode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[1, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.mX_flow[2, 7]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.H_flow[2]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dE[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].anode_channel.channel.dMX[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dZ[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dZ[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dZ[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dZ[1, 4]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dZ[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.dUTZ[1]
  0  2.7660000000000001E-01       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 1]
  0  1.6960000000000000E-01       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 2]
  0  1.7999999999999999E-02       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 3]
  0  7.3300000000000004E-02       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 4]
  0  2.4530000000000002E-01       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 5]
  0  2.0549999999999999E-01       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 6]
  0  1.1700000000000000E-02       0                       1                
  6  1280   # subStack[2].anode_channel.channel.Z[1, 7]
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 5])
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 6])
  0       0                       0                       0                
  6  1280   # subStack[2].anode_channel.channel.der(Z[1, 7])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].anode_channel.port[1].mX_flow[7]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.summary.dp
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.summary.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.summary.M
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.summary.der(M)
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.summary.d_in
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].cathode_channel.n
  0  3.1415926535897931E+00       0                       0                
  6   256   # subStack[2].cathode_channel.pi
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.n_channels
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.L
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.D
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.Dhyd
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.A
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.C
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.V
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.A_heat
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.useHeatTransfer
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].cathode_channel.ni
  0       1                       1                       5                
  6   258   # subStack[2].cathode_channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.T_start[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.X_start[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.X_start[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[2].cathode_channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[2].cathode_channel.X_start[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.generateEventForReversal
 -1       1                       0                       0                
  1   280   # subStack[2].cathode_channel.CF_PressureLoss
 -1       1                       0                       0                
  1   280   # subStack[2].cathode_channel.CF_HeatTransfer
 -1  5.0000000000000003E-02       0                       1                
  1   280   # subStack[2].cathode_channel.X_weight
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.y_sat
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.includeStaticHead
 -1       0                       0                       0                
  1   280   # subStack[2].cathode_channel.height
 -1  9.8066499999999994E+00       0                       0                
  1   280   # subStack[2].cathode_channel.g
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].cathode_channel.channel.n
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.n_channels[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.L[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.Dhyd[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.A[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.L_total
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.V[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.V_tot
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.A_mean
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.A_heat[1]
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].cathode_channel.channel.ni
  0       1                       1                       5                
  6   258   # subStack[2].cathode_channel.channel.initOpt
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.p_start_in
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.p_start_out
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.p_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.p_start[2]
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.initFromEnthalpy
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.h_start_in
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.h_start_out
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.h_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.h_start[2]
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.channel.T_start_in
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.channel.T_start_out
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.T_start[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.T_start[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.X_start[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.X_start[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.X_start[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[2].cathode_channel.channel.X_start[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[2].cathode_channel.channel.X_start[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.m_flow_start
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.positiveFlow
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.from_dp
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.mflow_smooth
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.generateEventForReversal
  0       1                       0                       0                
  6   258   # subStack[2].cathode_channel.channel.NA
  0       1                       0                       0                
  6   258   # subStack[2].cathode_channel.channel.NB
 -1       0                       0                   10000                
  2   272   # subStack[2].cathode_channel.channel.T[1]
  0       0                       0                       0                
  3   256   # subStack[2].cathode_channel.channel.der(T[1])
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.dp_asState
  0       1                       1                       4                
  6   258   # subStack[2].cathode_channel.channel.frictionDistribution
  0       1                       0                       0                
  6   258   # subStack[2].cathode_channel.channel.n_fric
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.CF_PressureLoss
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.CF_HeatTransfer
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.includeStaticHead
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.levels[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.g
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.friction[1].A
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.friction[1].Dhyd
  0       1                       1                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.friction[1].n_channels
  0       1                  1.0000000000000001E-15 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.friction[1].lengthFraction
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[2].cathode_channel.channel.friction[1].flowFraction0
 -1       1                  1.0000000000000001E-15 1.0000000000000000E+100
  1   280   # subStack[2].cathode_channel.channel.friction[1].dpFraction0
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.friction[1].from_dp
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.friction[1].positiveFlow
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.friction[1].dp_smooth
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.friction[1].mflow_smooth
 -1       0                       0                       0                
  1   281   # subStack[2].cathode_channel.channel.friction[1].useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # subStack[2].cathode_channel.channel.friction[1].reference_d
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.friction[1].stateB_inflow.X[5]
  0       1                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.friction[1].dp_from_isothermal
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.friction[1].dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.friction[1].dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # subStack[2].cathode_channel.channel.friction[1].d0
 -1     500                       0                       0                
  1   280   # subStack[2].cathode_channel.channel.friction[1].dp0
 -1  1.0000000000000000E-03       0                       0                
  1   280   # subStack[2].cathode_channel.channel.friction[1].m_flow0
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.htcoeff[1].A
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.htcoeff[1].L
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.htcoeff[1].Dhyd
  0       1                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.htcoeff[1].ht_from_isothermal
  0       1                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.htcoeff[1].CF_length
 -1     100                       0                       0                
  1   280   # subStack[2].cathode_channel.channel.htcoeff[1].alpha
  0       1                       1                 1.0000000000000000E+100
  6   258   # subStack[2].cathode_channel.channel.reaction.N
  0       0                       0                  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.reaction.Cp_reac[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.Q[1]
  0       0                       0                       0                
  6   258   # subStack[2].cathode_channel.channel.reaction.n_reac
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.reaction.pstart
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.channel.reaction.Tstart
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.reaction.Xstart[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.reaction.Xstart[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.reaction.Xstart[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # subStack[2].cathode_channel.channel.reaction.Xstart[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # subStack[2].cathode_channel.channel.reaction.Xstart[5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.V
 -1       1                       0                       0                
  1   280   # subStack[2].cathode_channel.channel.reaction.scale
  0  3.9947999999999997E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].cathode_channel.channel.reaction.MMX[1]
  0  4.4009500000000000E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].cathode_channel.channel.reaction.MMX[2]
  0  1.8015280000000002E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].cathode_channel.channel.reaction.MMX[3]
  0  2.8013400000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].cathode_channel.channel.reaction.MMX[4]
  0  3.1998800000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].cathode_channel.channel.reaction.MMX[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.MM[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.der(MM[1])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.y_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.y_start[2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.y_start[3]
  0  7.9270802239664317E-01       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.y_start[4]
  0  2.0729197760335691E-01       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.y_start[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_start[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_start[2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_start[3]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_start[4]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_start[5]
  0  100000                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.pref
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.log10_y_out[1, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Ztot_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Zx_start[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Zx_start[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Zx_start[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Zx_start[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Zx_start[5]
 -1       1                 -1.0000000000000000E+100       1                
  1   280   # subStack[2].cathode_channel.channel.reaction.CF_conversion
 -1       1                       0                       0                
  1   280   # subStack[2].cathode_channel.channel.reaction.Tscale
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].cathode_channel.channel.reaction.Zx[1, 1]
  0       0                       0                       0                
  3   256   # subStack[2].cathode_channel.channel.reaction.der(Zx[1, 1])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].cathode_channel.channel.reaction.Zx[1, 2]
  0       0                       0                       0                
  3   256   # subStack[2].cathode_channel.channel.reaction.der(Zx[1, 2])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].cathode_channel.channel.reaction.Zx[1, 3]
  0       0                       0                       0                
  3   256   # subStack[2].cathode_channel.channel.reaction.der(Zx[1, 3])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].cathode_channel.channel.reaction.Zx[1, 4]
  0       0                       0                       0                
  3   256   # subStack[2].cathode_channel.channel.reaction.der(Zx[1, 4])
 -1       0                       0                 1.0000000000000000E+100
  2   272   # subStack[2].cathode_channel.channel.reaction.Zx[1, 5]
  0       0                       0                       0                
  3   256   # subStack[2].cathode_channel.channel.reaction.der(Zx[1, 5])
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.reaction.Ztot[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.der(Ztot[1])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.rZ[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.rZ[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.rZ[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.rZ[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.rZ[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.g_formation[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.g_formation[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.g_formation[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.g_formation[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.g_formation[1, 5]
  0  1.0000000000000000E-03       0                       0                
  6   256   # subStack[2].cathode_channel.channel.reaction.Zx_nominal
 -1  9.9999999999999995E-07       0                 1.0000000000000000E+100
  1   280   # subStack[2].cathode_channel.channel.reaction.epsZ
  0  100000                       0                  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].p
  0     300                       0                   10000                
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].T
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].X[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].X[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].X[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].X[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.reaction.state[1].X[5]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.reaction.deplZ[1, 1]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.reaction.deplZ[1, 2]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.reaction.deplZ[1, 3]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.reaction.deplZ[1, 4]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.reaction.deplZ[1, 5]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].X[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(X[1])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(X[2])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(X[3])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(X[4])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(X[5])
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].d
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(d)
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].u
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].Rg
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].der(Rg)
  0  4.0000000000000001E-02  1.0000000000000000E-03  2.5000000000000000E-01
  6   256   # subStack[2].cathode_channel.channel.gas[1].MM
 -1       2                       1                       2                
  1   282   # subStack[2].cathode_channel.channel.gas[1].assertlevel
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.p
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.T
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].state.X[5]
  0       0                       0                       0                
  6   257   # subStack[2].cathode_channel.channel.gas[1].preferredMediumStates
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].p_bar
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].Z[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].Z[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].Z[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].Z[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.gas[1].Z[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].dUZT[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].dUZT[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].dUZT[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].dUZT[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].dUZT[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].h_component[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].h_component[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].h_component[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].h_component[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].h_component[5]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].s_component[1]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].s_component[2]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].s_component[3]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].s_component[4]
  0       0                 -1.0000000000000000E+06  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].s_component[5]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].u_comp[1]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].u_comp[2]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].u_comp[3]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].u_comp[4]
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # subStack[2].cathode_channel.channel.gas[1].u_comp[5]
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].cp
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].g_formation[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].g_formation[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].g_formation[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].g_formation[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.gas[1].g_formation[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddTp
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddpT
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.gas[1].dupT
  0    1000                       0                  1.0000000000000000E+06
  6   256   # subStack[2].cathode_channel.channel.gas[1].duTp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddx[1]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddx[2]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddx[3]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddx[4]
  0       1                  1.0000000000000000E-08  100000                
  6   256   # subStack[2].cathode_channel.channel.gas[1].ddx[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.der(p[1])
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.E_seg[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.MXi[1, 1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.MXi[1, 2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.MXi[1, 3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.MXi[1, 4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # subStack[2].cathode_channel.channel.MXi[1, 5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.dp[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.dp[2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.sh[1]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.state[1].p
  0     300                       0                   10000                
  6   288   # subStack[2].cathode_channel.channel.state[1].T
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[1].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[1].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[1].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[1].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[1].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.state[2].p
  0     300                       0                   10000                
  6   256   # subStack[2].cathode_channel.channel.state[2].T
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[2].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[2].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[2].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[2].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[2].X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # subStack[2].cathode_channel.channel.state[3].p
  0     300                       0                   10000                
  6   288   # subStack[2].cathode_channel.channel.state[3].T
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[3].X[1]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[3].X[2]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[3].X[3]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[3].X[4]
  0       0                       0                       1                
  6   256   # subStack[2].cathode_channel.channel.state[3].X[5]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.Q[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.alpha[1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.rMX[1, 1]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.rMX[1, 2]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.rMX[1, 3]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.rMX[1, 4]
  0       0                       0                       0                
  6   256   # subStack[2].cathode_channel.channel.rMX[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.mflow_A_in
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.mflow_B_in
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XA[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XA[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XA[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XA[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XA[5]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XB[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XB[2]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XB[3]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XB[4]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.XB[5]
  0       1                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.n_channels_fric[1]
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6  1280   # subStack[2].cathode_channel.channel.T_wall[1]
  0       5                       0                       0                
  6  1282   # subStack[2].cathode_channel.channel.nS
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[1, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[2, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[2, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[2, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[2, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.mX_flow[2, 5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.H_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.H_flow[2]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.dE[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.dMX[1, 1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.dMX[1, 2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.dMX[1, 3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.dMX[1, 4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6  1280   # subStack[2].cathode_channel.channel.dMX[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.dUTZ[1]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.Z[1, 1]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.Z[1, 2]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.Z[1, 3]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.Z[1, 4]
  0       0                       0                       1                
  6  1280   # subStack[2].cathode_channel.channel.Z[1, 5]
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.der(Z[1, 1])
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.der(Z[1, 2])
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.der(Z[1, 3])
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.der(Z[1, 4])
  0       0                       0                       0                
  6  1280   # subStack[2].cathode_channel.channel.der(Z[1, 5])
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].H_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].mX_flow[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].mX_flow[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].mX_flow[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].mX_flow[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # subStack[2].cathode_channel.port[1].mX_flow[5]
  0       1                       0                       0                
  6  1282   # subStack[2].ref[1]
  0       5                       0                       0                
  6  1282   # subStack[2].air[1]
  0       2                       0                       0                
  6   258   # summary.N
  0       0                       0                       0                
  4   256   # summary.dmAirStkIn
  0       0                       0                       0                
  4   256   # summary.dmFuelStkIn
  0       0                       0                   10000                
  4   256   # summary.tAirStkIn
  0       0                       0                   10000                
  4   256   # summary.tFuelStkIn
  0       0                       0                       0                
  4   256   # summary.tAirStkOut[1]
  0       0                       0                       0                
  4   256   # summary.tAirStkOut[2]
  0       0                       0                       0                
  4   256   # summary.tFuelStkOut[1]
  0       0                       0                       0                
  4   256   # summary.tFuelStkOut[2]
  0       0                       0                       0                
  4   256   # summary.tStkOut[1]
  0       0                       0                       0                
  4   256   # summary.tStkOut[2]
  0       0                       0                       0                
  4   256   # summary.tStkTopWall
  0       0                       0                       0                
  4   256   # summary.tStkBottomWall
  0       0                       0                       0                
  4   256   # summary.QStkHeat
  0       0                       0                       0                
  4   256   # summary.PStkElec
  0     100                       0                       0                
  4   256   # summary.VCst
  0       0                       0                       0                
  4   256   # summary.PStk
  0       0                       0                       0                
  4   256   # summary.VCstZone[1]
  0       0                       0                       0                
  4   256   # summary.VCstZone[2]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 1]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 2]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 3]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 4]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 5]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 6]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[1, 7]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 1]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 2]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 3]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 4]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 5]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 6]
  0  1.4285714285714285E-01       0                       1                
  4   256   # summary.facFuelStkOutComp[2, 7]
  0       0                       0                       1                
  4   256   # summary.facFuelStkUtil[1]
  0       0                       0                       1                
  4   256   # summary.facFuelStkUtil[2]
  0       1                       1                 1.0000000000000000E+100
  6   258   # topHeatTransfer.n
  0  3.6100000000000000E-02       0                       0                
  6   256   # topHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # topHeatTransfer.kc
  0       0                       0                       0                
  6   257   # topHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # topHeatTransfer.variableKc
  0       1                       0                       0                
  6   256   # topHeatTransfer.Q_s[1]
  0       0                       0                 1.0000000000000000E+100
  6   260   # topHeatTransfer.qa[1].T
  0       1                       1                 1.0000000000000000E+100
  6   258   # bottomHeatTransfer.n
  0  3.6100000000000000E-02       0                       0                
  6   256   # bottomHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # bottomHeatTransfer.kc
  0       0                       0                       0                
  6   257   # bottomHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # bottomHeatTransfer.variableKc
  0       1                       0                       0                
  6   256   # bottomHeatTransfer.Q_s[1]
  0       0                       0                 1.0000000000000000E+100
  6   260   # bottomHeatTransfer.qb[1].T
  0       1                       1                 1.0000000000000000E+100
  6   258   # bottomWall.n
  0       0                       0                       0                
  6   256   # bottomWall.V_wall[1]
  0  3.6100000000000000E-02       0                       0                
  6   256   # bottomWall.A_wall[1]
  0       0                       0                       0                
  6   256   # bottomWall.dp
  0       1                       0                       0                
  6   257   # bottomWall.includeThermalResistance
  0       0                       0                       0                
  6   257   # bottomWall.massLessWall
  0       0                       0                       0                
  6   257   # bottomWall.CounterTemps
  0       0                       0                       0                
  6   257   # bottomWall.steadyStateInit
 -1     300                       0                 1.0000000000000000E+100
  1   280   # bottomWall.Tstart1
 -1     300                       0                 1.0000000000000000E+100
  1   280   # bottomWall.TstartN
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # bottomWall.T0[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # bottomWall.m[1]
  0       0                       0                       0                
  6   256   # bottomWall.Rw[1]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # bottomWall.T[1]
  0       0                       0                       0                
  3   256   # bottomWall.der(T[1])
  0       0                       0                       0                
  6   256   # bottomWall.qb_Q_flow[1]
  0     200                       0                       0                
  6   256   # bottomWall.metal_specificHeatCapacity[1]
  0       0                       0                 1.0000000000000000E+100
  6   260   # bottomWall.qb[1].T
  0       1                       1                 1.0000000000000000E+100
  6   258   # topWall.n
  0       0                       0                       0                
  6   256   # topWall.V_wall[1]
  0  3.6100000000000000E-02       0                       0                
  6   256   # topWall.A_wall[1]
  0       0                       0                       0                
  6   256   # topWall.dp
  0       1                       0                       0                
  6   257   # topWall.includeThermalResistance
  0       0                       0                       0                
  6   257   # topWall.massLessWall
  0       0                       0                       0                
  6   257   # topWall.CounterTemps
  0       0                       0                       0                
  6   257   # topWall.steadyStateInit
 -1     300                       0                 1.0000000000000000E+100
  1   280   # topWall.Tstart1
 -1     300                       0                 1.0000000000000000E+100
  1   280   # topWall.TstartN
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # topWall.T0[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # topWall.m[1]
  0       0                       0                       0                
  6   256   # topWall.Rw[1]
 -1       0                       0                 1.0000000000000000E+100
  2   272   # topWall.T[1]
  0       0                       0                       0                
  3   256   # topWall.der(T[1])
  0       0                       0                       0                
  6   256   # topWall.qa_Q_flow[1]
  0     200                       0                       0                
  6   256   # topWall.metal_specificHeatCapacity[1]
  0       0                       0                 1.0000000000000000E+100
  6   260   # topWall.qa[1].T
  0       0                       0                       0                
  6   257   # counterFlow
 -1       0                       0                       0                
  1   281   # feed_Anode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # feed_Anode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # feed_Anode.T_start
  0       0                       0                       0                
  6   256   # feed_Anode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.m_flow_start
  0       0                       0                       0                
  6   256   # feed_Anode.height
  0       1                       0                       0                
  6   257   # feed_Anode.positiveFlow
  0       2                       2                 1.0000000000000000E+100
  6   258   # feed_Anode.N_drain
  0       1                       0                       0                
  6   388   # feed_Anode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # feed_Anode.heat_port[2].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Anode.feed.m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Anode.drain[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Anode.drain[2].m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # feed_Anode.pi
  0       1                       0                       0                
  6   258   # feed_Anode.n_volumes
  0       0                       0                       0                
  6   256   # feed_Anode.V_tot
 -1       3                       0                       0                
  1   280   # feed_Anode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # feed_Anode.pstart_in
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # feed_Anode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # feed_Anode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # feed_Anode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # feed_Anode.volume[1].h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # feed_Anode.volume[1].X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # feed_Anode.volume[1].X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # feed_Anode.volume[1].X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # feed_Anode.volume[1].X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # feed_Anode.volume[1].X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # feed_Anode.volume[1].X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # feed_Anode.volume[1].X_start[7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].mXs_flow[7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].m
  0       3                       0                       0                
  6   258   # feed_Anode.volume[1].N
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Anode.volume[1].port[1].m_flow
  0  3.1755797113845990E-02       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[1]
  0  1.5495406709770243E-01       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[2]
  0  2.8713975871231152E-02       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[3]
  0  1.8372005882995510E-01       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[4]
  0  2.5167769706635779E-01       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[5]
  0  3.2785651294517304E-01       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[6]
  0  2.1321891075734414E-02       0                       1                
  6   260   # feed_Anode.volume[1].port[2].X_outflow[7]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[5]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[6]
  0       0                       0                       1                
  6   260   # feed_Anode.volume[1].port[3].X_outflow[7]
  0       1                       0                       0                
  6   257   # feed_Anode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # feed_Anode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # feed_Anode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # feed_Anode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].h_in
  0       0                       0                   10000                
  6   256   # feed_Anode.volume[1].T_in
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[5]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[6]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].X_in[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].state_in.p
  0     300                       0                   10000                
  6   256   # feed_Anode.volume[1].state_in.T
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].state_in.X[7]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # feed_Anode.volume[1].state_default.T
  0  3.1755797113845990E-02       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # feed_Anode.volume[1].state_default.X[7]
  0  1.0000000000000001E-15       0                       0                
  6   256   # feed_Anode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].m_flow_in[2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[1, 7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[2, 7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow_in[3, 7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].dMX[7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[1, 7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[2, 7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 5]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 6]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].MX_flow[3, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].M
  0       0                       0                       0                
  6   257   # feed_Anode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # feed_Anode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # feed_Anode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # feed_Anode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # feed_Anode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # feed_Anode.volume[1].fluid.h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X_start[7]
  0       7                       1                 1.0000000000000000E+100
  6   258   # feed_Anode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # feed_Anode.volume[1].fluid.nC
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # feed_Anode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # feed_Anode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(T)
 -1  3.1755797113845990E-02       0                       1                
  2   272   # feed_Anode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(X[1])
 -1  1.5495406709770243E-01       0                       1                
  2   272   # feed_Anode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(X[2])
 -1  2.8713975871231152E-02       0                       1                
  2   272   # feed_Anode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(X[3])
 -1  1.8372005882995510E-01       0                       1                
  2   272   # feed_Anode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(X[4])
 -1  2.5167769706635779E-01       0                       1                
  2   272   # feed_Anode.volume[1].fluid.X[5]
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(X[5])
 -1  3.2785651294517304E-01       0                       1                
  2   272   # feed_Anode.volume[1].fluid.X[6]
  0       0                       0                       0                
  3   256   # feed_Anode.volume[1].fluid.der(X[6])
  0  2.1321891075734414E-02       0                       1                
  6   256   # feed_Anode.volume[1].fluid.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # feed_Anode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.volume[1].fluid.state.X[7]
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.MX[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # feed_Anode.volume[1].fluid.dX[7]
  0  4.1244875687044860E+03       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[1]
  0  5.1827911679380850E+02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[2]
  0  2.9683835473632718E+02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[3]
  0  1.8892448221406741E+02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[4]
  0  4.6152332908508782E+02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[5]
  0  2.9680338695053081E+02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[6]
  0  2.5983699388727081E+02       0                       0                
  6   256   # feed_Anode.volume[1].fluid.R_g[7]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[6]
  0       0                       0                       0                
  6  1280   # feed_Anode.volume[1].fluid.du_dX[7]
  0       0                       0                       0                
  6   257   # feed_Anode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # feed_Anode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # feed_Anode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # feed_Anode.volume[1].positiveFlow[3]
  0       2                       1                 1.0000000000000000E+100
  6   258   # feed_Anode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # feed_Anode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # feed_Anode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # feed_Anode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # feed_Anode.basicHeatTransfer.variableKc
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[5]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[6]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[1].portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].T_start
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[1].mflow_start
  0       1                       0                       0                
  6   257   # feed_Anode.frictionLoss[1].positiveFlow
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[1].dp_asState
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[1].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # feed_Anode.frictionLoss[1].d
  0       0                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].T_in
  0       0                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].TB_in
  0       0                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].T_out
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.frictionLoss[1].state_in.p
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].state_in.T
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.frictionLoss[1].stateB_in.p
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.T
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.frictionLoss[1].state_out.p
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[1].state_out.T
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].state_out.X[7]
 -1       1                       0                       0                
  1   281   # feed_Anode.frictionLoss[1].from_dp
 -1      10                       0                       0                
  1   280   # feed_Anode.frictionLoss[1].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # feed_Anode.frictionLoss[1].mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[1].dynamicModel
 -1       1                       0                       0                
  1   280   # feed_Anode.frictionLoss[1].T_mflow
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[1].summary.V_flow
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[1].friction.from_dp
  0       1                       0                       0                
  6   257   # feed_Anode.frictionLoss[1].friction.positiveFlow
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[1].friction.dp_smooth
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[1].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[1].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # feed_Anode.frictionLoss[1].friction.reference_d
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[1].friction.stateB_inflow.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.frictionLoss[1].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.frictionLoss[1].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # feed_Anode.frictionLoss[1].friction.d0
 -1     500                       0                       0                
  1   280   # feed_Anode.frictionLoss[1].friction.dp0
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[1].friction.m_flow0
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[5]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[6]
  0       0                       0                       1                
  6   260   # feed_Anode.frictionLoss[2].portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].T_start
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[2].mflow_start
  0       1                       0                       0                
  6   257   # feed_Anode.frictionLoss[2].positiveFlow
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[2].dp_asState
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[2].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # feed_Anode.frictionLoss[2].d
  0       0                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].T_in
  0       0                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].TB_in
  0       0                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].T_out
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.frictionLoss[2].state_in.p
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].state_in.T
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.frictionLoss[2].stateB_in.p
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.T
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Anode.frictionLoss[2].state_out.p
  0     300                       0                   10000                
  6   256   # feed_Anode.frictionLoss[2].state_out.T
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].state_out.X[7]
 -1       1                       0                       0                
  1   281   # feed_Anode.frictionLoss[2].from_dp
 -1      10                       0                       0                
  1   280   # feed_Anode.frictionLoss[2].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # feed_Anode.frictionLoss[2].mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[2].dynamicModel
 -1       1                       0                       0                
  1   280   # feed_Anode.frictionLoss[2].T_mflow
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[2].summary.V_flow
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[2].friction.from_dp
  0       1                       0                       0                
  6   257   # feed_Anode.frictionLoss[2].friction.positiveFlow
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[2].friction.dp_smooth
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[2].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Anode.frictionLoss[2].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # feed_Anode.frictionLoss[2].friction.reference_d
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # feed_Anode.frictionLoss[2].friction.stateB_inflow.X[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.frictionLoss[2].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Anode.frictionLoss[2].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # feed_Anode.frictionLoss[2].friction.d0
 -1     500                       0                       0                
  1   280   # feed_Anode.frictionLoss[2].friction.dp0
  0       0                       0                       0                
  6   256   # feed_Anode.frictionLoss[2].friction.m_flow0
  0       2                       0                       0                
  6   258   # feed_Anode.summary.nbr
  0       0                       0                       0                
  6   256   # feed_Anode.summary.V_tot
  0       0                       0                       0                
  6   256   # feed_Anode.summary.m_flow_in
  0       0                       0                       0                
  6   256   # feed_Anode.summary.dp[1]
  0       0                       0                       0                
  6   256   # feed_Anode.summary.dp[2]
  0       0                       0                       0                
  6  1280   # feed_Anode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # feed_Anode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # feed_Anode.depth
  0       2                       1                 1.0000000000000000E+100
  6   258   # feed_Anode.thermalCollector.m
  0       0                       0                       0                
  6   388   # feed_Anode.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   256   # feed_Anode.pstart[1]
  0       0                       0                       0                
  6  1280   # feed_Anode.Dhyd
 -1       0                       0                       0                
  1   281   # feed_Cathode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # feed_Cathode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.T_start
  0       0                       0                       0                
  6   256   # feed_Cathode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.m_flow_start
  0       0                       0                       0                
  6   256   # feed_Cathode.height
  0       1                       0                       0                
  6   257   # feed_Cathode.positiveFlow
  0       2                       2                 1.0000000000000000E+100
  6   258   # feed_Cathode.N_drain
  0       1                       0                       0                
  6   388   # feed_Cathode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # feed_Cathode.heat_port[2].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Cathode.feed.m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Cathode.drain[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Cathode.drain[2].m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # feed_Cathode.pi
  0       1                       0                       0                
  6   258   # feed_Cathode.n_volumes
  0       0                       0                       0                
  6   256   # feed_Cathode.V_tot
 -1       3                       0                       0                
  1   280   # feed_Cathode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # feed_Cathode.pstart_in
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # feed_Cathode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # feed_Cathode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # feed_Cathode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # feed_Cathode.volume[1].h_start
 -1       0                       0                       1                
  1   280   # feed_Cathode.volume[1].X_start[1]
 -1       0                       0                       1                
  1   280   # feed_Cathode.volume[1].X_start[2]
 -1       0                       0                       1                
  1   280   # feed_Cathode.volume[1].X_start[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # feed_Cathode.volume[1].X_start[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # feed_Cathode.volume[1].X_start[5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].m
  0       3                       0                       0                
  6   258   # feed_Cathode.volume[1].N
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_Cathode.volume[1].port[1].m_flow
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[2].X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[2].X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[2].X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[2].X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[2].X_outflow[5]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[3].X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[3].X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[3].X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[3].X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Cathode.volume[1].port[3].X_outflow[5]
  0       1                       0                       0                
  6   257   # feed_Cathode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # feed_Cathode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # feed_Cathode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # feed_Cathode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].h_in
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].X_in[5]
  0       0                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].state_in.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.volume[1].state_in.T
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_in.X[5]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # feed_Cathode.volume[1].state_default.T
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_default.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_default.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].state_default.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # feed_Cathode.volume[1].state_default.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # feed_Cathode.volume[1].state_default.X[5]
  0  1.0000000000000001E-15       0                       0                
  6   256   # feed_Cathode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].m_flow_in[2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].dMX[5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].MX_flow[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].M
  0       0                       0                       0                
  6   257   # feed_Cathode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # feed_Cathode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # feed_Cathode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # feed_Cathode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # feed_Cathode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # feed_Cathode.volume[1].fluid.h_start
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.X_start[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.X_start[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.X_start[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.X_start[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.X_start[5]
  0       5                       1                 1.0000000000000000E+100
  6   258   # feed_Cathode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # feed_Cathode.volume[1].fluid.nC
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # feed_Cathode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # feed_Cathode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # feed_Cathode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # feed_Cathode.volume[1].fluid.der(T)
 -1       0                       0                       1                
  2   272   # feed_Cathode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # feed_Cathode.volume[1].fluid.der(X[1])
 -1       0                       0                       1                
  2   272   # feed_Cathode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # feed_Cathode.volume[1].fluid.der(X[2])
 -1       0                       0                       1                
  2   272   # feed_Cathode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # feed_Cathode.volume[1].fluid.der(X[3])
 -1       0                       0                       1                
  2   272   # feed_Cathode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # feed_Cathode.volume[1].fluid.der(X[4])
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # feed_Cathode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.volume[1].fluid.state.X[5]
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.dX[5]
  0  2.0813237208370879E+02       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.R_g[1]
  0  1.8892448221406741E+02       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.R_g[2]
  0  4.6152332908508782E+02       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.R_g[3]
  0  2.9680338695053081E+02       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.R_g[4]
  0  2.5983699388727081E+02       0                       0                
  6   256   # feed_Cathode.volume[1].fluid.R_g[5]
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # feed_Cathode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6   257   # feed_Cathode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # feed_Cathode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # feed_Cathode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # feed_Cathode.volume[1].positiveFlow[3]
  0       2                       1                 1.0000000000000000E+100
  6   258   # feed_Cathode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # feed_Cathode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # feed_Cathode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # feed_Cathode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # feed_Cathode.basicHeatTransfer.variableKc
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[1].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[1].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[1].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[1].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[1].portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[1].T_start
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[1].mflow_start
  0       1                       0                       0                
  6   257   # feed_Cathode.frictionLoss[1].positiveFlow
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[1].dp_asState
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[1].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # feed_Cathode.frictionLoss[1].d
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.frictionLoss[1].state_in.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[1].state_in.T
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_in.X[5]
  0       0                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.T
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].stateB_in.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.frictionLoss[1].state_out.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[1].state_out.T
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_out.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_out.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_out.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_out.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].state_out.X[5]
 -1       1                       0                       0                
  1   281   # feed_Cathode.frictionLoss[1].from_dp
 -1      10                       0                       0                
  1   280   # feed_Cathode.frictionLoss[1].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # feed_Cathode.frictionLoss[1].mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[1].dynamicModel
 -1       1                       0                       0                
  1   280   # feed_Cathode.frictionLoss[1].T_mflow
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[1].summary.V_flow
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[1].friction.from_dp
  0       1                       0                       0                
  6   257   # feed_Cathode.frictionLoss[1].friction.positiveFlow
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[1].friction.dp_smooth
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[1].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[1].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # feed_Cathode.frictionLoss[1].friction.reference_d
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[1].friction.stateB_inflow.X[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.frictionLoss[1].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.frictionLoss[1].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # feed_Cathode.frictionLoss[1].friction.d0
 -1     500                       0                       0                
  1   280   # feed_Cathode.frictionLoss[1].friction.dp0
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[1].friction.m_flow0
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[2].portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[2].portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[2].portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[2].portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # feed_Cathode.frictionLoss[2].portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[2].T_start
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[2].mflow_start
  0       1                       0                       0                
  6   257   # feed_Cathode.frictionLoss[2].positiveFlow
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[2].dp_asState
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[2].dp
  0       1                  1.0000000000000000E-08  100000                
  6   256   # feed_Cathode.frictionLoss[2].d
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.frictionLoss[2].state_in.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[2].state_in.T
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_in.X[5]
  0       0                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.T
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].stateB_in.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # feed_Cathode.frictionLoss[2].state_out.p
  0       0                       0                   10000                
  6   256   # feed_Cathode.frictionLoss[2].state_out.T
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_out.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_out.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_out.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_out.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].state_out.X[5]
 -1       1                       0                       0                
  1   281   # feed_Cathode.frictionLoss[2].from_dp
 -1      10                       0                       0                
  1   280   # feed_Cathode.frictionLoss[2].dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # feed_Cathode.frictionLoss[2].mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[2].dynamicModel
 -1       1                       0                       0                
  1   280   # feed_Cathode.frictionLoss[2].T_mflow
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[2].summary.V_flow
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[2].friction.from_dp
  0       1                       0                       0                
  6   257   # feed_Cathode.frictionLoss[2].friction.positiveFlow
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[2].friction.dp_smooth
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[2].friction.mflow_smooth
  0       0                       0                       0                
  6   257   # feed_Cathode.frictionLoss[2].friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # feed_Cathode.frictionLoss[2].friction.reference_d
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # feed_Cathode.frictionLoss[2].friction.stateB_inflow.X[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.frictionLoss[2].friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # feed_Cathode.frictionLoss[2].friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # feed_Cathode.frictionLoss[2].friction.d0
 -1     500                       0                       0                
  1   280   # feed_Cathode.frictionLoss[2].friction.dp0
  0       0                       0                       0                
  6   256   # feed_Cathode.frictionLoss[2].friction.m_flow0
  0       2                       0                       0                
  6   258   # feed_Cathode.summary.nbr
  0       0                       0                       0                
  6   256   # feed_Cathode.summary.V_tot
  0       0                       0                       0                
  6   256   # feed_Cathode.summary.m_flow_in
  0       0                       0                       0                
  6   256   # feed_Cathode.summary.dp[1]
  0       0                       0                       0                
  6   256   # feed_Cathode.summary.dp[2]
  0       0                       0                       0                
  6  1280   # feed_Cathode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # feed_Cathode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # feed_Cathode.depth
  0       2                       1                 1.0000000000000000E+100
  6   258   # feed_Cathode.thermalCollector.m
  0       0                       0                       0                
  6   388   # feed_Cathode.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   256   # feed_Cathode.pstart[1]
  0       0                       0                       0                
  6  1280   # feed_Cathode.Dhyd
 -1       0                       0                       0                
  1   281   # drain_Anode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # drain_Anode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # drain_Anode.T_start
  0       0                       0                       0                
  6   256   # drain_Anode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.m_flow_start
  0       0                       0                       0                
  6   256   # drain_Anode.height
  0       1                       0                       0                
  6   257   # drain_Anode.positiveFlow
  0       2                       2                 1.0000000000000000E+100
  6   258   # drain_Anode.N_feed
  0       1                       0                       0                
  6   388   # drain_Anode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # drain_Anode.heat_port[2].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Anode.feed[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Anode.feed[2].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Anode.drain.m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # drain_Anode.pi
  0       1                       0                       0                
  6   258   # drain_Anode.n_volumes
  0       0                       0                       0                
  6   256   # drain_Anode.V_tot
 -1       3                       0                       0                
  1   280   # drain_Anode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # drain_Anode.pstart_out
  0  1.0000000000000000E-03       0                       0                
  6   256   # drain_Anode.volume[1].V
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # drain_Anode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # drain_Anode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # drain_Anode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # drain_Anode.volume[1].h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # drain_Anode.volume[1].X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # drain_Anode.volume[1].X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # drain_Anode.volume[1].X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # drain_Anode.volume[1].X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # drain_Anode.volume[1].X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # drain_Anode.volume[1].X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # drain_Anode.volume[1].X_start[7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].mXs_flow[7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].m
  0       3                       0                       0                
  6   258   # drain_Anode.volume[1].N
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Anode.volume[1].port[3].m_flow
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[1]
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[2]
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[3]
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[4]
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[5]
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[6]
  0       0                       0                       1                
  6   260   # drain_Anode.volume[1].port[3].X_outflow[7]
  0       1                       0                       0                
  6   257   # drain_Anode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # drain_Anode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # drain_Anode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # drain_Anode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].h_in
  0       0                       0                   10000                
  6   256   # drain_Anode.volume[1].T_in
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[5]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[6]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].X_in[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].state_in.p
  0     300                       0                   10000                
  6   256   # drain_Anode.volume[1].state_in.T
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].state_in.X[7]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # drain_Anode.volume[1].state_default.T
  0  3.1755797113845990E-02       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # drain_Anode.volume[1].state_default.X[7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].m_flow_in[2]
  0  1.0000000000000001E-15       0                       0                
  6   256   # drain_Anode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[1, 7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[2, 7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow_in[3, 7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[5]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[6]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].dMX[7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[1, 7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[2, 7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 5]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 6]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].MX_flow[3, 7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].M
  0       0                       0                       0                
  6   257   # drain_Anode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # drain_Anode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # drain_Anode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # drain_Anode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # drain_Anode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # drain_Anode.volume[1].fluid.h_start
  0  3.1755797113845990E-02       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[1]
  0  1.5495406709770243E-01       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[2]
  0  2.8713975871231152E-02       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[3]
  0  1.8372005882995510E-01       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[4]
  0  2.5167769706635779E-01       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[5]
  0  3.2785651294517304E-01       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[6]
  0  2.1321891075734414E-02       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X_start[7]
  0       7                       1                 1.0000000000000000E+100
  6   258   # drain_Anode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # drain_Anode.volume[1].fluid.nC
  0  1.0000000000000000E-03       0                       0                
  6   256   # drain_Anode.volume[1].fluid.V_tot
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # drain_Anode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # drain_Anode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(T)
 -1  3.1755797113845990E-02       0                       1                
  2   272   # drain_Anode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(X[1])
 -1  1.5495406709770243E-01       0                       1                
  2   272   # drain_Anode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(X[2])
 -1  2.8713975871231152E-02       0                       1                
  2   272   # drain_Anode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(X[3])
 -1  1.8372005882995510E-01       0                       1                
  2   272   # drain_Anode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(X[4])
 -1  2.5167769706635779E-01       0                       1                
  2   272   # drain_Anode.volume[1].fluid.X[5]
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(X[5])
 -1  3.2785651294517304E-01       0                       1                
  2   272   # drain_Anode.volume[1].fluid.X[6]
  0       0                       0                       0                
  3   256   # drain_Anode.volume[1].fluid.der(X[6])
  0  2.1321891075734414E-02       0                       1                
  6   256   # drain_Anode.volume[1].fluid.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # drain_Anode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.volume[1].fluid.state.X[7]
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[6]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.MX[7]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # drain_Anode.volume[1].fluid.dX[7]
  0  4.1244875687044860E+03       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[1]
  0  5.1827911679380850E+02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[2]
  0  2.9683835473632718E+02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[3]
  0  1.8892448221406741E+02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[4]
  0  4.6152332908508782E+02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[5]
  0  2.9680338695053081E+02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[6]
  0  2.5983699388727081E+02       0                       0                
  6   256   # drain_Anode.volume[1].fluid.R_g[7]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[6]
  0       0                       0                       0                
  6  1280   # drain_Anode.volume[1].fluid.du_dX[7]
  0       0                       0                       0                
  6   257   # drain_Anode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # drain_Anode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # drain_Anode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # drain_Anode.volume[1].positiveFlow[3]
  0  1.0000000000000000E-03       0                       0                
  6   256   # drain_Anode.volume[1].summary.V
  0       2                       1                 1.0000000000000000E+100
  6   258   # drain_Anode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # drain_Anode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # drain_Anode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # drain_Anode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # drain_Anode.basicHeatTransfer.variableKc
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Anode.frictionLoss.portA.m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Anode.frictionLoss.portB.m_flow
  0  3.1755797113845990E-02       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[1]
  0  1.5495406709770243E-01       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[2]
  0  2.8713975871231152E-02       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[3]
  0  1.8372005882995510E-01       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[4]
  0  2.5167769706635779E-01       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[5]
  0  3.2785651294517304E-01       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[6]
  0  2.1321891075734414E-02       0                       1                
  6   260   # drain_Anode.frictionLoss.portB.X_outflow[7]
  0     300                       0                   10000                
  6   256   # drain_Anode.frictionLoss.T_start
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.mflow_start
  0       1                       0                       0                
  6   257   # drain_Anode.frictionLoss.positiveFlow
  0       0                       0                       0                
  6   257   # drain_Anode.frictionLoss.dp_asState
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.dp
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.m_flow
  0       1                  1.0000000000000000E-08  100000                
  6   256   # drain_Anode.frictionLoss.d
  0       0                       0                   10000                
  6   256   # drain_Anode.frictionLoss.T_in
  0       0                       0                   10000                
  6   256   # drain_Anode.frictionLoss.TB_in
  0       0                       0                   10000                
  6   256   # drain_Anode.frictionLoss.T_out
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.frictionLoss.state_in.p
  0     300                       0                   10000                
  6   256   # drain_Anode.frictionLoss.state_in.T
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.frictionLoss.stateB_in.p
  0     300                       0                   10000                
  6   256   # drain_Anode.frictionLoss.stateB_in.T
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.stateB_in.X[7]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Anode.frictionLoss.state_out.p
  0     300                       0                   10000                
  6   256   # drain_Anode.frictionLoss.state_out.T
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.state_out.X[7]
 -1       1                       0                       0                
  1   281   # drain_Anode.frictionLoss.from_dp
 -1      10                       0                       0                
  1   280   # drain_Anode.frictionLoss.dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # drain_Anode.frictionLoss.mflow_smooth
  0       0                       0                       0                
  6   257   # drain_Anode.frictionLoss.dynamicModel
 -1       1                       0                       0                
  1   280   # drain_Anode.frictionLoss.T_mflow
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.summary.m_flow
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.summary.V_flow
  0       0                       0                       0                
  6   257   # drain_Anode.frictionLoss.friction.from_dp
  0       1                       0                       0                
  6   257   # drain_Anode.frictionLoss.friction.positiveFlow
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.friction.dp_smooth
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.friction.mflow_smooth
  0       0                       0                       0                
  6   257   # drain_Anode.frictionLoss.friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # drain_Anode.frictionLoss.friction.reference_d
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateA_inflow.X[7]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[5]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[6]
  0       0                       0                       1                
  6   256   # drain_Anode.frictionLoss.friction.stateB_inflow.X[7]
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.friction.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.frictionLoss.friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Anode.frictionLoss.friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # drain_Anode.frictionLoss.friction.d0
 -1     100                       0                       0                
  1   280   # drain_Anode.frictionLoss.friction.dp0
  0       0                       0                       0                
  6   256   # drain_Anode.frictionLoss.friction.m_flow0
  0       2                       0                       0                
  6   258   # drain_Anode.summary.nbr
  0       0                       0                       0                
  6   256   # drain_Anode.summary.V_tot
  0       0                       0                       0                
  6   256   # drain_Anode.summary.m_flow_out
  0       0                       0                       0                
  6   256   # drain_Anode.summary.dp[1]
  0       0                       0                       0                
  6   256   # drain_Anode.summary.dp[2]
  0       0                       0                       0                
  6  1280   # drain_Anode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # drain_Anode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # drain_Anode.depth
  0       0                       0                       0                
  6   256   # drain_Anode.pstart[1]
  0       0                       0                       0                
  6  1280   # drain_Anode.Dhyd
  0       2                       1                 1.0000000000000000E+100
  6   258   # drain_Anode.thermalCollector.m
  0       0                       0                       0                
  6   388   # drain_Anode.thermalCollector.port_b.Q_flow
 -1       0                       0                       0                
  1   281   # drain_Cathode.initFromEnthalpy
 -1  3.0000000000000000E+05       0                       0                
  1   280   # drain_Cathode.h_start
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.T_start
  0       0                       0                       0                
  6   256   # drain_Cathode.dp_start
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.m_flow_start
  0       0                       0                       0                
  6   256   # drain_Cathode.height
  0       1                       0                       0                
  6   257   # drain_Cathode.positiveFlow
  0       2                       2                 1.0000000000000000E+100
  6   258   # drain_Cathode.N_feed
  0       1                       0                       0                
  6   388   # drain_Cathode.heat_port[1].Q_flow
  0       1                       0                       0                
  6   388   # drain_Cathode.heat_port[2].Q_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Cathode.feed[1].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Cathode.feed[2].m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Cathode.drain.m_flow
  0  3.1415926535897931E+00       0                       0                
  6   256   # drain_Cathode.pi
  0       1                       0                       0                
  6   258   # drain_Cathode.n_volumes
  0       0                       0                       0                
  6   256   # drain_Cathode.V_tot
 -1       3                       0                       0                
  1   280   # drain_Cathode.Nusselt_nbr
  0       0                       0                       0                
  6   256   # drain_Cathode.pstart_out
  0  1.0000000000000000E-03       0                       0                
  6   256   # drain_Cathode.volume[1].V
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].der(V)
  0       1                       1                       5                
  6   258   # drain_Cathode.volume[1].initOpt
 -1       0                       0                       0                
  1   281   # drain_Cathode.volume[1].initFromEnthalpy
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].p_start
  0     300                       0                   10000                
  6   256   # drain_Cathode.volume[1].T_start
 -1  3.0000000000000000E+05 -1.0000000000000000E+10  1.0000000000000000E+10
  1   280   # drain_Cathode.volume[1].h_start
 -1       0                       0                       1                
  1   280   # drain_Cathode.volume[1].X_start[1]
 -1       0                       0                       1                
  1   280   # drain_Cathode.volume[1].X_start[2]
 -1       0                       0                       1                
  1   280   # drain_Cathode.volume[1].X_start[3]
 -1  7.7000000000000002E-01       0                       1                
  1   280   # drain_Cathode.volume[1].X_start[4]
 -1  2.3000000000000001E-01       0                       1                
  1   280   # drain_Cathode.volume[1].X_start[5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].mXs_flow[1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].mXs_flow[2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].mXs_flow[3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].mXs_flow[4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].mXs_flow[5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].Q_add
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].m
  0       3                       0                       0                
  6   258   # drain_Cathode.volume[1].N
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Cathode.volume[1].port[3].m_flow
  0       0                       0                       1                
  6   260   # drain_Cathode.volume[1].port[3].X_outflow[1]
  0       0                       0                       1                
  6   260   # drain_Cathode.volume[1].port[3].X_outflow[2]
  0       0                       0                       1                
  6   260   # drain_Cathode.volume[1].port[3].X_outflow[3]
  0       0                       0                       1                
  6   260   # drain_Cathode.volume[1].port[3].X_outflow[4]
  0       0                       0                       1                
  6   260   # drain_Cathode.volume[1].port[3].X_outflow[5]
  0       1                       0                       0                
  6   257   # drain_Cathode.volume[1].thermalDynamics
  0       0                       0                       0                
  6   257   # drain_Cathode.volume[1].realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # drain_Cathode.volume[1].stepSize
  0       1                       0                       0                
  6   256   # drain_Cathode.volume[1].der_p_factor
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].h_in
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].X_in[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].X_in[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].X_in[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].X_in[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].X_in[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].state_in.p
  0       0                       0                   10000                
  6   256   # drain_Cathode.volume[1].state_in.T
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_in.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_in.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_in.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_in.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_in.X[5]
  0  1.0132500000000000E+05       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].state_default.p
  0  2.9314999999999998E+02       0                   10000                
  6   256   # drain_Cathode.volume[1].state_default.T
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_default.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_default.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].state_default.X[3]
  0  7.7000000000000002E-01       0                       1                
  6   256   # drain_Cathode.volume[1].state_default.X[4]
  0  2.3000000000000001E-01       0                       1                
  6   256   # drain_Cathode.volume[1].state_default.X[5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].m_flow_in[1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].m_flow_in[2]
  0  1.0000000000000001E-15       0                       0                
  6   256   # drain_Cathode.volume[1].m_flow_in[3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].H_flow_in[1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].H_flow_in[2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].H_flow_in[3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[1, 1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[1, 2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[1, 3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[1, 4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[1, 5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[2, 1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[2, 2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[2, 3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[2, 4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[2, 5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[3, 1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[3, 2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[3, 3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[3, 4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow_in[3, 5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].dE
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].dMX[1]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].dMX[2]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].dMX[3]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].dMX[4]
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].dMX[5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].H_flow[1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].H_flow[2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].H_flow[3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[1, 1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[1, 2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[1, 3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[1, 4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[1, 5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[2, 1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[2, 2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[2, 3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[2, 4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[2, 5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[3, 1]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[3, 2]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[3, 3]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[3, 4]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].MX_flow[3, 5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].M
  0       0                       0                       0                
  6   257   # drain_Cathode.volume[1].fluid.quasiStatic
  0       1                       0                       0                
  6   257   # drain_Cathode.volume[1].fluid.thermalDynamics
  0       0                       0                       0                
  6   257   # drain_Cathode.volume[1].fluid.realTimeMode
  0  1.0000000000000000E-02       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.stepSize
  0       1                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.der_p_factor
  0       1                       1                       5                
  6   258   # drain_Cathode.volume[1].fluid.initOpt
  0     300                       0                   10000                
  6   256   # drain_Cathode.volume[1].fluid.T_start
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].fluid.p_start
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   256   # drain_Cathode.volume[1].fluid.h_start
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.X_start[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.X_start[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.X_start[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.X_start[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.X_start[5]
  0       5                       1                 1.0000000000000000E+100
  6   258   # drain_Cathode.volume[1].fluid.ns
  0       0                       0                       0                
  6   258   # drain_Cathode.volume[1].fluid.nC
  0  1.0000000000000000E-03       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.V_tot
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.der(V_tot)
 -1       0                       0                  1.0000000000000000E+08
  2   272   # drain_Cathode.volume[1].fluid.p
  0       0                       0                       0                
  3   256   # drain_Cathode.volume[1].fluid.der(p)
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.d
 -1       0                       0                   10000                
  2   272   # drain_Cathode.volume[1].fluid.T
  0       0                       0                       0                
  3   256   # drain_Cathode.volume[1].fluid.der(T)
 -1       0                       0                       1                
  2   272   # drain_Cathode.volume[1].fluid.X[1]
  0       0                       0                       0                
  3   256   # drain_Cathode.volume[1].fluid.der(X[1])
 -1       0                       0                       1                
  2   272   # drain_Cathode.volume[1].fluid.X[2]
  0       0                       0                       0                
  3   256   # drain_Cathode.volume[1].fluid.der(X[2])
 -1       0                       0                       1                
  2   272   # drain_Cathode.volume[1].fluid.X[3]
  0       0                       0                       0                
  3   256   # drain_Cathode.volume[1].fluid.der(X[3])
 -1       0                       0                       1                
  2   272   # drain_Cathode.volume[1].fluid.X[4]
  0       0                       0                       0                
  3   256   # drain_Cathode.volume[1].fluid.der(X[4])
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.volume[1].fluid.state.p
  0     300                       0                   10000                
  6   256   # drain_Cathode.volume[1].fluid.state.T
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.state.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.state.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.state.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.state.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.volume[1].fluid.state.X[5]
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.u
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.v
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.MX[1]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.MX[2]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.MX[3]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.MX[4]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.MX[5]
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.volume[1].fluid.M
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.E
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.R
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.dM
  0       0                       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.dX[5]
  0  2.0813237208370879E+02       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.R_g[1]
  0  1.8892448221406741E+02       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.R_g[2]
  0  4.6152332908508782E+02       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.R_g[3]
  0  2.9680338695053081E+02       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.R_g[4]
  0  2.5983699388727081E+02       0                       0                
  6   256   # drain_Cathode.volume[1].fluid.R_g[5]
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.dd
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.dv
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.du
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.du_dX[1]
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.du_dX[2]
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.du_dX[3]
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.du_dX[4]
  0       0                       0                       0                
  6  1280   # drain_Cathode.volume[1].fluid.du_dX[5]
  0       0                       0                       0                
  6   257   # drain_Cathode.volume[1].usePositiveFlow
 -1       0                       0                       0                
  1   281   # drain_Cathode.volume[1].positiveFlow[1]
 -1       0                       0                       0                
  1   281   # drain_Cathode.volume[1].positiveFlow[2]
 -1       0                       0                       0                
  1   281   # drain_Cathode.volume[1].positiveFlow[3]
  0  1.0000000000000000E-03       0                       0                
  6   256   # drain_Cathode.volume[1].summary.V
  0       2                       1                 1.0000000000000000E+100
  6   258   # drain_Cathode.basicHeatTransfer.n
  0       0                       0                       0                
  6   256   # drain_Cathode.basicHeatTransfer.Aheatloss
  0       0                       0                       0                
  6   256   # drain_Cathode.basicHeatTransfer.kc
  0       0                       0                       0                
  6   257   # drain_Cathode.basicHeatTransfer.infiniteHT
  0       0                       0                       0                
  6   257   # drain_Cathode.basicHeatTransfer.variableKc
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Cathode.frictionLoss.portA.m_flow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_Cathode.frictionLoss.portB.m_flow
  0       0                       0                       1                
  6   260   # drain_Cathode.frictionLoss.portB.X_outflow[1]
  0       0                       0                       1                
  6   260   # drain_Cathode.frictionLoss.portB.X_outflow[2]
  0       0                       0                       1                
  6   260   # drain_Cathode.frictionLoss.portB.X_outflow[3]
  0       0                       0                       1                
  6   260   # drain_Cathode.frictionLoss.portB.X_outflow[4]
  0       0                       0                       1                
  6   260   # drain_Cathode.frictionLoss.portB.X_outflow[5]
  0     300                       0                   10000                
  6   256   # drain_Cathode.frictionLoss.T_start
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.mflow_start
  0       1                       0                       0                
  6   257   # drain_Cathode.frictionLoss.positiveFlow
  0       0                       0                       0                
  6   257   # drain_Cathode.frictionLoss.dp_asState
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.dp
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.m_flow
  0       1                  1.0000000000000000E-08  100000                
  6   256   # drain_Cathode.frictionLoss.d
  0       0                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.frictionLoss.state_in.p
  0       0                       0                   10000                
  6   256   # drain_Cathode.frictionLoss.state_in.T
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_in.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_in.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_in.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_in.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_in.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.frictionLoss.stateB_in.p
  0       0                       0                   10000                
  6   256   # drain_Cathode.frictionLoss.stateB_in.T
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.stateB_in.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.stateB_in.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.stateB_in.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.stateB_in.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.stateB_in.X[5]
  0  100000                       0                  1.0000000000000000E+08
  6   256   # drain_Cathode.frictionLoss.state_out.p
  0       0                       0                   10000                
  6   256   # drain_Cathode.frictionLoss.state_out.T
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_out.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_out.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_out.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_out.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.state_out.X[5]
 -1       1                       0                       0                
  1   281   # drain_Cathode.frictionLoss.from_dp
 -1      10                       0                       0                
  1   280   # drain_Cathode.frictionLoss.dp_smooth
 -1  1.0000000000000000E-03       0                       0                
  1   280   # drain_Cathode.frictionLoss.mflow_smooth
  0       0                       0                       0                
  6   257   # drain_Cathode.frictionLoss.dynamicModel
 -1       1                       0                       0                
  1   280   # drain_Cathode.frictionLoss.T_mflow
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.summary.m_flow
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.summary.V_flow
  0       0                       0                       0                
  6   257   # drain_Cathode.frictionLoss.friction.from_dp
  0       1                       0                       0                
  6   257   # drain_Cathode.frictionLoss.friction.positiveFlow
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.friction.dp_smooth
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.friction.mflow_smooth
  0       0                       0                       0                
  6   257   # drain_Cathode.frictionLoss.friction.useFixedDensity
 -1       1                       0                 1.0000000000000000E+100
  1   280   # drain_Cathode.frictionLoss.friction.reference_d
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateA_inflow.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateA_inflow.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateA_inflow.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateA_inflow.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateA_inflow.X[5]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateB_inflow.X[1]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateB_inflow.X[2]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateB_inflow.X[3]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateB_inflow.X[4]
  0       0                       0                       1                
  6   256   # drain_Cathode.frictionLoss.friction.stateB_inflow.X[5]
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.friction.m_flow
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.frictionLoss.friction.dA
  0       0                       0                 1.0000000000000000E+100
  6   256   # drain_Cathode.frictionLoss.friction.dB
 -1  5.0000000000000000E-01       0                 1.0000000000000000E+100
  1   280   # drain_Cathode.frictionLoss.friction.d0
 -1     100                       0                       0                
  1   280   # drain_Cathode.frictionLoss.friction.dp0
  0       0                       0                       0                
  6   256   # drain_Cathode.frictionLoss.friction.m_flow0
  0       2                       0                       0                
  6   258   # drain_Cathode.summary.nbr
  0       0                       0                       0                
  6   256   # drain_Cathode.summary.V_tot
  0       0                       0                       0                
  6   256   # drain_Cathode.summary.m_flow_out
  0       0                       0                       0                
  6   256   # drain_Cathode.summary.dp[1]
  0       0                       0                       0                
  6   256   # drain_Cathode.summary.dp[2]
  0       0                       0                       0                
  6  1280   # drain_Cathode.lambda_fluid
 -1  2.0000000000000001E-01       0                       0                
  1   280   # drain_Cathode.width
 -1  2.9999999999999999E-02       0                       0                
  1   280   # drain_Cathode.depth
  0       0                       0                       0                
  6   256   # drain_Cathode.pstart[1]
  0       0                       0                       0                
  6  1280   # drain_Cathode.Dhyd
  0       2                       1                 1.0000000000000000E+100
  6   258   # drain_Cathode.thermalCollector.m
  0       0                       0                       0                
  6   388   # drain_Cathode.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   260   # pin_p.v
  0       0                       0                       0                
  6   388   # pin_p.i
  0       0                       0                       0                
  6   260   # pin_n.v
  0       0                       0                       0                
  6   388   # pin_n.i
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_cath.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # feed_cath.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # feed_an.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # feed_an.h_outflow
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_cath.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # drain_cath.h_outflow
  0  100000                       0                  1.0000000000000000E+08
  6   260   # drain_an.p
  0       0                 -1.0000000000000000E+08  1.0000000000000000E+08
  6   388   # drain_an.m_flow
  0       0                 -1.0000000000000000E+10  1.0000000000000000E+10
  6   260   # drain_an.h_outflow
  0       1                       1                 1.0000000000000000E+100
  6   258   # stackHeatLosses.N
  0       2                       1                 1.0000000000000000E+100
  6   258   # stackHeatLosses.nbr
  0       0                       0                       0                
  6   256   # stackHeatLosses.A_topWall
  0       0                       0                       0                
  6   256   # stackHeatLosses.A_bottomWall
  0       0                       0                       0                
  6   256   # stackHeatLosses.A_sideWall
  0       0                       0                       0                
  6   256   # stackHeatLosses.h_conv_top
  0       0                       0                       0                
  6   256   # stackHeatLosses.h_conv_side
  0       0                       0                       0                
  6   256   # stackHeatLosses.e_top
  0       0                       0                       0                
  6   256   # stackHeatLosses.e_side
  0       0                       0                       0                
  6   256   # stackHeatLosses.k_insul
  0       0                       0                       0                
  6   256   # stackHeatLosses.dl_topInsul
  0       0                       0                       0                
  6   256   # stackHeatLosses.dl_bottomInsul
  0       0                       0                       0                
  6   256   # stackHeatLosses.dl_sideInsul
  0       0                       0                       0                
  6   388   # stackHeatLosses.environment.Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.leftWall[1].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.leftWall[2].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.rightWall[1].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.rightWall[2].Q_flow
  0       0                       0                       0                
  6   256   # stackHeatLosses.summary.environment_Q
  0      11                       1                 1.0000000000000000E+100
  6   258   # stackHeatLosses.thermalCollector.m
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[1].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[2].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[4].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[5].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[6].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[7].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[8].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[9].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[10].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_a[11].Q_flow
  0       0                       0                       0                
  6   388   # stackHeatLosses.thermalCollector.port_b.Q_flow
  0       0                       0                       0                
  6   256   # stackHeatLosses.topConvection[1].dT
  0       1                       0                       0                
  6   256   # stackHeatLosses.topConvectionCoeff[1].k
  0       0                       0                       0                
  6   256   # stackHeatLosses.topRadiation[1].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.topRadiation[1].Gr
  0       0                       0                       0                
  6   256   # stackHeatLosses.rightRadiation[1].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.rightRadiation[1].Gr
  0       0                       0                       0                
  6   256   # stackHeatLosses.rightRadiation[2].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.rightRadiation[2].Gr
  0       1                       0                       0                
  6   256   # stackHeatLosses.rightConvectionCoeff[1].k
  0       1                       0                       0                
  6   256   # stackHeatLosses.rightConvectionCoeff[2].k
  0       0                       0                       0                
  6   256   # stackHeatLosses.rightConvection[1].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.rightConvection[2].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.leftRadiation[1].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.leftRadiation[1].Gr
  0       0                       0                       0                
  6   256   # stackHeatLosses.leftRadiation[2].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.leftRadiation[2].Gr
  0       0                       0                       0                
  6   256   # stackHeatLosses.leftConvection[1].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.leftConvection[2].dT
  0       1                       0                       0                
  6   256   # stackHeatLosses.leftConvectionCoeff[1].k
  0       1                       0                       0                
  6   256   # stackHeatLosses.leftConvectionCoeff[2].k
  0       0                       0                       0                
  6   256   # stackHeatLosses.bottomConduction[1].dT
  0       0                       0                       0                
  6   256   # stackHeatLosses.bottomConduction[1].G
  0  2.8814999999999998E+02       0                 1.0000000000000000E+100
  6   292   # heat_port.T
  0       0                       0                       0                
  6   388   # heat_port.Q_flow
  0       0                       0                       0                
  6   256   # fuel_in
  0       0                       0                       0                
  6   256   # fuel_used
  0       0                       0                       0                
  6   256   # utilization
  0       1                       0                       0                
  6  1282   # ref[1]
  0       2                       0                       0                
  6  1282   # ref[2]
  0       0                       0                       0                
  6   260   # ground.p.v
  0       0                       0                       0                
  6   388   # ground.p.i
  0       0                       0                       0                
  6   388   # subStack[1].anode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[1].cathode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[2].anode_channel.channel.q[1].Q_flow
  0       0                       0                       0                
  6   388   # subStack[2].cathode_channel.channel.q[1].Q_flow


# Matrix with 6 columns defining the initial value calculation
# (columns 5 and 6 are not utilized for the calculation but are
#  reported by dymosim via dymosim -i for user convenience):
#
# column 1: Type of initial value
#           = -2: special case: for continuing simulation (column 2 = value)
#           = -1: fixed value (column 2 = fixed value)
#           =  0: free value, i.e., no restriction (column 2 = initial value)
#           >  0: desired value (column 1 = weight for optimization
#                                column 2 = desired value)
#                 use weight=1, since automatic scaling usually
#                 leads to equally weighted terms
# column 2: fixed, free or desired value according to column 1.
# column 3: Minimum value (ignored, if Minimum >= Maximum).
# column 4: Maximum value (ignored, if Minimum >= Maximum).
#           Minimum and maximum restrict the search range in initial
#           value calculation. They might also be used for scaling.
# column 5: Category of variable.
#           = 1: parameter.
#           = 2: state.
#           = 3: state derivative.
#           = 4: output.
#           = 5: input.
#           = 6: auxiliary variable.
# column 6: Data type of variable and flags according to dsBaseType
#  <value>&3= 0: real.
#  <value>&3= 1: boolean.
#  <value>&3= 2: integer.
#
# Initial values are calculated according to the following procedure:
#
# - If parameters, states and inputs are FIXED, and other variables
#   are FREE, no special action takes place (default setting).
#
# - If there are only FIXED and FREE variables and the number of
#   FREE parameters, states and inputs is IDENTICAL to the number of
#   FIXED state derivatives, outputs and auxiliary variables, a non-linear
#   equation is solved to determine a consistent set of initial conditions.
#
# - In all other cases the following optimization problem is solved:
#      min( sum( weight(i)*( (value(i) - DESIRED(i))/scale(i) )^2 ) )
#   under the constraint that the differential equation is fulfilled
#   at the initial time. In most cases weight(i)=1 is sufficient, due
#   to the automatic scaling (if DESIRED(i) is not close to zero,
#   scale(i) = DESIRED(i). Otherwise, the scaling is based on the
#   nominal value (and maybe minimum and maximum values given in 
#   column 3 and 4). If these values are zero, scale(i)=1 is used).
#
char initialDescription(4842,148)
Number of discretization nodes in the flow direction [:#(type=Integer)]
number of substacks in parallel [:#(type=Integer)]
number of cells in substacks (vector) [:#(type=Integer)]
number of cells in substacks (vector) [:#(type=Integer)]
active cell area [m2]
specific heat capacity of cell material [J/(kg.K)]
cell internal heat transfer coefficient [W/(m2.K)]
total mass of stack [kg]
Top wall area [m2]
Top wall heat transfer coefficient [W/(m2.K)]
Top wall average metal thickness [m]
Top wall convective heat transfer coefficient (Convection) [W/(m2.K)]
Top wall emission value (Radiation) [1]
Bottom wall area [m2]
Bottom wall heat transfer coefficient [W/(m2.K)]
Bottom wall average metal thickness [m]
Side walls area (sum 4 sides) [m2]
Side walls convective heat transfer coefficient [W/(m2.K)]
Side walls emission value
Insulation thermal conductivity (conduction) [W/(m.K)]
Top wall insulation thickness [m]
Bottom wall insulation thickness [m]
Side walls insulation thickness [m]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Initial pressure drop in anode manifolds due to friction/Pipe resistance [Pa|bar]
Initial pressure drop in cathode manifolds due to friction/Pipe resistance [Pa|bar]
splitratio anode side
splitratio anode side
splitratio cathode side
splitratio cathode side
Manifold_an volume [m3]
Manifold_cath volume [m3]
Stack height [m]
Cell thickness [m]
Average metal thickness of wall [m]
Total cell area [m2]
Nominal mass flow rate anode side [kg/s]
Nominal mass flow rate cathode side [kg/s]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
True if thermal conduction in the cell along the flow direction is included [:#(type=Boolean)]
Cell internal thermal conductivity [W/(m.K)]
Cross section area of a single cell [m2]
Length of the cell [m]
Cell thermal conductance of material [W/K]
number of cells in substack [:#(type=Integer)]
total mass of substack [kg]
specific heat capacity of substack material [J/(kg.K)]
Add prox reactor before inlet to anode channel [:#(type=Boolean)]
substack power [W]
Anode stoichiometry [1]
Cathode stoichiometry [1]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
number of cells [:#(type=Integer)]
total heat capacity, PEN, substrate and electrolyte [J/K]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
total electric power [W]
heat produced in each section [W]
Effective current that relates to consumption out of stack [A/m2]
calculate anode and cathode temperature explicitly from enthalpy [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Current flowing into the pin [A]
Current flowing into the pin [A]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
temperature on the anode side [K|degC]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Tcell derivative [K/s]
[W]
Power to external load from each cell [W]
Effective current that relates to consumption of oxygen [A/m2]
[degC]
Mass flow rate of oxygen into electrolyte [kg/s]
Mass flow rate of hydrogen into electrolyte [kg/s]
Mass flow rate of steam into electrolyte [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Initial temperature dependent resistivity [Ohm.m2]
Activation energy [J/mol]
temperature [K|degC]
Nernst potentials [V]
Internal resistance [Ohm]
Temperature dependent resistivity [Ohm.m2]
Gibbs free energy from reaction [J/mol]
Pressure of H2 [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of O2 [Pa|bar]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Current flowing into the pin [A]
Current flowing into the pin [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Current flowing into the pin [A]
Current flowing into the pin [A]
Current flowing from pin p to pin n [A]
Reformate component indices [:#(type=Integer)]
Reformate component indices [:#(type=Integer)]
Cathode air component indices [:#(type=Integer)]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Current flowing into the pin [A]
Current flowing into the pin [A]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
[1]
Number of parallel channels [1]
Length of anode channel [m]
Diameter of anode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference anode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of cathode channel [m]
Diameter of cathode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference cathode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer
Calibration factor for pressure drop
Calibration factor for heat transfer
Nominal density in prox loss (only used if addProxToAnode=true) [kg/m3|g/cm3]
Nominal pressure drop in prox loss (only used if addProxToAnode=true) [Pa|bar]
Nominal mass flow rate in prox loss (only used if addProxToAnode=true) [kg/s]
[mol/s]
[mol/s]
[mol/s]
[mol/s]
Number of discretizations [:#(type=Integer)]
Number of cells [:#(type=Integer)]
Total stack power [W]
External current density [A/m2]
Cell voltage [V]
Total heat produced in cell [W]
Pressure drop anode side [Pa|bar]
Pressure drop cathode side [Pa|bar]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
der(Total mass of the pipe) [kg/s]
Temperature of upstream fluid [K|degC]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
number of reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]







Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
der(Total # of moles) [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]


Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
substance index vector with CH4 and H2O [:#(type=Integer)]
substance index vector with CH4 and H2O [:#(type=Integer)]
[K|degC]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Upstream temperature when flow B -> A [K|degC]
Heat flow rate into control volumes [W]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
der(Total mass of the pipe) [kg/s]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
number of reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]





Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
der(Total # of moles) [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
der(gas pressure) [Pa/s]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Heat flow rate into control volumes [W]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
index for H2 in the anode medium [:#(type=Integer)]
index for O2 in the cathode medium [:#(type=Integer)]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass of each component [kg/mol]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Molar mass [kg/mol]
Enthalpy of formation at 298.15K [J/kg]
H0(298.15K) - H0(0K) [J/kg]
Temperature limit between low and high data sets [K|degC]
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature coefficients a
Low temperature constants b
Low temperature constants b
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature coefficients a
High temperature constants b
High temperature constants b
Gas constant [J/(kg.K)]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
True if thermal conduction in the cell along the flow direction is included [:#(type=Boolean)]
Cell internal thermal conductivity [W/(m.K)]
Cross section area of a single cell [m2]
Length of the cell [m]
Cell thermal conductance of material [W/K]
number of cells in substack [:#(type=Integer)]
total mass of substack [kg]
specific heat capacity of substack material [J/(kg.K)]
Add prox reactor before inlet to anode channel [:#(type=Boolean)]
substack power [W]
Anode stoichiometry [1]
Cathode stoichiometry [1]
Number of discretization nodes [:#(type=Integer)]
total number of mass fractions for anode [:#(type=Integer)]
total number of mass fractions for cathode [:#(type=Integer)]
active cell area [m2]
number of cells [:#(type=Integer)]
total heat capacity, PEN, substrate and electrolyte [J/K]
heat transfer coefficient between fluid and substrate [W/(m2.K)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Substrate temperature [K|degC]
der(Substrate temperature) [K/s]
total electric power [W]
heat produced in each section [W]
Effective current that relates to consumption out of stack [A/m2]
calculate anode and cathode temperature explicitly from enthalpy [:#(type=Boolean)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Current flowing into the pin [A]
Potential at the pin [V]
Current flowing into the pin [A]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass fractions [kg/kg]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
temperature on the anode side [K|degC]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density of medium [kg/m3|g/cm3]
Specific enthalpy of medium [J/kg]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Temperature of medium in [degC] [degC;]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Tcell derivative [K/s]
[W]
Power to external load from each cell [W]
Effective current that relates to consumption of oxygen [A/m2]
[degC]
Mass flow rate of oxygen into electrolyte [kg/s]
Mass flow rate of hydrogen into electrolyte [kg/s]
Mass flow rate of steam into electrolyte [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Ionic mass flow rate on anode side [kg/s]
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Stoich vector for reactions at the anode side {1,-1} for H2 and H2O
Initial temperature dependent resistivity [Ohm.m2]
Activation energy [J/mol]
temperature [K|degC]
Internal resistance [Ohm]
Temperature dependent resistivity [Ohm.m2]
Gibbs free energy from reaction [J/mol]
Pressure of H2 [Pa|bar]
Pressure of H2O [Pa|bar]
Pressure of O2 [Pa|bar]
Reference temperature [K|degC]
Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref)) [1/K]
Voltage drop of the two pins (= p.v - n.v) [V]
Current flowing from pin p to pin n [A]
Current flowing into the pin [A]
Current flowing into the pin [A]
=true, if heatPort is enabled [:#(type=Boolean)]
Fixed device temperature if useHeatPort = false [K|degC]
Loss power leaving component via heatPort [W]
Actual resistance = R*(1 + alpha*(T_heatPort - T_ref)) [Ohm]
Current flowing into the pin [A]
Potential at the pin [V]
Current flowing into the pin [A]
Current flowing from pin p to pin n [A]
Reformate component indices [:#(type=Integer)]
Reformate component indices [:#(type=Integer)]
Cathode air component indices [:#(type=Integer)]
Current flowing into the pin [A]
Potential at the pin [V]
Current flowing into the pin [A]
Specific enthalpy of exiting fluid  [J/kg]
Specific enthalpy of exiting fluid  [J/kg]
Heat flow rate (positive if flowing from outside into the component) [W]
[1]
Number of parallel channels [1]
Length of anode channel [m]
Diameter of anode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference anode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of parallel channels [1]
Length of cathode channel [m]
Diameter of cathode channel (single channel) [m]
Hydraulic diameter, single channel [m]
Circumference cathode channel [m]
Flow cross section area, single channel [m2]
Total volume [m3]
Heat transfer area, single channel [m2]
Number of segments [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initial pressure in control volumes [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial control volume specific enthalpies [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial control volume temperatures [K|degC]
Initial control volume temperatures [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Pressure drop smoothing region around zero [Pa|bar]
Smoothing interval around zero mass flow rate [kg/s]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
if true, then massflow rate is computed from pressure drop [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
flag for switching events for flow reversal on/off [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
use heat transfer model from channel [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer
Calibration factor for pressure drop
Calibration factor for heat transfer
Nominal density in prox loss (only used if addProxToAnode=true) [kg/m3|g/cm3]
Nominal pressure drop in prox loss (only used if addProxToAnode=true) [Pa|bar]
Nominal mass flow rate in prox loss (only used if addProxToAnode=true) [kg/s]
[mol/s]
[mol/s]
[mol/s]
[mol/s]
Number of discretizations [:#(type=Integer)]
Number of cells [:#(type=Integer)]
Total stack power [W]
External current density [A/m2]
Cell voltage [V]
Total heat produced in cell [W]
Pressure drop anode side [Pa|bar]
Pressure drop cathode side [Pa|bar]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
der(Total mass of the pipe) [kg/s]
Temperature of upstream fluid [K|degC]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Mass flow rate (single channel) [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Mass flow rate [kg/s]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
Stoich matrix for reactions
number of reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
base component index for reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]
[1]
[1]







Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
equilibrium reaction ratio of mole fractions
equilibrium reaction ratio of mole fractions
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Stoichiometric matrix (mass based)
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Temperature dependent equilibrium positions
Temperature dependent equilibrium positions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
der(Total # of moles) [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Molar flow rate [mol/s]
Dynamic reaction rate
der(Dynamic reaction rate)
Dynamic reaction rate
der(Dynamic reaction rate)
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]


Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Matrix of reactant exponents
Reaction rate vector [mol/s]
Reaction rate vector [mol/s]
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for steam reforming
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
stoichiometry vector for water gas shift reaction
substance index vector with CH4 and H2O [:#(type=Integer)]
substance index vector with CH4 and H2O [:#(type=Integer)]
[K|degC]
Gibbs free energy for reforming reaction [J/mol]
Gibbs free energy for WGS reaction [J/mol]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Structurally independent mass fractions [kg/kg]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
gas pressure [Pa|bar]
der(gas pressure) [Pa/s]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Upstream temperature when flow B -> A [K|degC]
Heat flow rate into control volumes [W]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
Rate of convective change in component moles [mol/s]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Pressure drop over the pipe [Pa|bar]
Mass flow rate through the pipe [kg/s]
Total mass of the pipe [kg]
der(Total mass of the pipe) [kg/s]
Density of upstream fluid [kg/m3|g/cm3]
Number of control volumes [:#(type=Integer)]

Number of parallel channels [1]
Channel length [m]
Diameter (single channel) [m]
Hydraulic diameter (single channel) [m]
Cross sectional area (single channel) [m2]
Circumference (single channel) [m]
Total volume (all channels) [m3]
Heat transfer area (single channel) [m2]
Consider heat transfer effects (not used when connected to membrane) [:#(type=Boolean)]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
weight factor for inlet X in lumped case
saturated water mole fraction at exit [1]
Consider static head [:#(type=Boolean)]
Height(outlet) - height(inlet) [m]
Acceleration of gravity [m/s2]
Number of control volumes [:#(type=Integer)]
Number of parallel channels [1]
Length of each segment [m]
Hydraulic diameter (single channel, per segment) [m]
Cross sectional area (single channel, per segment) [m2]
Total channel length [m]
Total control volume sizes (all channels per segment) [m3]
Total volume [m3]
Average cross sectional area [m2]
Heat transfer area (single channel, per segment) [m2]
Number of control volumes [:#(type=Integer)]
Initialization option (steady state or fix value) [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial inlet pressure [Pa|bar]
Initial outlet pressure [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initial pressure in control volumes and outlet port [Pa|bar]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial outlet specific enthalpy [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial specific enthalpies, inlet port and control volumes [J/kg]
Initial inlet temperature [K|degC]
Initial outlet temperature [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial temperatures, inlet port and control volumes [K|degC]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass fractions (all control volumes) [1]
Initial mass flow rate (guess value) [kg/s]
Assume positive flow for upstream properties [:#(type=Boolean)]
If true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Flag for switching events for flow reversal on/off [:#(type=Boolean)]
Number of ports [:#(type=Integer)]
Number of ports [:#(type=Integer)]
Temperature profile in channel [K|degC]
der(Temperature profile in channel) [K/s]
Use pressure difference as state variable [:#(type=Boolean)]
Discretization scheme for friction and control volumes (see info) [:#(type=Modelon.ThermoFluid.Choices.FrictionDistribution)]
[:#(type=Integer)]
Calibration factor for pressure drop
Calibration factor for heat transfer [1]
Consider static head [:#(type=Boolean)]
Relative levels of control volume outlets (inlet port at 0) [m]
Acceleration of gravity [m/s2]
Flow cross sectional area (single channel) [m2]
Hydraulic diameter (single channel) [m]
Number of parallel channels (only for correlations parameterized with multi channel properties)
Fraction of total channel length (used for discretization, all correlations) [1]
Fraction of nominal flow through this instance (used when propagating correlation to parallel channels and using nominal flow rate parameterization)
Fraction of nominal dp over this instance (used when propagating correlation to channels in series and using nominal dp parameterization)
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Pressure drop is computed from upstream properties [:#(type=Boolean)]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate (total for all channels) [kg/s]
Flow cross sectional area [m2]
Channel length (total length in case of discretized channel) [m]
Hydraulic diameter [m]
Heat transfer is computed from upstream properties [:#(type=Boolean)]
Calibration factor for pipe length
Heat transfer coefficient [W/(m2.K)]
Number of nodes [:#(type=Integer)]
equivalent Cp for reactions [J/(kg.K)]
Reaction heat, only if not included in enthalpy [W]
number of reactions [:#(type=Integer)]
Pressure start value [Pa|bar]
Temperature start value [K|degC]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Start value for outlet composition [kg/kg]
Fluid volume [m3]
Speed factor for quasi-equilibrium reactions
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
[kg/mol]
Mixture molar weight [kg/mol]
der(Mixture molar weight) [kg.s-1.mol-1]
[1]
[1]
[1]
[1]
[1]





Reference pressure at 1bar [Pa|bar]
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
logarithm of mole fractions
Initial total moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Initial component moles [mol]
Conversion efficiency, <=1
Time factor for quasi-equilibrium reactions
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Component moles [mol]
der(Component moles) [mol/s]
Total # of moles [mol]
der(Total # of moles) [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Reaction(source) mole rates [mol/s]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Gibbs energy of formation [J/mol]
Nominal value for amount of substance (moles), used for numerical scaling
Depletion range [mol]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Protection factor against depleted species
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
der(Mass fractions (= (component mass)/total mass  m_i/m)) [s-1]
Density of medium [kg/m3|g/cm3]
der(Density of medium) [Pa.m-2.s]
Specific internal energy of medium [J/kg]
Gas constant (of mixture if applicable) [J/(kg.K)]
der(Gas constant (of mixture if applicable)) [W/(kg.K)]
Molar mass (of mixture or single fluid) [kg/mol]
[:#(type=AssertionLevel)]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
= true if StateSelect.prefer shall be used for the independent property variables of the medium [:#(type=Boolean)]
Absolute pressure of medium in [bar] [bar]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Component mole fractions [mol/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Derivative of inner energy by moles at constant temperature [J/mol]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Specific enthalpies of the component gases [J/kg]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Component specific entropy [J/(kg.K)]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific internal energy per component [J/kg]
Specific heat capacity [J/(kg.K)]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Component Gibbs energy of formation, molar base! [J/mol]
Derivative of density by temperature at constant pressure [kg/(m3.K)]
Derivative of density by pressure at constant temperature [s2/(m2)]
Derivative of specific inner energy by pressure at constant T, zero for ideal gas [J/(kg.Pa)]
Derivative of specific inner energy by temperature at constant p [J/(kg.K)]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
Derivative vector of density by change in mass composition [kg/m3|g/cm3]
der(gas pressure) [Pa/s]
internal energy per segment [J]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Total component mass per segment [kg]
Pressure after each control volume [Pa|bar]
Pressure after each control volume [Pa|bar]
Static head between control volumes [Pa|bar]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Heat flow rate into control volumes [W]
Heat transfer coefficient [W/(m2.K)]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Mass residual for balance from convection [kg/s]
Total inlet flow rate at portA [kg/s]
Total inlet flow rate at portB [kg/s]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portA [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
Mixture mass fractions of inlet flows at portB [1]
[1]
Wall temperature, if heat transfer enabled [K|degC]
number of components in media [:#(type=Integer)]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Independent mass flow rates across segment boundaries [kg/s]
Enthalpy flow rates of fluid across segment boundaries [W]
Enthalpy flow rates of fluid across segment boundaries [W]
Energy residual for balance [W]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
Component mass residual [kg/s]
derivative of inner energy by temperature at constant moles [J/K]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
Independent mole fractions [1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
der(Independent mole fractions) [s-1]
mass flow rate [kg/s]
Specific enthalpy flow rate [W]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
Independent component mass flow rate [kg/s]
index for H2 in the anode medium [:#(type=Integer)]
index for O2 in the cathode medium [:#(type=Integer)]
Number of substacks [:#(type=Integer)]
Cathode flow rate [kg/s|g/s]
Anode flow rate [kg/s|g/s]
Stack air inlet manifold temperature [degC]
Stack fuel inlet temperature [degC]
Stack air outlet manifold temperature [degC]
Stack air outlet manifold temperature [degC]
Stack fuel outlet temperature [degC]
Stack fuel outlet temperature [degC]
Membrane exit temperature [degC]
Membrane exit temperature [degC]
Stack base plate metal temperature [degC]
Stack top end plate metal temperature [degC]
Total stack heat [J]
Stack electrical power out [W]
Total stack voltage [V]
Total stack power [W]
Substack voltages [V]
Substack voltages [V]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel outlet composition vector [1]
Stack fuel utilisation (% of total H2 supplied consumed by electrochemistry) [1]
Stack fuel utilisation (% of total H2 supplied consumed by electrochemistry) [1]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
Port temperature [K|degC]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
total heat flow from qa to qb [W]
Port temperature [K|degC]
Number of nodes [:#(type=Integer)]
Wall metal volume per segment [m3]
Wall area per segment [m2]
Average metal thickness of wall [m|mm]
Remove thermal resistance if false [:#(type=Boolean)]
removes thermal inertia if true [:#(type=Boolean)]
true for counterflow difference [:#(type=Boolean)]
True if derivatives should be zero at initialization [:#(type=Boolean)]
Temperature start value - first node [K|degC]
Temperature start value - last node [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
[kg]
Thermal resistance [K/W]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]


Port temperature [K|degC]
Number of nodes [:#(type=Integer)]
Wall metal volume per segment [m3]
Wall area per segment [m2]
Average metal thickness of wall [m|mm]
Remove thermal resistance if false [:#(type=Boolean)]
removes thermal inertia if true [:#(type=Boolean)]
true for counterflow difference [:#(type=Boolean)]
True if derivatives should be zero at initialization [:#(type=Boolean)]
Temperature start value - first node [K|degC]
Temperature start value - last node [K|degC]
Metal start temperature, direction along n as on side qa [K|degC]
[kg]
Thermal resistance [K/W]
Metal mean temperature, direction along n as on side qa [K|degC]
der(Metal mean temperature, direction along n as on side qa) [K/s]
Introduced due to pre()-only operates directly on variables

Port temperature [K|degC]
Invert flow direction at the cathode to obtain counter flow configuration [:#(type=Boolean)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of drain connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial inlet pressure [Pa|bar]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet temperatrue [K|degC]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Mass flow rate at manifold inlet [kg/s]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of drain connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial inlet pressure [Pa|bar]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Mass flow rate at manifold inlet [kg/s]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of feed connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial outlet pressure [Pa|bar]
Volume size [m3]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet temperatrue [K|degC]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
Total volume [m3]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Volume size [m3]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Massflow rate [kg/s]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Inlet fluid temperature, design flow direction [K|degC]
Inlet fluid temperature, reverse flow direction [K|degC]
Outlet fluid temperature, design flow direction [K|degC]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Mass flow rate through component [kg/s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass flow rate [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Mass flow rate at manifold outlet [kg/s]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial inlet specific enthalpy [J/kg]
Initial inlet temperature [K|degC]
Initial pressure drop due to friction/Pipe resistance [Pa|bar]
Initial mass flow rate through the component [kg/s]
Total height of manifold [m]
Only flow in design direction if true [:#(type=Boolean)]
Number of feed connectors [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]

[:#(type=Integer)]
Manifold volume [m3]
Nusselt number at the border manifolds/stack (fully developed laminar flow) [1]
Initial outlet pressure [Pa|bar]
Volume size [m3]
der(Volume size) [m3/s]
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initialize from enthalpy if true, otherwise from temperature [:#(type=Boolean)]
Initial pressure [Pa|bar]
Initial temperature [K|degC]
Initial specific enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional mass flow inputs to volume [kg/s]
Additional heat added to volume [W]
Fluid mass in volume [kg]
Number of ports [:#(type=Integer)]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
[:#(type=Boolean)]
Fixed step size [s]
Factor to multiply der(p) with for real-time
Inlet specific enthalpy [J/kg]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Inlet mass based composition [1]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet mass flow rates [kg/s]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet enthalpy flowrate [W]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Inlet component massflow rates [kg/s]
Internal energy derivative [W]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Mass derivative of substances [kg/s]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Enthalpy flowrate [W]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Component massflow rates [kg/s]
Mass [kg]
If true then derivatives are set to zero [:#(type=Boolean)]
If true then dynamic energy balance, else temperature given by T_in [:#(type=Boolean)]
Activates delay operators for real-time simulations [:#(type=Boolean)]
Step size used in real-time operators [s]
Factor to multiply der(p) with for real-time
Initialization option [:#(type=Modelon.ThermoFluid.Choices.InitOptions)]
Initial temperature [K|degC]
Initial pressure [Pa|bar]
Initial specific Enthalpy [J/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Initial mass fractions [kg/kg]
Number of substances [:#(type=Integer)]
Number of trace components [:#(type=Integer)]
Total volume [m3]
der(Total volume) [m3/s]
Pressure [Pa|bar]
der(Pressure) [Pa/s]
Density [kg/m3|g/cm3]
Temperature [K|degC]
der(Temperature) [K/s]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
der(Mass fractions) [s-1]
Mass fractions [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
SpecificInternalEnergy [J/kg]
Specific volume [m3/kg]
[kg]
[kg]
[kg]
[kg]
[kg]
Mass [kg]
Internal Energy [J]
Ideal gas constant [J/(kg.K)]
Mass derivative [kg/s]
[1/s]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
Ideal gas constant for each gas component [J/(kg.K)]
[kg/(m3.s)]
[m3/(kg.s)]
[J/(kg.s)]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
[J/kg]
Apply positiveFlow setting to ports if true [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Assume inlet flow in energy balance if true (set per port) [:#(type=Boolean)]
Volume size [m3]
discretization number [:#(type=Integer)]
total heat transfer area [m2]
constant heat transfer coefficient [W/(m2.K)]
if true, ideal heat transfer -> same temperatures [:#(type=Boolean)]
if true, use input signal as heat transfer coefficient [:#(type=Boolean)]
Mass flow rate into the component [kg/s]
Mass flow rate into the component [kg/s]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Mass fractions of exiting fluid [kg/kg]
Initial temperature [K|degC]
Initial mass flow rate [kg/s]
Set to true if no revere flow is expected [:#(type=Boolean)]
Use dp as dynamic state [:#(type=Boolean)]
Pressure drop along component [Pa|bar]
Massflow rate [kg/s]
Inlet fluid density, design flow direction [kg/m3|g/cm3]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Absolute pressure of medium [Pa|bar]
Temperature of medium [K|degC]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Pressure drop smoothing region around zero [Pa|bar]
Massflow smoothing region around [kg/s]
Introduce m_flow dynamics with given time constant [:#(type=Boolean)]
Time constant for flow dynamics [s]
Mass flow rate through component [kg/s]
Volume flow rate through component [m3/s]
if true, then massflow rate is computed from pressure [:#(type=Boolean)]
Assume positive flow for upstream fluid properties [:#(type=Boolean)]
Turbulent flow if |dp|>dp_smooth [Pa|bar]
Massflow smoothing region around [kg/s]
Assume fixed upstream density in flow model [:#(type=Boolean)]
Assumed upstream density if useFixedDensity = true [kg/m3|g/cm3]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass fractions (= (component mass)/total mass  m_i/m) [kg/kg]
Mass flow rate [kg/s]
Density from stateA [kg/m3|g/cm3]
Density from stateB [kg/m3|g/cm3]
Nominal density [kg/m3|g/cm3]
Nominal pressure drop [Pa|kPa]
Nominal mass flow rate [kg/s]
Number of subFeeds / subDrains [:#(type=Integer)]
Manifold volume [m3]
Mass flow rate at manifold outlet [kg/s]
Pressure drops in the manifold [Pa|bar]
Pressure drops in the manifold [Pa|bar]
Fluid thermal conductivity [W/(m.K)]
Manifold width [m]
Manifold depth [m]
Initial pressure vector [Pa|bar]
Hydraulic diameter (Rectangular channel) [m]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Potential at the pin [V]
Current flowing into the pin [A]
Potential at the pin [V]
Current flowing into the pin [A]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Pressure [Pa|bar]
Mass flow rate into the component [kg/s]
Specific enthalpy of exiting fluid  [J/kg]
Number of discretization from left to right wall [:#(type=Integer)]
Number of discretization from bottom to top wall [:#(type=Integer)]
Total top wall area [m2]
Total bottom wall area [m2]
Total vertical wall area (sum 4 sides) [m2]
Top wall convection heat transfer coefficient [W/(m2.K)]
Vertical walls convection heat transfer coefficient [W/(m2.K)]
Emission value of top wall [1]
Emission value of vertical walls
Insulation thermal conductivity [W/(m.K)]
Top insulation thickness [m]
Bottom insulation thickness [m]
Side wall insulation thickness [m]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Environment heat transfer [W]
Number of collected heat flows [:#(type=Integer)]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
= solid.T - fluid.T [K,]
Constant output value [W/K]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
Constant output value [W/K]
Constant output value [W/K]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
port_a.T - port_b.T [K,]
Net radiation conductance between two surfaces (see docu) [m2]
= solid.T - fluid.T [K,]
= solid.T - fluid.T [K,]
Constant output value [W/K]
Constant output value [W/K]
port_a.T - port_b.T [K,]
Constant thermal conductance of material [W/K]
Port temperature [K|degC]
Heat flow rate (positive if flowing from outside into the component) [W]
Fuel flowing into the system
Fuel consumed in the fuel cell
Fuel utilization
index for H2 in the anode medium [:#(type=Integer)]
index for H2 in the anode medium [:#(type=Integer)]
Potential at the pin [V]
Current flowing into the pin [A]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]
Heat flow rate (positive if flowing from outside into the component) [W]

